<?xml version="1.0"?>
<doc>
    <assembly>
        "ManageLiteAV"
    </assembly>
    <members>
        <member name="M:ITXLivePlayer.setLivePlayAttribute(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
    * \brief：设置播放选项
	* 
	* 缓冲区时长是较为常用的设置项，播放缓冲区的作用是为了抵抗网络波动导致的音视频卡顿。
	* 缓冲区时长越大，视频播放的卡顿率越低，观众跟主播之间的时延也就越高。
	* 缓冲区时长越小，视频播放的卡顿率越高，观众跟主播之间的时延也就越低。
	*
	* \note 缓冲区时长不等于观众跟主播之间的时延，一般而言，时延要比缓冲区时长大1-2秒，这取决于 CDN 的质量。
	*       如果主播采用的是 OBS 等直播软件，那么时延还会更高一些，因为 OBS 本身会有1秒以上的推流时延。
	*
    * \param：jsonParam - 属性信息，UTF-8编码。
	*
    * <pre>
    *    1. AutoAdjustCacheTime | bool  | 设置是否自动调整缓存时间, 默认值:true。
    *        - true：启用自动调整，SDK 将根据网络状况在一个范围内调整缓冲区时长，网络越好，缓冲越短，时延越小，调整范围为：[MinAutoAdjustCacheTime - MaxAutoAdjustCacheTime]。
    *        - false：关闭自动调整，SDK 将固定使用默认的播放缓冲区时长，也就是 “CacheTime” 所设置的值。
    *    
    *    2. CacheTime | float | 默认的播放缓存时长，单位秒，取值需要大于0.2，默认值：5。
    *    
    *    3. MaxAutoAdjustCacheTime | float | 播放器最大缓冲时间，单位秒，取值需要大于0.2，默认值：5，含义：播放器的最大播放延迟大约为 5+1=6 秒（CDN会引入约1秒延迟）。
    *
    *    4. MinAutoAdjustCacheTime | float | 播放器最小缓冲时间，单位秒，取值需要大于0.2，默认值：1，含义：播放器的最小播放延迟大约为 1+1=2 秒（CDN会引入约1秒延迟）。
    *
    *    5. VideoBlockThreshold | int | 播放器视频卡顿报警阈值，单位毫秒，默认值为800毫秒，含义：视频卡顿超过 800 毫秒，ITXLivePlayerCallback 会通知 PLAY_WARNING_VIDEO_PLAY_LAG。
    *
    *    6. ConnectRetryCount | int | 拉流网络断开重连次数，默认值为3。
    *
    *    7. ConnectRetryInterval | int | 拉流网络断开重连时间间隔，单位秒，默认值为3。
    *
	* 示例:
	*    setLivePlayAttribute("{\"AutoAdjustCacheTime\":true, \"MinAutoAdjustCacheTime\": 2.0, \"MaxAutoAdjustCacheTime\": 5.0}");
	* 含义：
	*    设置播放缓冲区根据网络自动调整，调整范围为2-5秒，观众与主播之间的延迟约为3-6秒（如果主播使用 OBS 推流则为4-7秒），网络越差，延迟越大。
    * </pre></member>
        <member name="M:ITXLivePlayer.captureVideoSnapShot(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
\brief：截图当前拉流的图像到本地，
\param：filePath - 存储路径，UTF-8编码。
\param: length - 路径大小
\return：0成功，非0失败
\errorRet:  -1:失败，-2路径非法，-3文件存在，-4未拉流

</member>
        <member name="M:ITXLivePlayer.setEnableMessage(System.Boolean)">
\brief：是否开启消息通道， 默认值为 false
\param：enableMessage - true：开启，false：关闭


</member>
        <member name="M:ITXLivePlayer.setOutputVideoFormat(TXEOutputVideoFormat)">
\brief：设置视频编码格式，默认格式是TXE_OUTPUT_VIDEO_WITHOUT_OUTPUT
\param：format - 视频编码格式，参考 TXLiveTypeDef.h 中定义的 TXEOutputVideoFormat 枚举值
\return：无
\note：自定义渲染必须设置输出格式。

</member>
        <member name="M:ITXLivePlayer.setRenderYMirror(System.Boolean)">
\brief：设置渲染的镜像效果
\param：mirror - true表示画面左右反转，false表示保持原样
\return：无

</member>
        <member name="M:ITXLivePlayer.setRotation(TXEVideoRotationType)">
\brief：设置图像的顺时针旋转角度
\param：rotation - 参考 TXLiveTypeDef.h 中定义的 TXEVideoRotationType 枚举值
\return:无

</member>
        <member name="M:ITXLivePlayer.setRenderMode(TXERenderMode)">
\brief：设置图像的渲染（填充）模式
\param：mode - 参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值
\return:无

</member>
        <member name="M:ITXLivePlayer.setMute(System.Boolean)">
\brief：静音接口
\param：mute - 是否静音
\return:无

</member>
        <member name="M:ITXLivePlayer.isPlaying">
\brief：是否正在播放

</member>
        <member name="M:ITXLivePlayer.resume">
\brief：恢复播放

</member>
        <member name="M:ITXLivePlayer.pause">
\brief：暂停播放

</member>
        <member name="M:ITXLivePlayer.stopPlay">
\brief：停止播放

</member>
        <member name="M:ITXLivePlayer.startPlay(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TXEPlayType)">
	* \brief：开始播放，请在 startPlay 之前 setRenderFrame
    * \param：url   - 视频播放 URL
    * \param：type  - 播放类型，参考 TXLiveTypeDef.h 中定义的 TXEPlayType 枚举值
	* \return：无 

</member>
        <member name="M:ITXLivePlayer.closeRenderFrame">
\brief：关闭图像渲染

</member>
        <member name="M:ITXLivePlayer.updateRenderFrame(HWND__*)">
\brief：重设图像渲染窗口
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\return:无

</member>
        <member name="M:ITXLivePlayer.setRenderFrame(HWND__*)">
\brief：设置视频图像渲染
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\return:无

</member>
        <member name="M:ITXLivePlayer.getAudioPlayoutVolume">
\brief: 获取 SDK 采集音量

</member>
        <member name="M:ITXLivePlayer.setAudioPlayoutVolume(System.Int32)">
\brief: 设置 SDK 采集音量。
@param volume 音量大小，取值[0, 65535]，默认值为65535

</member>
        <member name="M:ITXLivePlayer.speakerVolumeIndication">
\brief：查询已选择扬声器的能量值，指示音量的大小
\return：能量值，范围是[0, 100]

</member>
        <member name="M:ITXLivePlayer.setSpeakerVolume(System.UInt32)">
\brief：设置SDK播放的音量，注意设置的不是系统扬声器的音量大小
\param：volume - 设置的音量大小，范围是[0, 65535]

</member>
        <member name="M:ITXLivePlayer.speakerVolume">
\brief：查询SDK播放的音量，注意查询得到不是系统扬声器的音量大小
\return：音量值，范围是[0, 65535]

</member>
        <member name="M:ITXLivePlayer.selectSpeakerDevice(System.UInt32)">
\brief：选择指定的扬声器作为音频播放的设备，不调用该接口时，默认选择索引为0的扬声器
\param：index - 扬声器设备的索引，要求index值小于 speakerDeviceCount 接口的返回值

</member>
        <member name="M:ITXLivePlayer.setCallback(ITXLivePlayerCallback*,System.Void*)">
\brief：设置回调 TXLivePlayer 的回调代理，监听播放事件
\param：callback  - ITXLivePlayerCallback 类型的代理指针
\param：pUserData - 透传用户数据到 ITXLivePusherCallback 的回调函数,一般情况下传 NULL 就可以了
\return 无

</member>
        <member name="M:destroyTXLivePlayer(ITXLivePlayer**)">
\brief 析构ITXLivePlayer对象

</member>
        <member name="M:createTXLivePlayer">
 \brief 用于动态加载dll时，导出TXLivePlayer C++对象。

 \return TXLivePlayer对象指针，注意：delete ITXLivePlayer*会编译错误，需要调用destroyTXLivePlayer释放。

</member>
        <member name="M:ManageLiteAV.TXLivePlayer.setOutputVideoFormat(ManageLiteAV.TXEOutputVideoFormat)">
            <summary>
设置视频编码格式，默认格式是TXE_OUTPUT_VIDEO_WITHOUT_OUTPUT
</summary>
            <param name="format">视频编码格式，参考 TXLiveTypeDef.h 中定义的 TXEOutputVideoFormat 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRenderYMirror(System.Boolean)">
            <summary>
设置渲染的镜像效果
</summary>
            <param name="mirror">true表示画面左右反转，false表示保持原样</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRotation(ManageLiteAV.TXEVideoRotation)">
            <summary>
设置图像的顺时针旋转角度
</summary>
            <param name="rotation">参考 TXLiveTypeDef.h 中定义的 TXEVideoRotation 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRenderMode(ManageLiteAV.TXERenderMode)">
            <summary>
设置图像的渲染（填充）模式
</summary>
            <param name="mode">参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setMute(System.Boolean)">
            <summary>
静音接口
</summary>
            <param name="mute">是否静音</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.isPlaying">
            <summary>
是否正在播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.resume">
            <summary>
恢复播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.pause">
            <summary>
暂停播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.stopPlay">
            <summary>
停止播放
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.startPlay(System.String,ManageLiteAV.TXEPlayType)">
            <summary>
开始播放，请在 startPlay 之前 setRenderFrame
</summary>
            <param name="url">视频播放 URL</param>
            <param name="type">播放类型，参考 TXLiveTypeDef.h 中定义的 TXEPlayType 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.closeRenderFrame">
            <summary>
关闭图像渲染
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.updateRenderFrame(System.IntPtr)">
            <summary>
重设图像渲染区域，当您指定的 HWND 的窗口尺寸发生变化时，可以通过这个函数重新调整视频渲染区域
</summary>
            <param name="hWnd">承载视频画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setRenderFrame(System.IntPtr)">
            <summary>
挂接视频图像渲染
</summary>
            <param name="hWnd">承载视频画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.speakerVolumeIndication">
            <summary>
查询已选择扬声器的能量值，指示音量的大小
</summary>
            <param name="volume">设置的音量大小，范围是[0, 65535]</param>
            <returns>能量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setSpeakerVolume(System.UInt32)">
            <summary>
设置SDK播放的音量，注意设置的不是系统扬声器的音量大小
</summary>
            <param name="volume">设置的音量大小，范围是[0, 65535]</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.speakerVolume">
            <summary>
查询SDK播放的音量，注意查询得到不是系统扬声器的音量大小
</summary>
            <returns>音量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.selectSpeakerDevice(System.UInt32)">
            <summary>
选择指定的扬声器作为音频播放的设备，不调用该接口时，默认选择索引为0的扬声器
</summary>
            <param name="index">扬声器设备的索引，要求index值小于 speakerDeviceCount 接口的返回值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.speakerDevices">
            <summary>
枚举当前可用的扬声器，如果一台Windows同时安装了多个扬声器，那么此函数获取可用的扬声器数量和名称
</summary>
            <returns>当前可用的扬声器列表，查询得到的字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.setListener(ManageLiteAV.ITXLivePlayerListener,System.IntPtr)">
            <summary>
设置回调 TXLivePlayer 的回调代理，监听播放事件、以及获取音视频数据
</summary>
            <param name="listener">TXLivePlayer 类型的接口类</param>
            <param name="pUserData">一般情况下传 NULL 就可以了，透传用户数据到 ITXLivePusherCallback 的回调函数</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePlayer.Dispose">
            <summary>
析构函数，C#代码中要求显示调用Dispose函数，来触发托管C++类析构函数
</summary>
        </member>
        <member name="M:ManageLiteAV.CrashDump.close">
            <summary>
关闭minidump生成功能
</summary>
        </member>
        <member name="M:ManageLiteAV.CrashDump.open">
            <summary>
开启minidump生成功能，发生崩溃时，自动生成minidump转储文件，用于分析崩溃原因
</summary>
        </member>
        <member name="M:ITXLivePlayerCallback.onAudioDecodeCallback(System.Byte*,System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Void*)">
\brief：获取 SDK 要播放的音频数据，如果您需要自己播放声音，只需要返回 true 即可接管声音的播放，建议不要在回调函数做耗时操作
\param：pcm       - 音频裸数据buffer
\param：length    - buffer 的长度，单位是字节
\param：sampleRate- 音频采样率，可预期的值有： 8000、16000、32000、44100、48000
\param：channel   - 声道数：单声道 或者 双声道， SDK 默认是走单声道的
\param：timestamp - 当前这帧音频buffer的时间戳
\param：pUserData - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL

</member>
        <member name="M:ITXLivePlayerCallback.onVideoDecodeCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.Int32,System.Int32,TXEOutputVideoFormat,System.Void*)">
\brief：获取 SDK 要播放的视频数据，如果您需要自己渲染视频画面，只需要返回 true 即可接管画面的渲染，建议不要在回调函数做耗时操作
\param：data   - 视频数据 buffer
\param：length - buffer 的长度，单位是字节，对于i420而言， length = width * height * 3 / 2
\param：width  - 画面的宽度，单位 pixel
\param：height - 画面的高度，单位 pixel
\param：format - 视频格式，参考 TXLiveTypeDef.h 中定义的 TXEOutputVideoFormat 枚举值
\param：pUserData  - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL

</member>
        <member name="M:ITXLivePusherCallback.onAudioCaptureCallback(System.Byte*,System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Void*)">
\brief：获取 SDK 所采集的音频数据
\param：pcm       - SDK采集的音频裸数据buffer
\param：length    - buffer 的长度，单位是字节
\param：sampleRate- 音频采样率，可预期的值有： 8000、16000、32000、44100、48000
\param：channel   - 声道数：单声道 或者 双声道， SDK 默认是走单声道的
\param：timestamp - 当前这帧音频buffer的时间戳
\param：pUserData - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL
\return：无

</member>
        <member name="M:ITXLivePusherCallback.onVideoCaptureCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.Int32,System.Int32,System.Void*)">
\brief：获取 SDK 所采集的视频数据
\param：yuv420 - i420 格式的 YUV 视频数据 buffer
\param：length - buffer 的长度，单位是字节，对于i420而言， length = width * height * 3 / 2
\param：width  - 画面的宽度，单位 pixel
\param：height - 画面的高度，单位 pixel
\param：pUserData  - 您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 NULL
\return：无

</member>
        <member name="M:ITXLivePusher.sendCustomAudioData(trtc.TRTCAudioFrame*)">
 \brief 自定义音频采集接口，startPreview的srcType = TXE_VIDEO_SRC_USER_DATA时通过此接口传入PCM音频格式数据

 \param frame.data        - PCM缓冲
 \param frame.length      - PCM缓冲长度
 \param frame.sampleRate  - 音频采样率，建议48K，
 \param frame.channel     - 音频声道数，目前只支持 1或2声道。
 \param frame.audioFormat - 音频数据格式，目前只支持LiteAVAudioFrameFormatPCM格式。
 \param frame.timestamp   - 音频帧采集的时间戳。
 \note  量化位数，目前值支持16byte格式。

</member>
        <member name="M:ITXLivePusher.sendCustomVideoData(trtc.TRTCVideoFrame*)">
 \brief 自定义视频采集接口，startPreview的srcType = TXE_VIDEO_SRC_USER_DATA时通过此接口传入I420格式的视频数据

 \param frame.data  - 视频缓冲,目前值支持紧凑内存的I420数据
 \param frame.lenth - 视频缓冲长度
 \param frame.width - 视频图像长
 \param frame.width - 视频图像宽
 \param frame.videoFormat - 视频格式，目前只支持LiteAVVideoPixelFormat_I420格式。
 \param frame.timestamp   - 视频帧采集的时间戳。

</member>
        <member name="M:ITXLivePusher.showDebugView(System.Int32)">
 \brief 显示仪表盘（状态统计和事件消息浮层view），方便调试

 \param showType 0: 不显示 1: 显示精简版 2: 显示全量版

</member>
        <member name="M:ITXLivePusher.setNearestIP(System.Boolean)">
\brief：设置是否就近选路
\param：enable - true表示启用，false表示禁用，SDK 默认为true
\return:无

</member>
        <member name="M:ITXLivePusher.setPauseVideo(System.Boolean)">
\brief：设置视频暂停

</member>
        <member name="M:ITXLivePusher.setVideoFPS(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief：设置视频帧率
\param：fps - 视频帧率，默认值为15，重启后生效
\return:无

</member>
        <member name="M:ITXLivePusher.setVideoBitRateMin(System.Int32)">
\brief：配合 setAutoAdjustStrategy 使用，当 AutoAdjust 策略指定为 TXE_AUTO_ADJUST_NONE 时，如下的两个函数调用均视为无效
\param：videoBitrateMin - 允许 SDK 输出的最小视频码率，比如 640x360 分辨率下这个值适合设置为 300kbps
\param：videoBitrateMax - 允许 SDK 输出的最大视频码率, 比如 640x360 分辨率下这个值适合设置为 1000kbps
\return:无

</member>
        <member name="M:ITXLivePusher.setAutoAdjustStrategy(TXEAutoAdjustStrategy)">
\brief：设置流控策略，即是否允许 SDK 根据当前网络情况调整视频码率，以避免网络上传速度不足导致的画面卡顿
\param：strategy - 参考 TXLiveTypeDef.h 中定义的 TXEAutoAdjustStrategy 枚举值
\return:无

</member>
        <member name="M:ITXLivePusher.setVideoBitRate(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief：设置视频码率，注意，不是分辨率越高画面越清晰，是码率越高画面越清晰
\param：bitrate - 视频码率，单位 kbps， 比如 640x360 分辨率需要配合 800kbps 的视频码率
\return:无

</member>
        <member name="M:ITXLivePusher.setOutputYMirror(System.Boolean)">
\brief：设置推流画面的镜像效果
\param：mirror - true表示画面左右反转，false表示保持原样
\return:无

</member>
        <member name="M:ITXLivePusher.setRenderYMirror(System.Boolean)">
\brief：设置预览渲染的镜像效果
\param：mirror - true表示画面左右反转，false表示保持原样
\return:无

</member>
        <member name="M:ITXLivePusher.setBeautyStyle(TXEBeautyStyle,System.Int32,System.Int32)">
\brief：设置美颜和美白效果
\param：beautyStyle    - 参考 TXLiveTypeDef.h 中定义的 TXEBeautyStyle 枚举值
\param：beautyLevel    - 美颜级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显
\param：whitenessLevel - 美白级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显
\return:无

</member>
        <member name="M:ITXLivePusher.setVideoResolution(TXEVideoResolution)">
	* \brief：设置视频分辨率
    * \param：resolution  - 视频分辨率，参考 TXLiveTypeDef.h 中定义的 TXEVideoResolution 枚举值
	* \return:无

</member>
        <member name="M:ITXLivePusher.setVideoQualityParamPreset(TXEVideoQualityParamPreset,TXEVideoRatio)">
\brief：推流的画面质量预设选项
\param：paramType  - 预设类型，参考 TXLiveTypeDef.h 中定义的 TXEVideoQualityParamPreset 枚举值
\param：ratio  - 预设画面比例，参考 TXLiveTypeDef.h 中定义的 TXEVideoResolution 枚举值
\return:无
\startPush前生效。

</member>
        <member name="M:ITXLivePusher.setRotation(TXEVideoRotationType)">
\brief：设置图像的顺时针旋转角度
\param：rotation - 参考 TXLiveTypeDef.h 中定义的 TXEVideoRotationType 枚举值
\return:无

</member>
        <member name="M:ITXLivePusher.setRenderMode(TXERenderMode)">
\brief：设置图像的渲染（填充）模式
\param：mode - 参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值
\return:无

</member>
        <member name="M:ITXLivePusher.setMute(System.Boolean)">
\brief：静音接口
\param：mute - 是否静音
\return:无

</member>
        <member name="M:ITXLivePusher.switchCamera(System.Int32)">
\brief：切换摄像头，支持在推流中动态切换
\param：cameraIndex : 摄像头需要，取值返回：  0 ~ (摄像头个数 - 1)
\return:无

</member>
        <member name="M:ITXLivePusher.stopPush">
	* \brief：停止推流，注意推流 url 有排他性，也就是一个推流 Url 同时只能有一个推流端向上推流
	* \param：无
	* \return:无
    * \attention: 若通过 startPreview 接口开启了预览，在调用这个接口前，请先调用 stopPreview 接口

</member>
        <member name="M:ITXLivePusher.startPush(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\brief：启动推流 (在 startPush 之前需要先 startPreview 启动摄像头预览，否则推送出去的数据流里只有音频)
\param：url - 一个合法的推流地址，腾讯云的推流 URL 都要求带有 txSecret 和 txTime 防盗链签名，如果您发现推流推不上去，请检查这两个签名是否合法。
\return：成功 or 失败，内存分配、资源申请失败等原因可能会导致返回失败

</member>
        <member name="M:ITXLivePusher.captureVideoSnapShot(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
\brief：推流的图像截图到本地
\param：filePath - 存储路径
\param: length - 路径字符长度
\return：0成功，非0失败：-1:失败，-2路径非法，-3文件存在，-4未推流

</member>
        <member name="M:ITXLivePusher.selectScreenCaptureTarget(trtc.TRTCScreenCaptureSourceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trtc.TRTCScreenCaptureProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief  【屏幕共享】选择要分享的目标窗口或目标区域，支持如下四种情况：

 &gt;&gt;&gt; 共享整个屏幕 : sourceInfoList 中type为Screen的source，captureRect 设为 { 0, 0, 0, 0 }
 &gt;&gt;&gt; 共享指定区域 : sourceInfoList 中type为Screen的source，captureRect 设为非 NULL，比如 { 100, 100, 300, 300 }
 &gt;&gt;&gt; 共享整个窗口 : sourceInfoList 中type为Window的source，captureRect 设为 { 0, 0, 0, 0 }
 &gt;&gt;&gt; 共享窗口区域 : sourceInfoList 中type为Window的source，captureRect 设为非 NULL，比如 { 100, 100, 300, 300 }

 \note: 您可以在屏幕分享的过程中掉用该函数来切换目标窗口或者调整目标区域

 \param source             - 指定分享源
 \param captureRect        - 指定捕获的区域
 \param captureMouse       - 指定是否捕获鼠标指针
 \param highlightWindow    - 指定是否高亮正在共享的窗口以及当捕获图像被遮挡时高亮遮挡窗口提示用户移走遮挡


</member>
        <member name="M:ITXLivePusher.getScreenCaptureSources(tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief  【屏幕共享】枚举可共享的窗口列表，

 \param thumbSize - 指定要获取的窗口缩略图大小，缩略图可用于绘制在窗口选择界面上
 \param iconSize  - 指定要获取的窗口图标大小

 \return 列表通过返回值 ILiteAVScreenCaptureSourceList 返回
 \note   如果delete ILiteAVScreenCaptureSourceList*指针会编译错误，SDK维护ILiteAVScreenCaptureSourceList对象的生命周期。

</member>
        <member name="M:ITXLivePusher.stopPreview">
\brief：关闭视频源预览
\return 无

</member>
        <member name="M:ITXLivePusher.updatePreview(HWND__*)">
\brief：重设摄像头预览窗口
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\return 无

</member>
        <member name="M:ITXLivePusher.startPreview(TXEVideoCaptureSrcType,HWND__*)">
\brief：启动视频源预览
\param：srcType  - 参考 TXLiveTypeDef.h 中定义的 TXEVideoCaptureSrcType 枚举值
\param：rendHwnd - 承载预览画面的 HWND，目前 SDK 内部会向 rendHwnd (整个窗口)上绘制图像的
\param：dataFormat - srcType = TXE_VIDEO_SRC_USER_DATA时生效，指定传入的参数
\return: 成功 or 失败

</member>
        <member name="M:ITXLivePusher.stopAudioCapture">
\brief：关闭音频采集

</member>
        <member name="M:ITXLivePusher.startAudioCapture(TXEAudioCaptureSrcType)">
\brief：启动音频采集
\param：srcType - 音频数据源类型

</member>
        <member name="M:ITXLivePusher.setAudioChannels(TXEAudioChannels)">
\brief：设置音频前处理开关
\param：channels - 参考 TXLiveTypeDef.h 中定义的 TXEAudioChannels 枚举值，SDK 内部默认选择 TXE_AUDIO_CHANNELS_1 单声道

</member>
        <member name="M:ITXLivePusher.enableAudioPreprocess(TXEAudioPreprocessType,System.Boolean)">
\brief：设置音频前处理开关
\param：preprocessType - 参考 TXLiveTypeDef.h 中定义的 TXEAudioPreprocessType。
\note : 默认开启AEC、AGC、NS，如需关闭回声消除预处理enableAudioPreprocess(TXE_AUDIO_PREPROCESS_AEC, false)。

</member>
        <member name="M:ITXLivePusher.setSystemVoiceInputVolume(System.Int32)">
@brief 设置系统声音采集的音量。
@param [in] value 设置目标音量,取值范围[0,100].

</member>
        <member name="M:ITXLivePusher.closeSystemVoiceInput">
@brief 关闭系统声音采集。

</member>
        <member name="M:ITXLivePusher.openSystemVoiceInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 打开系统声音采集。
@details 采集系统声音。
@param [in] szPlayerPath 播放器地址;如果用户此参数填空或不填，表示采集系统中的所有声音;
		    如果填入exe程序(如:酷狗、QQ音乐)所在路径,将会启动此程序，并只采集此程序的声音;

</member>
        <member name="M:ITXLivePusher.closeMicTest">
\brief：关闭麦克风测试

</member>
        <member name="M:ITXLivePusher.openMicTest">
\brief：开启麦克风测试

</member>
        <member name="M:ITXLivePusher.getAudioCaptureVolume">
\brief： 获取 SDK 采集音量

</member>
        <member name="M:ITXLivePusher.setAudioCaptureVolume(System.Int32)">
 \brief：设置 SDK 采集音量。

 \return volume 音量大小，取值[0, 65535]，默认值为65535

</member>
        <member name="M:ITXLivePusher.micVolumeIndication">
\brief：查询已选择麦克风的能量值，指示音量的大小
\return：能量值，范围是[0, 100]

</member>
        <member name="M:ITXLivePusher.setMicVolume(System.UInt32)">
\brief：设置已选择麦克风的音量
\param：volume - 设置的音量大小，范围是[0, 65535]

</member>
        <member name="M:ITXLivePusher.micVolume">
\brief：查询已选择麦克风的音量
\return：音量值，范围是[0, 65535]

</member>
        <member name="M:ITXLivePusher.selectMicDevice(System.UInt32)">
\brief：选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风
\param：index - 麦克风设备的索引，要求index值小于 micDeviceCount 接口的返回值

</member>
        <member name="M:ITXLivePusher.setCallback(ITXLivePusherCallback*,System.Void*)">
\brief：设置回调 TXLivePusher 的回调代理，监听推流事件
\param：callback  - ITXLivePusherCallback 类型的代理指针
\param：pUserData - 一般情况下传 NULL 就可以了，透传用户数据到 ITXLivePusherCallback 的回调函数
\return 无

</member>
        <member name="M:destroyTXLivePusher(ITXLivePusher**)">
\brief 析构ITXLivePusher对象

</member>
        <member name="M:createTXLivePusher">
 \brief 用于动态加载dll时，导出ITXLivePusher C++对象。

 \return TXLivePusher对象指针，注意：delete ITXLivePusher*会编译错误，需要调用destroyTXLivePusher释放。

</member>
        <member name="T:TXEPlayType">
\brief：设置播放类型

</member>
        <member name="T:TXEBeautyStyle">
\brief：设置美颜风格

</member>
        <member name="T:TXEOutputVideoFormat">
\brief：设置输出的视频格式

</member>
        <member name="T:TXEVideoQualityParamPreset">
  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  推流的画面质量预设选项  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

  - 1.2.0 版本开始引入推流画质接口 setVideoQualityParamPreset 用于自动选择最佳的推流画质效果。
  - TXLivePush::setVideoQualityParamPreset 内部通过预先配置不同的视频参数调整到对应的质量
  - 目前支持的几种画质选项如下：

  （1）标清 - 采用 640 * 360 级别分辨率，码率会在 400kbps - 800kbps 之间自适应，如果主播的网络条件不理想，
              直播的画质会偏模糊，但总体卡顿率不会太高。
              Android平台下这一档我们会选择采用软编码，软编码虽然更加耗电，但在运动画面的表现要优于硬编码。

  （2）高清 - 采用 960 * 540 级别分辨率，码率会锁定在 1200kbps，如果主播的网络条件不理想，直播画质不会有变化，
              但这段时间内会出现频繁的卡顿和跳帧。 两个平台下，这一档我们都会采用硬编码。

  （3）超清 - 采用 1280 * 720 级别分辨率，码率会锁定在 1500kbps，对主播的上行带宽要求比较高，适合观看端是大屏的业务场景。

  （4）大主播 - 顾名思义，连麦中大主播使用，因为是观众的主画面，追求清晰一些的效果，所以分辨率会优先选择 960 * 540。

  （5）小主播 - 顾名思义，连麦中小主播使用，因为是小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

  （6）实时音视频通话 - 时延低，小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

  （7）静态画质场景   - 画面变动小，能保证非常低的码率下，视频相对清晰，如截屏正在播放的ppt，1080p，400kb左右码率。
 【特别说明】
  1. 使用 setVideoQualityParamPreset 之后，依然可以使用setVideoBitRate、setVideoFPS、setAutoAdjustStrategy等设置自定义画质，以最后一次的设置为准。

\brief：SDK推流画质预设选项

</member>
        <member name="T:TXEAutoAdjustStrategy">
\brief：目前SDK支持的流控策略

</member>
        <member name="T:TXEVideoRotationType">
\brief：目前SDK支持的画面顺时针旋转角度

</member>
        <member name="T:TXERenderMode">
\brief：目前SDK支持的画面渲染模式，两种模式均会严格保持画面的原始宽高比

</member>
        <member name="T:TXEVideoResolution">
\brief：推流视频分辨率

</member>
        <member name="T:TXEVideoRatio">
\brief：推流视频比例

</member>
        <member name="T:TXEVideoCaptureSrcType">
\brief：视频数据源类型

</member>
        <member name="T:TXEAudioPreprocessType">
\brief：音频前处理 TXEAudioPreprocessType

</member>
        <member name="T:TXEAudioCaptureSrcType">
\brief：音频数据源类型

</member>
        <member name="T:TXEAudioChannels">
\brief：音频声道数

</member>
        <member name="M:ManageLiteAV.TXLivePusher.showDebugView(System.Int32)">
            <summary>
显示仪表盘（状态统计和事件消息浮层view），方便调试
<param name="showType">0: 不显示 1: 显示精简版 2: 显示全量版</param></summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setNearestIP(System.Boolean)">
            <summary>
设置是否就近选路
<param name="enable">true表示启用，false表示禁用，SDK 默认为true</param></summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setPauseVideo(System.Boolean)">
            <summary>
设置视频暂停
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoFPS(System.UInt32)">
            <summary>
设置视频帧率
</summary>
            <param name="fps">视频帧率，默认值为15，重启后生效</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoBitRateMax(System.Int32)">
            <summary>
配合 setAutoAdjustStrategy 使用，当 AutoAdjust 策略指定为 TXE_AUTO_ADJUST_NONE 时，该函数调用均视为无效
</summary>
            <param name="videoBitrateMax">允许 SDK 输出的最小视频码率, 比如 640x360 分辨率下这个值适合设置为 1000kbps</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoBitRateMin(System.Int32)">
            <summary>
配合 setAutoAdjustStrategy 使用，当 AutoAdjust 策略指定为 TXE_AUTO_ADJUST_NONE 时，该函数调用均视为无效
</summary>
            <param name="videoBitrateMin">允许 SDK 输出的最小视频码率，比如 640x360 分辨率下这个值适合设置为 300kbps</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setAutoAdjustStrategy(ManageLiteAV.TXEAutoAdjustStrategy)">
            <summary>
设置流控策略，即是否允许 SDK 根据当前网络情况调整视频码率，以避免网络上传速度不足导致的画面卡顿
</summary>
            <param name="strategy">参考 TXLiveTypeDef.h 中定义的 TXEAutoAdjustStrategy 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoBitRate(System.UInt32)">
            <summary>
设置视频码率，注意，不是分辨率越高画面越清晰，是码率越高画面越清晰
</summary>
            <param name="bitrate">视频码率，单位 kbps， 比如 640x360 分辨率需要配合 800kbps 的视频码率</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setOutputYMirror(System.Boolean)">
            <summary>
设置推流画面的镜像效果
</summary>
            <param name="mirror">true表示画面左右反转，false表示保持原样</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setRenderYMirror(System.Boolean)">
            <summary>
设置预览渲染的镜像效果
</summary>
            <param name="mirror">true表示画面左右反转，false表示保持原样</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setBeautyStyle(ManageLiteAV.TXEBeautyStyle,System.Int32,System.Int32)">
            <summary>
设置美颜和美白效果
</summary>
            <param name="beautyStyle">参考 TXLiveTypeDef.h 中定义的 TXEBeautyStyle 枚举值</param>
            <param name="beautyLevel">美颜级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显</param>
            <param name="whitenessLevel">美白级别取值范围 1 ~ 9； 0 表示关闭，1 ~ 9值越大，效果越明显</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoResolution(ManageLiteAV.TXEVideoResolution)">
            <summary>
设置视频分辨率
</summary>
            <param name="resolution">视频分辨率，参考 TXLiveTypeDef.h 中定义的 TXEVideoResolution 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setVideoQualityParamPreset(ManageLiteAV.TXEVideoQualityParamPreset)">
            <summary>
推流的画面质量预设选项
</summary>
            <param name="paramType">预设类型，参考 TXLiveTypeDef.h 中定义的 TXEVideoQualityParamPreset 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setRotation(ManageLiteAV.TXEVideoRotation)">
            <summary>
设置图像的顺时针旋转角度
</summary>
            <param name="rotation">参考 TXLiveTypeDef.h 中定义的 TXEVideoRotation 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setRenderMode(ManageLiteAV.TXERenderMode)">
            <summary>
设置图像的渲染（填充）模式
</summary>
            <param name="mode">参考 TXLiveTypeDef.h 中定义的 TXERenderMode 枚举值</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setMute(System.Boolean)">
            <summary>
静音接口
</summary>
            <param name="mute">是否静音</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.switchCamera(System.Int32)">
            <summary>
切换摄像头，支持在推流中动态切换
</summary>
            <param name="cameraIndex">摄像头需要，取值返回：  0 ~ (摄像头个数 - 1)</param>
            <remarks>
指定要开启哪个摄像头的预览，如果只有一个摄像头，则设置为 0 ，否则，需要先用 enumCameras 获取 cameraIndex
cameraIndex ==  0   表示打开当前可用的第一个摄像头
cameraIndex == 1   表示打开当前可用的第二个摄像头
... ...
cameraIndex == -1   表示打开当前可用的全部摄像头，但是预览的是第一个，通过 switchCamera 来切换摄像头
Windows 下开启一个 USB 摄像头需要很长的电路和驱动启动时间（一般需要 1 - 3 秒），所以，如果您要实现较好的切换效果
推荐的做法是：switchCamera 时指定 cameraIndex 为 - 1 来打开全部摄像头 ，后续用 switchCamera 实现瞬间切换摄像头
</remarks>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.stopPush">
            <summary>
停止推流，注意推流 url 有排他性，也就是一个推流 Url 同时只能有一个推流端向上推流
若通过 startPreview 接口开启了预览，在调用这个接口前，请先调用 stopPreview 接口
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.startPush(System.String)">
            <summary>
启动推流 (在 startPush 之前需要先 startPreview 启动摄像头预览，否则推送出去的数据流里只有音频)
</summary>
            <param name="url">合法的推流地址，腾讯云的推流 URL 都要求带有 txSecret 和 txTime 防盗链签名，如果您发现推流推不上去，请检查这两个签名是否合法</param>
            <returns>成功 or 失败，内存分配、资源申请失败等原因可能会导致返回失败</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.captureVideoSnapShot(System.String)">
            <summary>
推流的图像截图到本地
</summary>
            <param name="filePath">存储路径</param>
            <returns>0成功，非0失败：-1:失败，-2路径非法，-3文件存在，-4未推流</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setScreenCaptureParam(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
屏幕区域捕抓参数设置接口，startPreview(srcType = TXE_VIDEO_SRC_SDK_SCREEN..)前调用，默认捕抓整个主屏幕
</summary>
            <param name="captureHwnd">
指定捕抓窗口，如果captureHwnd不为NULL时，捕抓整个captureHwnd窗口大小,此时captureRect设置会失效，
如果captureHwnd为NULL时，则captureRect有效，捕抓主屏幕指定的区域：captureRect
</param>
            <param name="x">被捕抓窗口区域的坐标x，以左上角为准</param>
            <param name="y">被捕抓窗口区域的坐标y，以左上角为准</param>
            <param name="width">被捕抓窗口区域的宽度</param>
            <param name="height">被捕抓窗口区域的高度</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enumCaptureWindow">
            <summary>
枚举当前的可以捕抓的窗口，如果桌面同时存在多个窗口，那么此函数获取可采集的窗口句柄
</summary>
            <returns>当前可捕抓的窗口列表，每一个都分别表示窗口句柄和窗口名称的键值对</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.stopPreview">
            <summary>
关闭摄像头预览，stopPush 之前调用此函数并不会停止推流，会导致 SDK 只推送音频数据
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.updatePreview(System.IntPtr)">
            <summary>
重设摄像头预览区域，当您指定的 HWND 的窗口尺寸发生变化时，可以通过这个函数重新调整视频渲染区域
</summary>
            <param name="rendHwnd">承载预览画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.startPreview(ManageLiteAV.TXEVideoCaptureSrcType,System.IntPtr)">
            <summary>
启动视频源预览
</summary>
            <param name="srcType">参考 TXLiveTypeDef.h 中定义的 TXEVideoCaptureSrcType 枚举值</param>
            <param name="rendHwnd">承载预览画面的 HWND，rendHwnd = null时无需预览视频</param>
            <param name="dataFormat">srcType指定为TXE_VIDEO_SRC_USER_DATA时生效，指定传入视频数据的格式</param>
            <returns>成功 or 失败，摄像头被占用可能会导致 camera 打开失败</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.stopAudioCapture">
            <summary>
关闭音频采集
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.startAudioCapture(ManageLiteAV.TXEAudioCaptureSrcType)">
            <summary>
启动音频采集，SDK内部采用48K采样率，单声道，16位宽，实现很低延迟的实时音频通话的效果
</summary>
            <param name="srcType">音频数据源类型</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setAudioChannels(ManageLiteAV.TXEAudioChannels)">
            <summary>
设置音频声道数
</summary>
            <param name="channels">参考 TXLiveTypeDef.h 中定义的 TXEAudioChannels 枚举值，SDK 内部默认选择 TXE_AUDIO_CHANNELS_1 单声道</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enableAudioPreprocess(ManageLiteAV.TXEAudioPreprocessType,System.Boolean)">
            <summary>
设置系统声音前处理模式
默认开启AEC、AGC、NS，如需要关闭回声消除enableAudioPreprocess(TXE_AUDIO_PRETREATMENT_AEC, false);
</summary>
            <param name="preprocessType">参考 TXLiveTypeDef.h 中定义的 TXEAudioPreprocessType</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setSystemVoiceInputVolume(System.Int32)">
            <summary>
设置系统声音采集的音量（暂时不支持64位）
</summary>
            <param name="value">设置目标音量,取值范围[0,100]</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.closeSystemVoiceInput">
            <summary>
关闭系统声音采集（暂时不支持64位）
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.openSystemVoiceInput(System.String)">
            <summary>
打开系统声音采集（暂时不支持64位）
</summary>
            <param name="szPlayerPath">播放器地址;如果用户此参数填空或不填，表示采集系统中的所有声音;
如果填入exe程序(如:酷狗、QQ音乐)所在路径, 将会启动此程序，并只采集此程序的声音; </param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.closeMicTest">
            <summary>
关闭麦克风测试
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.openMicTest">
            <summary>
打开麦克风测试
</summary>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.micVolumeIndication">
            <summary>
查询已选择麦克风的能量值，指示音量的大小
</summary>
            <returns>能量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setMicVolume(System.UInt32)">
            <summary>
设置已选择麦克风的音量
</summary>
            <param name="volume">设置的音量大小，范围是[0, 65535]</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.micVolume">
            <summary>
查询已选择麦克风的音量
</summary>
            <returns>音量值，范围是[0, 65535]</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.selectMicDevice(System.UInt32)">
            <summary>
选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风
</summary>
            <param name="index">麦克风设备的索引，要求index值小于 micDevices 接口的返回值的数组大小</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.micDevices">
            <summary>
枚举当前可用的麦克风，如果一台Windows同时安装了多个麦克风，那么此函数获取可用的麦克风数量和名称
</summary>
            <returns>当前可用的麦克风列表，查询得到的字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.enumCameras">
            <summary>
枚举当前可用的摄像头，如果一台Windows同时安装了多个摄像头，那么此函数获取可用的摄像头数量和名称
</summary>
            <returns>当前可用的摄像头列表</returns>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.setListener(ManageLiteAV.ITXLivePusherListener,System.IntPtr)">
            <summary>
设置回调 TXLivePusher 的回调代理，监听推流事件、以及获取音视频数据
</summary>
            <param name="listener">ITXLivePusherListener 类型的接口类</param>
            <param name="pUserData">一般情况下传 NULL 就可以了，透传用户数据到 ITXLivePusherCallback 的回调函数</param>
        </member>
        <member name="M:ManageLiteAV.TXLivePusher.Dispose">
            <summary>
析构函数，C#代码中要求显示调用Dispose函数，来触发托管C++类析构函数
</summary>
        </member>
        <member name="M:ManageLiteAV.ITXLivePusherListener.onEventCallback(System.Int32,System.Collections.Generic.Dictionary`2{System.String,System.String},System.IntPtr)">
            <summary>
TXLivePusher的推流事件通知
</summary>
            <param name="eventId">事件ID, 见 TXLiveSDKEventDef.h 中的事件定义 - PushEvent</param>
            <param name="paramsDic">事件详情是一个 key-value 字典</param>
            <param name="pUserData">您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 0</param>
        </member>
        <member name="M:ManageLiteAV.ITXLivePlayerListener.onEventCallback(System.Int32,System.Collections.Generic.Dictionary`2{System.String,System.String},System.IntPtr)">
            <summary>
TXCSharpLivePlayer的播放事件通知
</summary>
            <param name="eventId">事件ID, 见 TXLiveSDKEventDef.h 中的事件定义 - PlayEvent</param>
            <param name="paramsDic">事件详情是一个 key-value 字典</param>
            <param name="pUserData">您在调用 setCallback 时所设置的透传数据，如果您没有设置，该参数始终为 0</param>
        </member>
        <member name="T:ManageLiteAV.PlayEvent">
            <summary>
播放事件列表
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_SERVER_DISCONNECT">
            <summary>
RTMP服务器主动断开
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_SHAKE_FAIL">
            <summary>
RTMP服务器握手失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_SEVER_CONN_FAIL">
            <summary>
RTMP服务器连接失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_DNS_FAIL">
            <summary>
RTMP -DNS解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_FIRST_IDR_HW_DECODE_FAIL">
            <summary>
当前流硬解第一个I帧失败，SDK自动切软解
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_VIDEO_DISCONTINUITY">
            <summary>
当前视频帧不连续，可能丢帧
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_HW_ACCELERATION_FAIL">
            <summary>
硬解启动失败，采用软解
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_VIDEO_PLAY_LAG">
            <summary>
当前视频播放出现卡顿（用户直观感受）
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_RECV_DATA_LAG">
            <summary>
网络来包不稳：可能是下行带宽不足，或由于主播端出流不均匀
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_RECONNECT">
            <summary>
网络断连, 已启动自动重连 (自动重连连续失败超过三次会放弃)
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_AUDIO_DECODE_FAIL">
            <summary>
当前音频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_WARNING_VIDEO_DECODE_FAIL">
            <summary>
当前视频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_ERR_GET_RTMP_ACC_URL_FAIL">
            <summary>
获取加速拉流地址失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_ERR_NET_DISCONNECT">
            <summary>
网络断连,且经多次重连抢救无效,可以放弃治疗,更多重试请自行重启播放
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_CHANGE_RESOLUTION">
            <summary>
视频分辨率改变
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_START_VIDEO_DECODER">
            <summary>
解码器启动
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_LOADING">
            <summary>
视频播放loading
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_END">
            <summary>
视频播放结束
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_PROGRESS">
            <summary>
视频播放进度
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_PLAY_BEGIN">
            <summary>
视频播放开始
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_RCV_FIRST_I_FRAME">
            <summary>
渲染首个视频数据包(IDR)
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_RTMP_STREAM_BEGIN">
            <summary>
已经连接服务器，开始拉流
</summary>
        </member>
        <member name="F:ManageLiteAV.PlayEvent.PLAY_EVT_CONNECT_SUCC">
            <summary>
已经连接服务器
</summary>
        </member>
        <member name="T:ManageLiteAV.PushEvent">
            <summary>
推流事件列表
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SERVER_NO_DATA">
            <summary>
超过30s没有数据发送，主动断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SERVER_DISCONNECT">
            <summary>
RTMP服务器主动断开，请检查推流地址的合法性或防盗链有效期
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SHAKE_FAIL">
            <summary>
RTMP服务器握手失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_SEVER_CONN_FAIL">
            <summary>
RTMP服务器连接失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_DNS_FAIL">
            <summary>
RTMP -DNS解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_VIDEO_ENCODE_BITRATE_OVERFLOW">
            <summary>
视频编码码率异常，警告
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_BEAUTYSURFACE_VIEW_INIT_FAIL">
            <summary>
视频编码码率异常，警告
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_VIDEO_ENCODE_FAIL">
            <summary>
视频编码失败,非致命错,内部会重启编码器
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_HW_ACCELERATION_FAIL">
            <summary>
硬编码启动失败，采用软编码
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_RECONNECT">
            <summary>
网络断连, 已启动自动重连 (自动重连连续失败超过三次会放弃)
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_WARNING_NET_BUSY">
            <summary>
网络状况不佳：上行带宽太小，上传数据受阻
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_CAMERA_OCCUPY">
            <summary>
摄像头正在被占用中，可尝试打开其他摄像头（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_NET_DISCONNECT">
            <summary>
网络断连,且经多次重连抢救无效,可以放弃治疗,更多重试请自行重启推流
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_UNSUPPORTED_SAMPLERATE">
            <summary>
不支持的音频采样率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_UNSUPPORTED_RESOLUTION">
            <summary>
不支持的视频分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_AUDIO_ENCODE_FAIL">
            <summary>
音频编码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_VIDEO_ENCODE_FAIL">
            <summary>
视频编码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_OPEN_MIC_FAIL">
            <summary>
打开麦克风失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_ERR_OPEN_CAMERA_FAIL">
            <summary>
打开摄像头失败
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CAMERA_CLOSED">
            <summary>
关闭摄像头完成（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CAMERA_AVAILABLE">
            <summary>
摄像头设备重新可用（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CAMERA_REMOVED">
            <summary>
摄像头设备已被移出（PC版SDK专用）
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_START_VIDEO_ENCODER">
            <summary>
编码器启动
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_FIRST_FRAME_AVAILABLE">
            <summary>
首帧画面采集完成
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CHANGE_BITRATE">
            <summary>
推流动态调整码率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CHANGE_RESOLUTION">
            <summary>
推流动态调整分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_OPEN_CAMERA_SUCC">
            <summary>
打开摄像头成功
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_PUSH_BEGIN">
            <summary>
已经与服务器握手完毕,开始推流
</summary>
        </member>
        <member name="F:ManageLiteAV.PushEvent.PUSH_EVT_CONNECT_SUCC">
            <summary>
已经连接推流服务器
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CODEC_DROP_CNT">
            <summary>
编解码队列DROPCNT
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CODEC_CACHE">
            <summary>
编解码缓冲大小
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CACHE_SIZE">
            <summary>
缓冲区大小，缓冲区越大，说明当前上行带宽不足以消费掉已经生产的视频数据
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_NET_JITTER">
            <summary>
网络抖动情况，抖动越大，网络越不稳定
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_NET_SPEED">
            <summary>
当前的发送速度
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_VIDEO_GOP">
            <summary>
当前视频I帧间隔 ，也就是视频编码器每个I帧之间的间隔，单位S
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_VIDEO_FPS">
            <summary>
当前视频帧率，也就是视频编码器每条生产了多少帧画面
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_AUDIO_BITRATE">
            <summary>
当前音频编码器输出的比特率，也就是编码器每秒生产了多少音频数据，单位 KBPS
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_VIDEO_BITRATE">
            <summary>
当前视频编码器输出的比特率，也就是编码器每秒生产了多少视频数据，单位 KBPS
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CPU_USAGE_D">
            <summary>
设备总CPU占用
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.NET_STATUS_CPU_USAGE">
            <summary>
cpu使用率
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.TXE_STATUS_DOWNLOAD_EVENT">
            <summary>
拉流相关数据
</summary>
        </member>
        <member name="F:ManageLiteAV.Common.TXE_STATUS_UPLOAD_EVENT">
            <summary>
推流相关数据
</summary>
        </member>
        <member name="T:ManageLiteAV.Common">
            <summary>
回调状态定义 ,目前提供视频速度、音频速度、帧率、视频缓冲、音频缓冲、视频大小、服务器地址信息
状态键名定义
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEPlayType">
            <summary>
设置播放类型
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEPlayType.PLAY_TYPE_LIVE_RTMP_ACC">
            <summary>
RTMP直播加速播放
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEPlayType.PLAY_TYPE_LIVE_RTMP">
            <summary>
RTMP直播
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEBeautyStyle">
            <summary>
设置美颜风格
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEBeautyStyle.TXE_BEAUTY_STYLE_BLUR">
            <summary>
朦胧
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEBeautyStyle.TXE_BEAUTY_STYLE_NATURE">
            <summary>
自然
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEBeautyStyle.TXE_BEAUTY_STYLE_SMOOTH">
            <summary>
光滑
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEOutputVideoFormat">
            <summary>
设置输出的视频格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEOutputVideoFormat.TXE_OUTPUT_VIDEO_FORMAT_BGRA">
            <summary>
RBGA格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEOutputVideoFormat.TXE_OUTPUT_VIDEO_FORMAT_YUV420">
            <summary>
yuv420格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEOutputVideoFormat.TXE_OUTPUT_VIDEO_WITHOUT_OUTPUT">
            <summary>
不输出数据
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoQualityParamPreset">
            <summary>
推流的画面质量预设选项
- 1.2.0 版本开始引入推流画质接口 setVideoQualityParamPreset 用于傻瓜化的选择推流画质效果。
- TXLivePush::setVideoQualityParamPreset 内部通过预先配置不同的视频参数调整到对应的质量
- 目前支持的几种画质选项如下：

（1）标清 - 采用 640 * 360 级别分辨率，码率会在 400kbps - 800kbps 之间自适应，如果主播的网络条件不理想，
     直播的画质会偏模糊，但总体卡顿率不会太高。
     Android平台下这一档我们会选择采用软编码，软编码虽然更加耗电，但在运动画面的表现要优于硬编码。

（2）高清 - 采用 960 * 540 级别分辨率，码率会锁定在 1200kbps，如果主播的网络条件不理想，直播画质不会有变化，
     但这段时间内会出现频繁的卡顿和跳帧。 两个平台下，这一档我们都会采用硬编码。

（3）超清 - 采用 1280 * 720 级别分辨率，码率会锁定在 1500kbps，对主播的上行带宽要求比较高，适合观看端是大屏的业务场景。

（4）大主播 - 顾名思义，连麦中大主播使用，因为是观众的主画面，追求清晰一些的效果，所以分辨率会优先选择 960 * 540。

（5）小主播 - 顾名思义，连麦中小主播使用，因为是小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

（6）实时音视频通话 - 时延低，小画面，画面追求流畅，分辨率采用 480 * 320， 码率 350kbps 固定。

（7）静态画质场景   - 画面变动小，能保证非常低的码率下，视频相对清晰，如截屏正在播放的ppt，1080p，400kb左右码率。
</summary>
            <remarks>
使用 setVideoQualityParamPreset 之后，依然可以使用setVideoBitRate、setVideoFPS、setAutoAdjustStrategy等设置自定义画质，以最后一次的设置为准。
</remarks>
        </member>
        <member name="T:ManageLiteAV.TXEAutoAdjustStrategy">
            <summary>
目前SDK支持的流控策略
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_REALTIME_VIDEOCHAT_STRATEGY">
            <summary>
适用于实时音视频通话的流控策略，也就是 VIDEO_QUALITY_REALTIME_VIDEOCHAT 所使用流控策略，该策略敏感度比较高，网络稍有风吹草动就会进行自适应调整
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_LIVEPUSH_RESOLUTION_STRATEGY">
            <summary>
适用于普通直播推流的流控策略，是对 LIVEPUSH_STRATEGY 的升级版本，差别是该模式下 SDK 会根据当前码率自动调整出适合的分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_LIVEPUSH_STRATEGY">
            <summary>
适用于普通直播推流的流控策略，该策略敏感度比较低，会缓慢适应带宽变化，有利于在带宽波动时保持画面的清晰度
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEAutoAdjustStrategy.TXE_AUTO_ADJUST_NONE">
            <summary>
无流控，恒定使用 setVideoBitRate 指定的视频码率
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoRotation">
            <summary>
画面顺时针旋转角度
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_270">
            <summary>
顺时针旋转270度，最终图像的宽度和高度互换
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_180">
            <summary>
顺时针旋转180度，最终图像颠倒
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_90">
            <summary>
顺时针旋转90度，最终图像的宽度和高度互换
</summary>
        </member>
        <member name="F:ManageLiteAV.TXEVideoRotation.TXE_VIDEO_ROTATION_NONE">
            <summary>
保持原图像的角度
</summary>
        </member>
        <member name="T:ManageLiteAV.TXERenderMode">
            <summary>
目前SDK支持的画面渲染模式，两种模式均会严格保持画面的原始宽高比
</summary>
        </member>
        <member name="F:ManageLiteAV.TXERenderMode.TXE_RENDER_MODE_FILLSCREEN">
            <summary>
填充，此模式下画面无黑边，但是会裁剪掉一部分超出渲染区域的部分，裁剪模式为居中裁剪
</summary>
        </member>
        <member name="F:ManageLiteAV.TXERenderMode.TXE_RENDER_MODE_ADAPT">
            <summary>
适应，此模式下会显示整个画面的全部内容，但可能有黑边的存在
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoResolution">
            <summary>
推流视频分辨率，普屏 4:3和宽屏16:9两种分类
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEVideoCaptureSrcType">
            <summary>
视频数据源类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEAudioPreprocessType">
            <summary>
音频前处理选项
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEAudioCaptureSrcType">
            <summary>
音频数据源类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TXEAudioChannels">
            <summary>
音频声道数
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.Finalize">
@}
</member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopSpeakerDeviceTest">
            <summary>
停止扬声器测试
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::stopSpeakerDeviceTest 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startSpeakerDeviceTest(System.String)">
            <summary>
开启扬声器测试
<para>回调接口 onTestSpeakerVolume 获取测试数据</para><para>该方法播放指定的音频文件测试播放设备是否能正常工作。如果能听到声音，说明播放设备能正常工作。</para></summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::startSpeakerDeviceTest 接口</remarks>
            <param name="testAudioFilePath">音频文件的绝对路径，路径字符串使用 UTF-8
编码格式，支持文件格式：WAV、MP3</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopMicDeviceTest">
            <summary>
停止麦克风测试
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::stopMicDeviceTest 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startMicDeviceTest(System.UInt32)">
            <summary>
开启麦克风测试
<para>回调接口 onTestMicVolume 获取测试数据</para><para>该方法测试麦克风是否能正常工作，volume 的取值范围为0 - 100。</para></summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::startMicDeviceTest 接口</remarks>
            <param name="interval">反馈音量提示的时间间隔（ms），建议设置到大于 200 毫秒</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopCameraDeviceTest">
            <summary>
停止摄像头测试
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::stopCameraDeviceTest 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startCameraDeviceTest(System.IntPtr)">
            <summary>
开始进行摄像头测试

<para>会触发 onFirstVideoFrame 回调接口</para></summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::startCameraDeviceTest 接口</remarks>
            <remarks>
在测试过程中可以使用 setCurrentCameraDevice 接口切换摄像头。
</remarks>
            <param name="rendHwnd">承载预览画面的窗口句柄</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentSpeakerVolume(System.UInt32)">
            <summary>
设置系统当前扬声器设备音量
</summary>
            <para>v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentVolume 接口</para>
            <remarks>该接口的功能是调节系统播放音量，如果用户直接调节 WIN 系统设置的播放音量时，该接口的设置结果会被用户的操作所覆盖。</remarks>
            <param name="volume">设置的扬声器音量，范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentSpeakerVolume">
            <summary>
获取系统当前扬声器设备音量
</summary>
            <remarks>查询的是系统硬件音量大小。</remarks>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentVolume 接口</remarks>
            <returns>扬声器音量，范围0 - 100</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentSpeakerDevice(System.String)">
            <summary>
设置要使用的扬声器
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDevice 接口</remarks>
            <param name="speakerId">从 getDevicesList 中得到的设备 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentSpeakerDevice">
            <summary>
获取当前的扬声器设备
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDevice 接口</remarks>
            <returns>ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getSpeakerDevicesList">
            <summary>
获取扬声器设备列表
</summary>
            <example>
示例代码：
<code>
ITRTCDeviceCollection pDevice = m_pCloud.getSpeakerDevicesList();
for (int i = 0; i &lt; pDevice.getCount(); i++)
{
    string name = pDevice.getDeviceName(i));
}
pDevice.release();
</code></example>
            <remarks>
SDK 维护 ITRTCDeviceCollection 对象的生命周期，使用完毕后请调用 release 方法释放资源。
</remarks>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getDevicesList 接口</remarks>
            <returns>扬声器管理器对象 ITRTCDeviceCollection</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentMicDeviceVolume(System.UInt32)">
            <summary>
设置系统当前麦克风设备的音量
</summary>
            <remarks>该接口的功能是调节系统采集音量，如果用户直接调节 WIN 系统设置的采集音量时，该接口的设置结果会被用户的操作所覆盖。</remarks>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDeviceVolume 接口</remarks>
            <param name="volume">麦克风音量值，范围[0 - 100]</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentMicDeviceVolume">
            <summary>
获取系统当前麦克风设备音量
</summary>
            <remarks>查询的是系统硬件音量大小。</remarks>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDeviceVolume 接口</remarks>
            <returns>音量值，范围是[0 - 100]</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentMicDevice(System.String)">
            <summary>
设置要使用的麦克风

<para>选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风</para></summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDevice 接口</remarks>
            <param name="micId">从 getMicDevicesList 中得到的设备 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentMicDevice">
            <summary>
获取当前选择的麦克风
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDevice 接口</remarks>
            <returns>ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getMicDevicesList">
            <summary>
获取麦克风设备列表
</summary>
            <example>
示例代码：
<code>
ITRTCDeviceCollection pDevice = m_pCloud.getMicDevicesList();
for (int i = 0; i &lt; pDevice.getCount(); i++)
{
    string name = pDevice.getDeviceName(i));
}
pDevice.release();
pDevice = null;
</code></example>
            <remarks>
SDK 维护 ITRTCDeviceCollection 对象的生命周期，使用完毕后请调用 release 方法释放资源。
</remarks>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getDevicesList 接口</remarks>
            <returns>麦克风管理器对象 ITRTCDeviceCollection</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCurrentCameraDevice">
            <summary>
获取当前使用的摄像头
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDevice 接口</remarks>
            <returns> ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setCurrentCameraDevice(System.String)">
            <summary>
设置要使用的摄像头
</summary>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDevice 接口</remarks>
            <param name="deviceId">从 getCameraDevicesList 中得到的设备 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getCameraDevicesList">
            <summary>
获取摄像头设备列表
</summary>
            <example>
示例代码：
<code>
ITRTCDeviceCollection pDevice = m_pCloud.getCameraDevicesList();
for (int i = 0; i &lt; pDevice.getCount(); i++)
{
    string name = pDevice.getDeviceName(i));
}
pDevice.release();
pDevice = null;
</code></example>
            <remarks>
SDK 维护 ITRTCDeviceCollection 对象的生命周期，使用完毕后请调用 release 方法释放资源。
</remarks>
            <remarks>v8.0 版本弃用，请使用 ITXDeviceManager::getDevicesList 接口</remarks>
            <returns>摄像头管理器对象 ITRTCDeviceCollection</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startLocalAudio">
            <summary>
开启本地音频的采集和上行

<para>该函数会启动麦克风采集，并将音频数据传输给房间里的其他用户。</para><para>SDK 不会默认开启本地音频采集和上行，您需要调用该函数开启，否则房间里的其他用户将无法听到您的声音。</para></summary>
            <remarks>v8.0 版本弃用，请使用 startLocalAudio(TRTCAudioQuality) 接口</remarks>
            <remarks>
TRTC SDK 并不会默认打开本地的麦克风采集。
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioQuality(ManageLiteAV.TRTCAudioQuality)">
            <summary>
设置音频质量

<para>主播端的音质越高，观众端的听感越好，但传输所依赖的带宽也就越高，在带宽有限的场景下也更容易出现卡顿。</para><para>TRTCCloudDef#TRTCAudioQualitySpeech}，流畅：采样率：16k；单声道；音频裸码率：16kbps；适合语音通话为主的场景，比如在线会议，语音通话。</para><para>TRTCCloudDef#TRTCAudioQualityDefault}，默认：采样率：48k；单声道；音频裸码率：50kbps；SDK 默认的音频质量，如无特殊需求推荐选择之。</para><para>TRTCCloudDef#TRTCAudioQualityMusic}，高音质：采样率：48k；双声道 + 全频带；音频裸码率：128kbps；适合需要高保真传输音乐的场景，比如K歌、音乐直播等。</para></summary>
            <remarks>v8.0 版本弃用，请使用 startLocalAudio(TRTCAudioQuality) 接口</remarks>
            <remarks>
该方法需要在 startLocalAudio 之前进行设置，否则不会生效。
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setPriorRemoteVideoStreamType(ManageLiteAV.TRTCVideoStreamType)">
            <summary>
设定观看方优先选择的视频质量

<para>低端设备推荐优先选择低清晰度的小画面。</para><para>如果对方没有开启双路视频模式，则此操作无效。</para></summary>
            <remarks>v8.0 版本弃用，请使用 startRemoteView(userId,streamType,rendView) 接口</remarks>
            <param name="type">默认观看大画面还是小画面，默认为 TRTCVideoStreamTypeBig</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteSubStreamViewRotation(System.String,ManageLiteAV.TRTCVideoRotation)">
            <summary>
设置辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的顺时针旋转角度
</summary>
            <remarks>v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口</remarks>
            <para>- setRemoteViewRotation() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的旋转角度。</para>
            <para>- setRemoteSubStreamViewRotation() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的旋转角度。</para>
            <param name="userId">用户的 ID</param>
            <param name="rotation">支持90、180、270旋转角度</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteSubStreamViewFillMode(System.String,ManageLiteAV.TRTCVideoFillMode)">
            <summary>
设置辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的显示模式
</summary>
            <remarks>v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口</remarks>
            <para>- setRemoteViewFillMode() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的显示模式。</para>
            <para>- setRemoteSubStreamViewFillMode() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的显示模式。</para>
            <param name="userId">用户的 ID</param>
            <param name="mode">填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopRemoteSubStreamView(System.String)">
            <summary>
停止显示远端用户的辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）。
</summary>
            <remarks>v8.0 版本弃用，请使用 stopRemoteView(userId,streamType) 接口</remarks>
            <param name="userId">对方的用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startRemoteSubStreamView(System.String,System.IntPtr)">
            <summary>
开始显示远端用户的辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）
</summary>
            <remarks>v8.0 版本弃用，请使用 startRemoteView(userId,streamType,rendView) 接口</remarks>
            <para>- startRemoteView() 用于显示主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）。</para>
            <para>- startRemoteSubStreamView() 用于显示辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）。</para>
            <remarks>请在 onUserSubStreamAvailable 回调后再调用这个接口。</remarks>
            <param name="userId">对方的用户标识</param>
            <param name="rendHwnd">渲染画面的 HWND</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalViewMirror(System.Boolean)">
            <summary>
设置本地摄像头预览画面的镜像模式
</summary>
            <remarks>v8.0 版本弃用，请使用 setLocalRenderParams(TRTCRenderParams) 接口</remarks>
            <param name="mirror">镜像模式，默认值：false（非镜像模式）</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteViewRotation(System.String,ManageLiteAV.TRTCVideoRotation)">
            <summary>
设置远端图像的顺时针旋转角度
</summary>
            <remarks>v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口</remarks>
            <param name="userId">用户 ID</param>
            <param name="rotation">支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及
TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalViewRotation(ManageLiteAV.TRTCVideoRotation)">
            <summary>
设置本地图像的顺时针旋转角度
</summary>
            <remarks>v8.0 版本弃用，请使用 setLocalRenderParams(TRTCRenderParams) 接口</remarks>
            <param name="rotation">支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteViewFillMode(System.String,ManageLiteAV.TRTCVideoFillMode)">
            <summary>
设置远端图像的渲染模式
</summary>
            <remarks>v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口</remarks>
            <param name="userId">用户 ID</param>
            <param name="mode">填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalViewFillMode(ManageLiteAV.TRTCVideoFillMode)">
            <summary>
设置本地图像的渲染模式
</summary>
            <remarks>v8.0 版本弃用，请使用 setLocalRenderParams(TRTCRenderParams) 接口</remarks>
            <param name="mode">填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopRemoteView(System.String)">
            <summary>
停止显示远端视频画面，同时不再拉取远端用户的视频数据流
</summary>
            <remarks>v8.0 版本弃用，请使用 stopRemoteView(userId,streamType) 接口</remarks>
            <remarks>调用此接口后，SDK 会停止接收该用户的远程视频流，同时会清理相关的视频显示资源。</remarks>
            <param name="userId">对方的用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startRemoteView(System.String,System.IntPtr)">
            <summary>
开始显示远端视频画面
</summary>
            <remarks>v8.0 版本弃用，请使用 startRemoteView(userId,streamType,rendView) 接口</remarks>
            <param name="userId">对方的用户标识</param>
            <param name="rendHwnd">承载预览画面的窗口句柄</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.selectScreenCaptureTarget(ManageLiteAV.TRTCScreenCaptureSourceInfo@,ManageLiteAV.RECT@,System.Boolean,System.Boolean)">
            <summary>
设置屏幕共享参数
</summary>
            <remarks>v7.9 版本弃用，请使用 selectScreenCaptureTarget(TRTCScreenCaptureSourceInfo,RECT,TRTCScreenCaptureProperty) 接口</remarks>
            <param name="source">指定分享源</param>
            <param name="captureRect">指定捕获的区域</param>
            <param name="captureMouse">指定是否捕获鼠标指针</param>
            <param name="highlightWindow">指定是否高亮正在共享的窗口，以及当捕获图像被遮挡时高亮遮挡窗口提示用户移走遮挡</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.resumeAudioEffect(System.Int32)">
            <summary>
恢复音效
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager resumePlayMusic 接口</remarks>
            <param name="effectId">音效 Id</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.pauseAudioEffect(System.Int32)">
            <summary>
暂停音效
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager pausePlayMusic 接口</remarks>
            <param name="effectId">音效 Id</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAllAudioEffectsVolume(System.Int32)">
            <summary>
设置所有音效的音量
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPublishVolume / setMusicPlayoutVolume 接口</remarks>
            <remarks>该操作会覆盖通过 setAudioEffectVolume 指定的单独音效音量。</remarks>
            <param name="volume">音量大小，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAllAudioEffects">
            <summary>
停止所有音效
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager stopPlayMusic 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAudioEffect(System.Int32)">
            <summary>
停止音效
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager stopPlayMusic 接口</remarks>
            <param name="effectId">音效 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioEffectVolume(System.Int32,System.Int32)">
            <summary>
设置音效音量
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPublishVolume / setMusicPlayoutVolume 接口</remarks>
            <remarks>会覆盖通过 setAllAudioEffectsVolume 指定的整体音效音量。</remarks>
            <param name="effectId">音效 ID</param>
            <param name="volume">音量大小，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.playAudioEffect(ManageLiteAV.TRTCAudioEffectParam)">
            <summary>
播放音效
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager startPlayMusic 接口</remarks>
            <para>每个音效都需要您指定具体的 ID，您可以通过该 ID 对音效的开始、停止、音量等进行设置。</para>
            <para>支持的文件格式：aac, mp3。</para>
            <remarks>若您想同时播放多个音效，请分配不同的 ID 进行播放。因为使用同一个 ID 播放不同音效，SDK 将会停止上一个 ID 对应的音效播放，再启动新的音效播放。</remarks>
            <param name="effect">音效</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMPublishVolume(System.UInt32)">
            <summary>
设置背景音乐远端播放音量的大小
</summary>
            <para>v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPublishVolume 接口</para>
            <para>播放背景音乐混音时使用，用来控制背景音乐在远端播放时的音量大小。</para>
            <param name="volume"> 音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMPlayoutVolume(System.UInt32)">
            <summary>
设置背景音乐本地播放音量的大小
</summary>
            <para>v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPlayoutVolume 接口</para>
            <para>播放背景音乐混音时使用，用来控制背景音乐在本地播放时的音量大小。</para>
            <param name="volume"> 音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMVolume(System.UInt32)">
            <summary>
设置背景音乐播放音量的大小
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPublishVolume / setMusicPlayoutVolume 接口</remarks>
            <para>播放背景音乐混音时使用，用来控制背景音乐播放音量的大小，</para>
            <para>该接口会同时控制远端播放音量的大小和本地播放音量的大小，</para>
            <para>因此调用该接口后，setBGMPlayoutVolume 和 setBGMPublishVolume 设置的音量值会被覆盖</para>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBGMPosition(System.UInt32)">
            <summary>
设置 BGM 播放进度
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager seekMusicToPosInMS 接口</remarks>
            <param name="pos">单位毫秒</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getBGMDuration(System.String)">
            <summary>
获取音乐文件总时长，单位毫秒
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager getMusicDurationInMS 接口</remarks>
            <param name="path">音乐文件路径，如果 path 为空，那么返回当前正在播放的 music 时长</param>
            <returns>成功返回时长，失败返回-1</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.resumeBGM">
            <summary>
继续播放背景音乐
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager resumePlayMusic 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.pauseBGM">
            <summary>
暂停播放背景音乐
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager pausePlayMusic 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopBGM">
            <summary>
停止播放背景音乐
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager stopPlayMusic 接口</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.playBGM(System.String)">
            <summary>
启动播放背景音乐
</summary>
            <remarks>v7.3 版本弃用，请使用 TXAudioEffectManager startPlayMusic 接口，支持并发播放多个 BGM</remarks>
            <param name="path">音乐文件路径，支持的文件格式：aac, mp3。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startScreenCapture(System.IntPtr)">
            <summary>
启动屏幕分享
</summary>
            <remarks>从 v7.2 版本开始废弃，请使用 startScreenCapture(HWND rendHwnd, TRTCVideoStreamType type, TRTCVideoEncParam* params) 接口替代。</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setMicVolumeOnMixing(System.UInt32)">
@}
@name 弃用接口函数
@{
<summary>
设置麦克风的音量大小
</summary><remarks>从 v6.9 版本开始废弃，请使用 setAudioCaptureVolume 接口替代。 </remarks></member>
        <member name="M:ManageLiteAV.ITRTCCloud.callExperimentalAPI(System.String)">
            <summary>
12.8 调用实验性 API 接口
</summary>
            <remarks>
该接口用于调用一些实验性功能
</remarks>
            <param name="jsonStr">接口及参数描述的 JSON 字符串</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.showDebugView(System.Int32)">
            <summary>
12.7 显示仪表盘
</summary>
            <remarks>
仪表盘是状态统计和事件消息浮层 view，方便调试。
</remarks>
            <param name="showType">0：不显示；1：显示精简版；2：显示全量版，默认为不显示</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogCallback(ManageLiteAV.ITRTCLogCallback)">
            <summary>
12.6 设置日志回调
</summary>
            <param name="callback">日志回调</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogDirPath(System.String)">
            <summary>
12.5 设置日志保存路径
</summary>
            <remarks>
日志文件默认保存在 C:/Users/[系统用户名]/AppData/Roaming/Tencent/liteav/log，即 %appdata%/Tencent/liteav/log 下，如需修改，必须在所有方法前调用。
</remarks>
            <param name="path">存储日志的文件夹，例如 "D:\\Log"，UTF-8 编码</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogCompressEnabled(System.Boolean)">
            <summary>
12.4 启用或禁用 Log 的本地压缩

<para>开启压缩后，Log 存储体积明显减小，但需要腾讯云提供的 Python 脚本解压后才能阅读。</para><para>禁用压缩后，Log 采用明文存储，可以直接用记事本打开阅读，但占用空间较大。</para></summary>
            <param name="enabled">指定是否启用，默认为禁止状态</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setConsoleEnabled(System.Boolean)">
            <summary>
12.3 启用或禁用控制台日志打印
</summary>
            <param name="enabled">指定是否启用，默认为禁止状态</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLogLevel(ManageLiteAV.TRTCLogLevel)">
            <summary>
12.2 设置 Log 输出级别
</summary>
            <param name="level">level 参见 TRTCLogLevel，默认值：TRTCLogLevelNone</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getSDKVersion">
@}
@name LOG 相关接口函数
@{
<summary>
12.1 获取 SDK 版本信息
</summary><returns>UTF-8 编码的版本号。</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopSpeedTest">
            <summary>
11.2 停止网络测速
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startSpeedTest(System.UInt32,System.String,System.String)">
@}
@name 网络测试
@{
<summary>
11.1 开始进行网络测速（视频通话期间请勿测试，以免影响通话质量）

<para>测速结果将会用于优化 SDK 接下来的服务器选择策略，因此推荐您在用户首次通话前先进行一次测速，这将有助于我们选择最佳的服务器。</para><para>同时，如果测试结果非常不理想，您可以通过醒目的 UI 提示用户选择更好的网络。</para></summary><remarks>
测速本身会消耗一定的流量，所以也会产生少量额外的流量费用。
</remarks><param name="sdkAppId">应用标识</param><param name="userId">用户标识</param><param name="userSig">用户签名</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendSEIMsg(System.Byte[],System.Int32,System.Int32)">
            <summary>
10.2 将小数据量的自定义数据嵌入视频帧中
<para>
跟 sendCustomCmdMsg 的原理不同，sendSEIMsg 是将数据直接塞入视频数据头中。因此，即使视频帧被旁路到了直播 CDN 上，
这些数据也会一直存在。但是由于要把数据嵌入视频帧中，所以数据本身不能太大，推荐几个字节就好。
</para><para>最常见的用法是把自定义的时间戳（timstamp）用 sendSEIMsg 嵌入视频帧中，这种方案的最大好处就是可以实现消息和画面的完美对齐。</para></summary>
            <remarks>
本接口有以下限制：
<para>    -数据在接口调用完后不会被即时发送出去，而是从下一帧视频帧开始带在视频帧中发送。</para><para>    -发送消息到房间内所有用户，每秒最多能发送30条消息（与 sendCustomCmdMsg 共享限制）。</para><para>    -每个包最大为1KB，若发送大量数据，会导致视频码率增大，可能导致视频画质下降甚至卡顿（与 sendCustomCmdMsg 共享限制）。</para><para>    -每个客户端每秒最多能发送总计8KB数据（与 sendCustomCmdMsg 共享限制）。</para><para>    -若指定多次发送（repeatCount &gt; 1），则数据会被带在后续的连续 repeatCount 个视频帧中发送出去，同样会导致视频码率增大。</para><para>    -如果 repeatCount &gt; 1，多次发送，接收消息 onRecvSEIMsg 回调也可能会收到多次相同的消息，需要去重。</para></remarks>
            <param name="data">待发送的数据，最大支持1kb（1000字节）的数据大小</param>
            <param name="dataSize">待发送的数据大小</param>
            <param name="repeatCount">发送数据次数</param>
            <returns>true：消息已通过限制，等待后续视频帧发送；false:消息被限制发送</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendCustomCmdMsg(System.UInt32,System.Byte[],System.UInt32,System.Boolean,System.Boolean)">
@}
@name 自定义消息发送
@{
<summary>
10.1 发送自定义消息给房间内所有用户
<para>
该接口可以借助音视频数据通道向当前房间里的其他用户广播您自定义的数据，但因为复用了音视频数据通道，
请务必严格控制自定义消息的发送频率和消息体的大小，否则会影响音视频数据的质量控制逻辑，造成不确定性的问题。
</para></summary><remarks>
本接口有以下限制：
<para>    -发送消息到房间内所有用户（暂时不支持 Web/小程序端），每秒最多能发送30条消息。</para><para>    -每个包最大为1KB，超过则很有可能会被中间路由器或者服务器丢弃。</para><para>    -每个客户端每秒最多能发送总计8KB数据。</para><para>    -将 reliable 和 ordered 同时设置为 true 或 false，暂不支持交叉设置。</para><para>    -强烈建议不同类型的消息使用不同的 cmdID，这样可以在要求有序的情况下减小消息时延。</para></remarks><param name="cmdId">消息 ID，取值范围为1 - 10</param><param name="data">待发送的消息，最大支持1KB（1000字节）的数据大小</param><param name="dataSize">待发送的数据大小</param><param name="reliable">是否可靠发送，可靠发送的代价是会引入一定的延时，因为接收端要暂存一段时间的数据来等待重传</param><param name="ordered">是否要求有序，即是否要求接收端接收的数据顺序和发送端发送的顺序一致，这会带来一定的接收延时，因为在接收端需要暂存并排序这些消息</param><returns>true：消息已经发出；false：消息发送失败</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioFrameCallback(ManageLiteAV.ITRTCAudioFrameCallback)">
            <summary>
9.7 设置音频数据回调
<para>设置此方法，SDK 内部会把声音模块的数据（PCM 格式）回调出来，包括：</para><para>-onCapturedAudioFrame：本机麦克风采集到的音频数据</para><para>-onPlayAudioFrame：混音前的每一路远程用户的音频数据</para><para>-onMixedPlayAudioFrame：各路音频数据混合后送入扬声器播放的音频数据</para></summary>
            <param name="callback">声音帧数据（PCM 格式）的回调，callback = nullptr 则停止回调数据</param>
            <returns>0：成功；&lt;0：错误</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteVideoRenderCallback(System.String,ManageLiteAV.TRTCVideoPixelFormat,ManageLiteAV.TRTCVideoBufferType,ManageLiteAV.ITRTCVideoRenderCallback)">
            <summary>
9.6 设置远端视频自定义渲染

<para>此方法同 setLocalVideoRenderDelegate，区别在于一个是本地画面的渲染回调， 一个是远程画面的渲染回调。</para></summary>
            <remarks>
设置此方法，SDK 内部会把远端的数据解码后回调出来，SDK 跳过 HWND 渲染逻辑
<para>调用 setRemoteVideoRenderCallback(userId, TRTCVideoPixelFormat_Unknown,  TRTCVideoBufferType_Unknown, nullptr) 停止回调。</para></remarks>
            <param name="userId">用户标识</param>
            <param name="pixelFormat">指定回调的像素格式</param>
            <param name="bufferType">指定视频数据结构类型</param>
            <param name="callback">自定义渲染回调</param>
            <returns>0：成功；&lt;0：错误</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalVideoRenderCallback(ManageLiteAV.TRTCVideoPixelFormat,ManageLiteAV.TRTCVideoBufferType,ManageLiteAV.ITRTCVideoRenderCallback)">
            <summary>
9.5 设置本地视频自定义渲染
</summary>
            <remarks>
设置此方法，SDK 内部会把采集到的数据回调出来，SDK 跳过 HWND 渲染逻辑
<para>调用 setLocalVideoRenderCallback(TRTCVideoPixelFormat_Unknown, TRTCVideoBufferType_Unknown, nullptr) 停止回调</para></remarks>
            <param name="pixelFormat">指定回调的像素格式</param>
            <param name="bufferType">指定视频数据结构类型</param>
            <param name="callback">自定义渲染回调</param>
            <returns>0：成功；&lt;0：错误</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendCustomAudioData(ManageLiteAV.TRTCAudioFrame)">
            <summary>
9.4 向 SDK 投送自己采集的音频数据
<para>TRTCAudioFrame 推荐如下填写方式：</para><para>-audioFormat：音频数据格式，仅支持 TRTCAudioFrameFormatPCM。</para><para>-data：音频帧 buffer。</para><para>-length：音频帧数据长度，支持[5ms ~ 100ms]帧长，推荐使用20 ms帧长，【48000采样率、单声道的帧长度：48000 × 0.02s × 1 × 16bit = 15360bit = 1920字节】。</para><para>-sampleRate：采样率，支持：16000、24000、32000、44100、48000。</para><para>-channel：声道数（如果是立体声，数据是交叉的），单声道：1； 双声道：2。</para><para>-timestamp：时间戳，单位毫秒（ms），可以设置 timestamp 为0，相当于让 SDK 自己设置时间戳。</para><para>参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。</para></summary>
            <remarks>
需精准的按每帧时长的间隔调用 sendCustomAudioData，否则会容易触发声音卡顿。
</remarks>
            <param name="frame">音频数据</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableCustomAudioCapture(System.Boolean)">
            <summary>
9.3 启用音频自定义采集模式

<para>开启该模式后，SDK 停止运行原有的音频采集流程，只保留编码和发送能力。</para><para>您需要用 sendCustomAudioData() 不断地向 SDK 塞入自己采集的音频数据。</para></summary>
            <param name="enable">是否启用，默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.sendCustomVideoData(ManageLiteAV.TRTCVideoFrame)">
            <summary>
9.2 向 SDK 投送自己采集的视频数据

<para>TRTCVideoFrame 推荐如下填写方式（其他字段不需要填写）：</para><para>-pixelFormat：仅支持 LiteAVVideoPixelFormat_I420。</para><para>-bufferType：仅支持 LiteAVVideoBufferType_Buffer。</para><para>-data：视频帧 buffer。</para><para>-length：视频帧数据长度，I420 格式下，其值等于：width × height × 3 / 2。</para><para>-width：视频图像长度。</para><para>-height：视频图像宽度。</para><para>-timestamp：如果 timestamp 间隔不均匀，会严重影响音画同步和录制出的 MP4 质量。</para><para>参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。</para></summary>
            <remarks>
- SDK 内部有帧率控制逻辑，目标帧率以您在 setVideoEncoderParam 中设置的为准，太快会自动丢帧，太慢则会自动补帧。
<para>- 可以设置 frame 中的 timestamp 为 0，相当于让 SDK 自己设置时间戳，但请“均匀”地控制 sendCustomVideoData 的调用间隔，否则会导致视频帧率不稳定。</para></remarks>
            <param name="frame">视频数据，支持 I420 格式数据。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableCustomVideoCapture(System.Boolean)">
@}
@name 自定义采集和渲染
@{
<summary>
9.1 启用视频自定义采集模式

<para>开启该模式后，SDK 不再运行原有的视频采集流程，只保留编码和发送能力。</para><para>您需要用 sendCustomVideoData() 不断地向 SDK 塞入自己采集的视频画面。</para></summary><param name="enable">是否启用，默认值：false</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.removeAllExcludedShareWindow">
            <summary>
8.11 将所有窗口从屏幕分享的排除列表中移除
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.removeExcludedShareWindow(System.IntPtr)">
            <summary>
8.10 将指定窗口从屏幕分享的排除列表中移除
</summary>
            <param name="window">不希望分享出去的窗口</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.addExcludedShareWindow(System.IntPtr)">
            <summary>
8.9 将指定窗口加入屏幕分享的排除列表中，加入排除列表中的窗口不会被分享出去

<para>支持启动屏幕分享前设置过滤窗口，也支持屏幕分享过程中动态添加过滤窗口。</para></summary>
            <param name="window">不希望分享出去的窗口</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setSubStreamMixVolume(System.UInt32)">
            <summary>
8.8 设置屏幕分享的混音音量大小
</summary>
            <para>这个数值越高，屏幕分享音量的占比就越高，麦克风音量占比就越小，所以不推荐设置得太大，否则麦克风的声音就被压制了。</para>
            <param name="volume">设置的混音音量大小，范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setSubStreamEncoderParam(ManageLiteAV.TRTCVideoEncParam@)">
            <summary>
8.7 设置屏幕分享的编码器参数
</summary>
            <para>- setVideoEncoderParam() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的编码参数。</para>
            <para>- setSubStreamEncoderParam() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的编码参数。</para>
            <para>该设置决定远端用户看到的画面质量，同时也是云端录制出的视频文件的画面质量。</para>
            <remarks>即使使用主路传输屏幕分享的数据（在调用 startScreenCapture 时设置 type=TRTCVideoStreamTypeBig），依然要使用此接口更新屏幕分享的编码参数。</remarks>
            <param name="params">辅流编码参数，详情请参考 TRTCCloudDef.h 中的 TRTCVideoEncParam 定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.selectScreenCaptureTarget(ManageLiteAV.TRTCScreenCaptureSourceInfo@,ManageLiteAV.RECT@,ManageLiteAV.TRTCScreenCaptureProperty@)">
            <summary>
8.6 设置屏幕共享参数，该方法在屏幕共享过程中也可以调用

<para>如果您期望在屏幕分享的过程中，切换想要分享的窗口，可以再次调用这个函数而不需要重新开启屏幕分享。</para><para>支持如下四种情况：</para><para>-共享整个屏幕：sourceInfoList 中 type 为 Screen 的 source，captureRect 设为{ 0, 0, 0, 0 }</para><para>-共享指定区域：sourceInfoList 中 type 为 Screen 的 source，captureRect 设为非 NULL，例如{ 100, 100, 300, 300 }</para><para>-共享整个窗口：sourceInfoList 中 type 为 Window 的 source，captureRect 设为{ 0, 0, 0, 0 }</para><para>-共享窗口区域：sourceInfoList 中 type 为 Window 的 source，captureRect 设为非 NULL，例如{ 100, 100, 300, 300 }</para></summary>
            <param name="source">指定分享源</param>
            <param name="captureRect">指定捕获的区域</param>
            <param name="property">指定屏幕分享目标的属性，包括捕获鼠标，高亮捕获窗口等，详情参考 TRTCScreenCaptureProperty 定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getScreenCaptureSources(ManageLiteAV.SIZE@,ManageLiteAV.SIZE@)">
            <summary>
8.5 枚举可分享的屏幕窗口，建议在 startScreenCapture 之前调用

<para>如果您要给您的 App 增加屏幕分享功能，一般需要先显示一个窗口选择界面，这样用户可以选择希望分享的窗口。</para><para>通过如下函数，您可以获得可分享窗口的 ID、类型、窗口名称以及缩略图。</para><para>拿到这些信息后，您就可以实现一个窗口选择界面，当然，您也可以使用我们在 Demo 源码中已经实现好的一个界面。</para></summary>
            <remarks>
返回的列表中包括屏幕和应用窗口，屏幕会在列表的前面几个元素中。
<para>SDK 维护 ITRTCScreenCaptureSourceList 对象的生命周期。</para></remarks>
            <param name="thumbSize">指定要获取的窗口缩略图大小，缩略图可用于绘制在窗口选择界面上</param>
            <param name="iconSize">指定要获取的窗口图标大小</param>
            <returns>窗口列表包括屏幕</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.resumeScreenCapture">
            <summary>
8.4 恢复屏幕分享
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.pauseScreenCapture">
            <summary>
8.3 暂停屏幕分享
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopScreenCapture">
            <summary>
8.2 停止屏幕采集
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startScreenCapture(System.IntPtr,ManageLiteAV.TRTCVideoStreamType,ManageLiteAV.TRTCVideoEncParam)">
@}
@name 屏幕分享相关接口函数
@{
<summary>
8.1 启动屏幕分享
</summary><remarks>
一个用户同时最多只能上传一条主路（TRTCVideoStreamTypeBig）画面和一条辅路（TRTCVideoStreamTypeSub）画面，
默认情况下，屏幕分享使用辅路画面，如果使用主路画面，建议您提前停止摄像头采集（stopLocalPreview）避免相互冲突。
</remarks><param name="rendView">承载预览画面的 HWND，可以设置为 nullptr，表示不显示屏幕分享的预览效果。</param><param name="type">屏幕分享使用的线路，可以设置为主路（TRTCVideoStreamTypeBig）或者辅路（TRTCVideoStreamTypeSub），默认使用辅路。</param><param name="params">屏幕分享的画面编码参数，可以设置为 nullptr，表示让 SDK 选择最佳的编码参数（分辨率、码率等）。</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setSystemAudioLoopbackVolume(System.UInt32)">
            <summary>
7.4 设置系统声音采集的音量。
</summary>
            <param name="volume">音量大小，取值范围为0 - 100。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopSystemAudioLoopback">
            <summary>
7.3 关闭系统声音采集。
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startSystemAudioLoopback(System.String)">
            <summary>
7.2 打开系统声音采集
</summary>
            <para>开启后可以采集整个操作系统的播放声音（path 为空）或某一个播放器（path 不为空）的声音，</para>
            <para>并将其混入到当前麦克风采集的声音中一起发送到云端。</para>
            <param name="path">
                <para>- path 为空，代表采集整个操作系统的声音。</para>
                <para>path 填写 exe 程序（如 QQ音乐）所在的路径，将会启动此程序并只采集此程序的声音。</para>
            </param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getAudioEffectManager">
@}
@name 音乐特效和人声特效
@{
<summary>
7.1 获取音效管理类 ITXAudioEffectManager
</summary><para>该模块是整个 SDK 的音效管理模块，支持如下功能：</para><para>- 耳机耳返：麦克风捕捉的声音实时通过耳机播放。</para><para>- 混响效果：KTV、小房间、大会堂、低沉、洪亮...</para><para>- 变声特效：萝莉、大叔、重金属、外国人...</para><para>- 背景音乐：支持在线音乐和本地音乐，支持变速、变调等特效、支持原生和伴奏并播放和循环播放。</para><para>- 短音效：鼓掌声、欢笑声等简短的音效文件，对于小于10秒的文件，请将 isShortFile 参数设置为 YES。</para></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setWaterMark(ManageLiteAV.TRTCVideoStreamType,System.String,ManageLiteAV.TRTCWaterMarkSrcType,System.UInt32,System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
6.2 设置水印

<para>水印的位置是通过 xOffset, yOffset, fWidthRatio 来指定的。</para><para>-xOffset：水印的坐标，取值范围为0 - 1的浮点数。</para><para>-yOffset：水印的坐标，取值范围为0 - 1的浮点数。</para><para>-fWidthRatio：水印的大小比例，取值范围为0 - 1的浮点数。</para></summary>
            <remarks>
只支持主路视频流
</remarks>
            <param name="streamType">要设置水印的流类型(TRTCVideoStreamTypeBig、TRTCVideoStreamTypeSub)</param>
            <param name="srcData">水印图片源数据（传 NULL 表示去掉水印）</param>
            <param name="srcType">水印图片源数据类型（传 NULL 时忽略该参数）</param>
            <param name="nWidth">水印图片像素宽度（源数据为文件路径时忽略该参数）</param>
            <param name="nHeight">水印图片像素高度（源数据为文件路径时忽略该参数）</param>
            <param name="xOffset">水印显示的左上角 x 轴偏移</param>
            <param name="yOffset">水印显示的左上角 y 轴偏移</param>
            <param name="fWidthRatio">水印显示的宽度占画面宽度比例（水印按该参数等比例缩放显示）</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setBeautyStyle(ManageLiteAV.TRTCBeautyStyle,System.UInt32,System.UInt32,System.UInt32)">
@}
@name 美颜特效和图像水印
@{
<summary>
6.1 设置美颜、美白、红润效果级别

<para>SDK 内部集成了两套风格不同的磨皮算法，一套我们取名叫“光滑”，适用于美女秀场，效果比较明显。</para><para>另一套我们取名“自然”，磨皮算法更多地保留了面部细节，主观感受上会更加自然。</para></summary><param name="style">美颜风格，光滑或者自然，光滑风格磨皮更加明显，适合娱乐场景。</param><param name="beauty">美颜级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显</param><param name="white">美白级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显</param><param name="ruddiness">红润级别，取值范围0 - 9，0表示关闭，1 - 9值越大，效果越明显，该参数暂未生效</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.getDeviceManager">
@}
@name 设备相关接口函数
@{
<summary>
5.1 获取设备管理模块
</summary><returns>ITXDeviceManager 设备管理类</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAudioRecording">
            <summary>
4.12 停止录音
<para>如果调用 exitRoom 时还在录音，录音会自动停止。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startAudioRecording(ManageLiteAV.TRTCAudioRecordingParams@)">
            <summary>
4.11 开始录音

<para>该方法调用后，SDK 会将通话过程中的所有音频(包括本地音频，远端音频，BGM等)录制到一个文件里。</para><para>无论是否进房，调用该接口都生效。</para><para>如果调用 exitRoom 时还在录音，录音会自动停止。</para></summary>
            <param name="audioRecordingParams">录音参数，请参考 TRTCAudioRecordingParams</param>
            <returns>0：成功；-1：录音已开始；-2：文件或目录创建失败；-3：后缀指定的音频格式不支持</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableAudioVolumeEvaluation(System.UInt32)">
            <summary>
4.10 启用或关闭音量大小提示

<para>开启此功能后，SDK 会在 onUserVoiceVolume() 中反馈对每一路声音音量大小值的评估。</para><para>我们在 Demo 中有一个音量大小的提示条，就是基于这个接口实现的。</para><para>如希望打开此功能，请在 startLocalAudio() 之前调用。</para></summary>
            <param name="interval">设置 onUserVoiceVolume 回调的触发间隔，单位为ms，最小间隔为100ms，如果小于等于0则会关闭回调，建议设置为300ms</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getAudioPlayoutVolume">
            <summary>
4.9 获取 SDK 播放音量
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioPlayoutVolume(System.Int32)">
            <summary>
4.8 设置 SDK 播放音量。
</summary>
            <remarks>
该函数会控制最终交给系统播放的声音音量
<para>会影响本地录制的音量大小。</para><para>不会影响耳返的音量。</para></remarks>
            <param name="volume">音量大小，取值0 - 100，默认值为100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getAudioCaptureVolume">
            <summary>
4.7 获取 SDK 采集音量
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setAudioCaptureVolume(System.Int32)">
            <summary>
4.6 设置 SDK 采集音量
</summary>
            <param name="volume">音量大小，取值0 - 100，默认值为100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteAllRemoteAudio(System.Boolean)">
            <summary>
4.5 静音/取消静音所有用户的声音
</summary>
            <param name="mute">true：静音；false：取消静音</param>
            <remarks>
静音时会停止接收所有用户的远端音频流并停止播放，取消静音时会自动拉取所有用户的远端音频流并进行播放。
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteRemoteAudio(System.String,System.Boolean)">
            <summary>
4.4 静音/取消静音指定的远端用户的声音
</summary>
            <param name="userId">用户 ID</param>
            <param name="mute">true：静音；false：取消静音</param>
            <remarks>
静音时会停止接收该用户的远端音频流并停止播放，取消静音时会自动拉取该用户的远端音频流并进行播放。
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteLocalAudio(System.Boolean)">
            <summary>
4.3 静音/取消静音本地的音频

<para>当静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(userId, false) 回调通知。</para><para>当取消静音本地音频后，房间里的其它成员会收到 onUserAudioAvailable(userId, true) 回调通知。</para><para>与 stopLocalAudio 不同之处在于，muteLocalAudio(true) 并不会停止发送音视频数据，而是继续发送码率极低的静音包。</para><para>由于 MP4 等视频文件格式，对于音频的连续性是要求很高的，使用 stopLocalAudio 会导致录制出的 MP4 不易播放。</para><para>因此在对录制质量要求很高的场景中，建议选择 muteLocalAudio，从而录制出兼容性更好的 MP4 文件。</para></summary>
            <param name="mute">true：静音；false：取消静音，默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopLocalAudio">
            <summary>
4.2 关闭本地音频的采集和上行

<para>当关闭本地音频的采集和上行，房间里的其它成员会收到 onUserAudioAvailable(false) 回调通知。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startLocalAudio(ManageLiteAV.TRTCAudioQuality)">
@}
@name 音频相关接口函数
@{
<summary>
4.1 开启本地音频的采集和上行

<para>该函数会启动麦克风采集，并将音频数据传输给房间里的其他用户。</para><para>SDK 并不会默认开启本地的音频上行，也就说，如果您不调用这个函数，房间里的其他用户就听不到您的声音。</para></summary><remarks>
TRTC SDK 并不会默认打开本地的麦克风采集。
</remarks><param name="quality">声音质量，参见 TRTCAudioQuality</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteVideoStreamType(System.String,ManageLiteAV.TRTCVideoStreamType)">
            <summary>
3.18 选定观看指定 userId 的大画面还是小画面
<para>此功能需要该 userId 通过 enableEncSmallVideoStream 提前开启双路编码模式。</para><para>如果该 userId 没有开启双路编码模式，则此操作无效。</para></summary>
            <param name="userId">用户 ID</param>
            <param name="type">视频流类型，即选择看大画面还是小画面，默认为 TRTCVideoStreamTypeBig</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.enableSmallVideoStream(System.Boolean,ManageLiteAV.TRTCVideoEncParam@)">
            <summary>
3.17 开启大小画面双路编码模式

<para>如果当前用户是房间中的主要角色（例如主播、老师、主持人等），并且使用 PC 或者 Mac 环境，可以开启该模式。</para><para>开启该模式后，当前用户会同时输出【高清】和【低清】两路视频流（但只有一路音频流）。</para><para>对于开启该模式的当前用户，会占用更多的网络带宽，并且会更加消耗 CPU 计算资源。</para><para>对于同一房间的远程观众而言：</para><para>- 如果用户的下行网络很好，可以选择观看【高清】画面</para><para>- 如果用户的下行网络较差，可以选择观看【低清】画面</para></summary>
            <param name="enable">是否开启小画面编码，默认值：false</param>
            <param name="smallVideoParam">小流的视频参数</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setRemoteRenderParams(System.String,ManageLiteAV.TRTCVideoStreamType,ManageLiteAV.TRTCRenderParams@)">
            <summary>
3.16 设置远端图像的渲染模式
</summary>
            <param name="userId">对应的远端视频流用户ID</param>
            <param name="streamType">远端图像的视频流类型，详见 TRTCVideoStreamType 定义</param>
            <param name="params">远端图像的参数，详情请参考 TRTCTypeDef.h 中的 TRTCRenderParams 定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setVideoEncoderMirror(System.Boolean)">
            <summary>
3.15 设置编码器输出的画面镜像模式

<para>该接口不改变本地摄像头的预览画面，但会改变另一端用户看到的（以及服务器录制的）画面效果。</para></summary>
            <param name="mirror">是否开启远端镜像, true：远端画面镜像；false：远端画面非镜像。默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setVideoEncoderRotation(ManageLiteAV.TRTCVideoRotation)">
            <summary>
3.14 设置视频编码输出的画面方向，即设置远端用户观看到的和服务器录制的画面方向
</summary>
            <param name="rotation">目前支持 TRTCVideoRotation0 和 TRTCVideoRotation180 旋转角度，默认值：TRTCVideoRotation0</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setLocalRenderParams(ManageLiteAV.TRTCRenderParams@)">
            <summary>
3.13 设置本地图像（主流）的渲染参数
</summary>
            <param name="params">本地图像的参数，详情请参考 TRTCTypeDef.h 中的 TRTCRenderParams 定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setNetworkQosParam(ManageLiteAV.TRTCNetworkQosParam@)">
            <summary>
3.12 设置网络流控相关参数

<para>该设置决定了 SDK 在各种网络环境下的调控策略（例如弱网下是“保清晰”还是“保流畅”）</para></summary>
            <param name="params">网络流控参数，详情请参考 TRTCCloudDef.h 中 TRTCNetworkQosParam 的定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setVideoEncoderParam(ManageLiteAV.TRTCVideoEncParam@)">
            <summary>
3.11 设置视频编码器相关参数

<para>该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）</para></summary>
            <param name="params">视频编码参数，详情请参考 TRTCCloudDef.h 中 TRTCVideoEncParam 的定义</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteAllRemoteVideoStreams(System.Boolean)">
            <summary>
3.10 暂停/恢复接收所有远端视频流
</summary>
            <para>该接口仅暂停/恢复接收所有远端用户的视频流，但并不释放显示资源，所以如果暂停，视频画面会冻屏在 mute 前的最后一帧。</para>
            <param name="mute">是否停止接收</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteRemoteVideoStream(System.String,System.Boolean)">
            <summary>
3.9 暂停/恢复接收指定的远端视频流

<para>该接口仅暂停/恢复接收指定的远端用户的视频流，但并不释放显示资源，所以如果暂停，视频画面会冻屏在 mute 前的最后一帧。</para></summary>
            <param name="userId">对方的用户标识</param>
            <param name="mute">是否暂停接收</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopAllRemoteView">
            <summary>
3.8 停止显示所有远端视频画面，同时不再拉取远端用户的视频数据流
</summary>
            <remarks>
如果有屏幕分享的画面在显示，则屏幕分享的画面也会一并被关闭
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopRemoteView(System.String,ManageLiteAV.TRTCVideoStreamType)">
            <summary>
3.7 停止显示远端视频画面，同时不再拉取远端用户的视频数据流

<para>调用此接口后，SDK 会停止接收该用户的远程视频流，同时会清理相关的视频显示资源。</para></summary>
            <param name="userId">指定远端用户的 userId</param>
            <param name="streamType">指定要停止观看的 userId 的视频流类型</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.updateRemoteView(System.String,ManageLiteAV.TRTCVideoStreamType,System.IntPtr)">
            <summary>
3.6 更新远端视频渲染的窗口
</summary>
            <param name="userId">对方的用户标识</param>
            <param name="streamType">要设置预览窗口的流类型(TRTCVideoStreamTypeBig、TRTCVideoStreamTypeSub)</param>
            <param name="rendView">承载预览画面的控件</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startRemoteView(System.String,ManageLiteAV.TRTCVideoStreamType,System.IntPtr)">
            <summary>
3.5 开始拉取并显示指定用户的远端画面

<para>该函数会拉取指定 userid 的视频流显示在您指定的 view 控件上，您可以通过 setRemoteRenderParams 设置显示模式。</para><para>- 如果您提前知道房间中某个 userid 正在推流，可以直接调用 startRemoteView 显示该用户的远端画面。</para><para>- 如果您不知道房间中有哪些用户开启了视频，可以在 enterRoom 后等待来自 SDK 的 onUserVideoAvailable(userId, true) 回调通知。</para><para>调用 startRemoteView 只是启动拉取，此时画面还需要加载，当加载完毕后 ITRTCCloudCallback 会通过 onFirstVideoFrame(userId) 通知您。</para></summary>
            <param name="userId">指定远端用户的 userId</param>
            <param name="streamType">指定要观看 userId 的视频流类型：
<para>- 高清大画面：({@link  TRTCVideoStreamTypeBig})</para><para>- 低清小画面：({@link  TRTCVideoStreamTypeSmall})</para><para>- 辅流（屏幕分享）：({@link  TRTCVideoStreamTypeSub})</para></param>
            <param name="rendView">承载视频画面的控件</param>
            <remarks>
注意几点规则需要您关注：
<para>1. SDK 支持同时观看某 userid 的大画面和辅路，或者小画面和辅路，但不支持同时观看大画面和小画面。</para><para>2. 只有当指定的 userid 通过 enableEncSmallVideoStream 开启双路编码后，才能观看该用户的小画面。</para><para>3. 如果该用户的小画面不存在，则默认切换到大画面。</para></remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.muteLocalVideo(System.Boolean)">
            <summary>
3.4 暂停/恢复推送本地的视频数据

<para>当暂停推送本地视频后，房间里的其它成员将会收到 onUserVideoAvailable(userId, false) 回调通知</para><para>当恢复推送本地视频后，房间里的其它成员将会收到 onUserVideoAvailable(userId, true) 回调通知</para></summary>
            <param name="mute">true：暂停；false：恢复，默认值：false</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopLocalPreview">
            <summary>
3.3 停止本地视频采集及预览
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.updateLocalView(System.IntPtr)">
            <summary>
3.2 更新本地视频预览画面的窗口
</summary>
            <param name="rendView">承载预览画面的控件</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startLocalPreview(System.IntPtr)">
@}
@name  视频相关接口函数
@{
<summary>
3.1 开启本地视频的预览画面
</summary><remarks>
这个接口会启动默认的摄像头，可以通过 setCurrentCameraDevice 接口选用其他摄像头
<para>当开始渲染首帧摄像头画面时，您会收到 ITRTCCloudCallback 中的 onFirstVideoFrame(null) 回调。</para></remarks><param name="rendView">承载预览画面的控件</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.setMixTranscodingConfig(ManageLiteAV.TRTCTranscodingConfig)">
            <summary>
2.5 设置云端的混流转码参数

<para>
如果您在实时音视频 [控制台](https://console.cloud.tencent.com/trtc/) 中的功能配置页开启了“启用旁路推流”功能，
房间里的每一路画面都会有一个默认的直播 [CDN 地址](https://cloud.tencent.com/document/product/647/16826)。
一个直播间中可能有不止一位主播，而且每个主播都有自己的画面和声音，但对于 CDN 观众来说，他们只需要一路直播流，
所以您需要将多路音视频流混成一路标准的直播流，这就需要混流转码。
</para><para>
当您调用 setMixTranscodingConfig() 接口时，SDK 会向腾讯云的转码服务器发送一条指令，目的是将房间里的多路音视频流混合为一路,
您可以通过 mixUsers 参数来调整每一路画面的位置，以及是否只混合声音，也可以通过 videoWidth、videoHeight、videoBitrate 等参数控制混合音视频流的编码参数。
</para><para>【画面1】=&gt; 解码 ====&gt; \                                       </para><para>                         \                                     </para><para>【画面2】=&gt; 解码 =&gt;  画面混合 =&gt; 编码 =&gt; 【混合后的画面】      </para><para>                         /                                     </para><para>【画面3】=&gt; 解码 ====&gt; /                                       </para><para /><para>【声音1】=&gt; 解码 ====&gt; \                                       </para><para>                         \                                     </para><para>【声音2】=&gt; 解码 =&gt;  声音混合 =&gt; 编码 =&gt; 【混合后的声音        </para><para>                        /                                      </para><para>【声音3】=&gt; 解码 ====&gt; /                                       </para><para>参考文档：[云端混流转码](https://cloud.tencent.com/document/product/647/16827)。</para></summary>
            <remarks>
关于云端混流的注意事项：
- 云端转码会引入一定的 CDN 观看延时，大概会增加1 - 2秒。
- 调用该函数的用户，会将连麦中的多路画面混合到自己当前这路画面或者 config 中指定的 streamId 上。
- 请注意，若您还在房间中且不再需要混流，请务必传入 nullptr 进行取消，因为当您发起混流后，云端混流模块就会开始工作，不及时取消混流可能会引起不必要的计费损失。
- 请放心，您退房时会自动取消混流状态。
</remarks>
            <param name="config">请参考 TRTCCloudDef.h 中关于 TRTCTranscodingConfig 的介绍。如果传入 NULL 取消云端混流转码。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopPublishCDNStream">
            <summary>
2.4 停止向非腾讯云地址转推
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startPublishCDNStream(ManageLiteAV.TRTCPublishCDNParam@)">
            <summary>
2.3 开始向友商云的直播 CDN 转推

<para>该接口跟 startPublishing() 类似，但 startPublishCDNStream() 支持向非腾讯云的直播 CDN 转推。</para><para>使用 startPublishing() 绑定腾讯云直播 CDN 不收取额外的费用，但使用 startPublishCDNStream() 绑定非腾讯云直播 CDN 需要收取转推费用。</para></summary>
            <param name="param">param param CDN 转推参数，请参考 TRTCTypeDef.h 中关于 TRTCPublishCDNParam 的介绍。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.stopPublishing">
            <summary>
2.2 停止向腾讯云的直播 CDN 推流
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.startPublishing(System.String,ManageLiteAV.TRTCVideoStreamType)">
@}
@name CDN 相关接口函数
@{
<summary>
2.1 开始向腾讯云的直播 CDN 推流

<para>该接口会指定当前用户的音视频流在腾讯云 CDN 所对应的 StreamId，进而可以指定当前用户的 CDN 播放地址。</para><para>例如：如果我们采用如下代码设置当前用户的主画面 StreamId 为 user_stream_001，那么该用户主画面对应的 CDN 播放地址为：</para><para>“http://yourdomain/live/user_stream_001.flv”，其中 yourdomain 为您自己备案的播放域名，</para><para>您可以在直播[控制台](https://console.cloud.tencent.com/live) 配置您的播放域名，腾讯云不提供默认的播放域名。</para><para>您也可以在设置 enterRoom 的参数 TRTCParams 时指定 streamId, 而且我们更推荐您采用这种方案。</para></summary><example><code>
ITRTCCloud trtcCloud = ITRTCCloud.getTRTCShareInstance();
trtcCloud.enterRoom(params, TRTCAppScene.TRTCAppSceneLIVE);
trtcCloud.startLocalPreview(Intptr);
trtcCloud.startLocalAudio();
trtcCloud.startPublishing("user_stream_001", TRTCVideoStreamType.TRTCVideoStreamTypeBig);
</code></example><remarks>
您需要先在实时音视频 [控制台](https://console.cloud.tencent.com/rav/) 中的功能配置页开启“启用旁路推流”才能生效。
- 若您选择“指定流旁路”，则您可以通过该接口将对应音视频流推送到腾讯云 CDN 且指定为填写的流 ID。
- 若您选择“全局自动旁路”，则您可以通过该接口调整默认的流 ID。
</remarks><param name="streamId">自定义流 ID</param><param name="type">仅支持 TRTCVideoStreamTypeBig 和 TRTCVideoStreamTypeSub。</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.switchRoom(ManageLiteAV.TRTCSwitchRoomConfig@)">
            <summary>
1.9 切换房间

<para>调用该接口后，用户会先退出原来的房间并快速进入 TRTCSwitchRoomConfig 中指定的新房间:</para><para>相比于直接调用 exitRoom + enterRoom 的方式，switchRoom 接口对主播更加友好，因为 switchRoom 不会停止主播端视频的采集和预览。</para><para>接口调用结果会通过 ITRTCCloudCallback 中的 onSwitchRoom(errCode, errMsg) 回调通知给您。</para></summary>
            <param name="config">房间切换参数，请参考 {@link TRTCSwitchRoomConfig}</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.setDefaultStreamRecvMode(System.Boolean,System.Boolean)">
            <summary>
1.6 设置音视频数据接收模式（需要在进房前设置才能生效）

<para>为实现进房秒开的绝佳体验，SDK 默认进房后自动接收音视频。即在您进房成功的同时，您将立刻收到远端所有用户的音视频数据。</para><para>若您没有调用 startRemoteView，视频数据将自动超时取消。</para><para>若您主要用于语音聊天等没有自动接收视频数据需求的场景，您可以根据实际需求选择接收模式，以免产生预期之外的视频时长费用。</para></summary>
            <param name="autoRecvAudio">true：自动接收音频数据；false：需要调用 muteRemoteAudio 进行请求或取消。默认值：true</param>
            <param name="autoRecvVideo">true：自动接收视频数据；false：需要调用 startRemoteView/stopRemoteView 进行请求或取消。默认值：true</param>
            <remarks>需要在进房前设置才能生效。</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.disconnectOtherRoom">
            <summary>
1.5 关闭跨房连麦

<para>跨房通话的退出结果会通过 ITRTCCloudCallback 中的 onDisconnectOtherRoom 回调通知给您。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.connectOtherRoom(System.String)">
            <summary>
1.4 请求跨房通话（主播 PK）
<para>
TRTC 中两个不同音视频房间中的主播，可以通过“跨房通话”功能拉通连麦通话功能。使用此功能时，
两个主播无需退出各自原来的直播间即可进行“连麦 PK”。
</para><para>
例如：当房间“001”中的主播 A 通过 connectOtherRoom() 跟房间“002”中的主播 B 拉通跨房通话后，
房间“001”中的用户都会收到主播 B 的 onUserEnter(B) 回调和 onUserVideoAvailable(B, true) 回调。
房间“002”中的用户都会收到主播 A 的 onUserEnter(A) 回调和 onUserVideoAvailable(A, true) 回调。
</para><para>简言之，跨房通话的本质，就是把两个不同房间中的主播相互分享，让每个房间里的观众都能看到两个主播。</para><para>                房间 001                     房间 002      </para><para>              -------------               ------------     </para><para> 跨房通话前： | 主播 A      |             | 主播 B     |    </para><para>             | 观众 U V W  |             | 观众 X Y Z |     </para><para>              -------------               ------------     </para><para /><para>                房间 001                     房间 002       </para><para>              -------------               ------------     </para><para> 跨房通话后： | 主播 A B    |             | 主播 B A   |     </para><para>             | 观众 U V W  |             | 观众 X Y Z |     </para><para>              -------------               ------------     </para><para>跨房通话的参数考虑到后续扩展字段的兼容性问题，暂时采用了 JSON 格式的参数，要求至少包含两个字段：</para><para>- roomId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 connectOtherRoom() 时 roomId 应指定为“002”。</para><para>- userId：房间“001”中的主播 A 要跟房间“002”中的主播 B 连麦，主播 A 调用 connectOtherRoom() 时 userId 应指定为 B 的 userId。</para><para>跨房通话的请求结果会通过 TRTCCloudCallback 中的 onConnectOtherRoom() 回调通知给您。</para><para> 此处用到 json 库来格式化json字符串                            </para><para> dynamic jsonObj = new JObject();                             </para><para> jsonObj["roomId"] = 002;                                     </para><para> jsonObj["userId"] = "userB";                                 </para><para> string params = JsonConvert.SerializeObject(jsonObj);        </para><para> trtc.connectOtherRoom(params);                               </para></summary>
            <param name="params">JSON 字符串连麦参数，roomId 代表目标房间号，userId 代表目标用户 ID。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.switchRole(ManageLiteAV.TRTCRoleType)">
            <summary>
1.3 切换角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）

<para>在直播场景下，一个用户可能需要在“观众”和“主播”之间来回切换。</para><para>您可以在进房前通过 TRTCParams 中的 role 字段确定角色，也可以通过 switchRole 在进房后切换角色。</para></summary>
            <param name="role">目标角色，默认为主播：
- {@link TRTCRoleAnchor} 主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。
- {@link TRTCRoleAudience} 观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。
</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.exitRoom">
            <summary>
1.2 离开房间

<para>调用 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。</para><para>待资源释放完毕，SDK 会通过 TRTCCloudCallback 中的 onExitRoom() 回调通知您。</para><para>如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来后再执行相关操作。</para><para>否则可能会遇到如摄像头、麦克风设备被强占等各种异常问题。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.removeCallback(ManageLiteAV.ITRTCCloudCallback)">
            <summary>
移除事件回调
</summary>
            <param name="callback">事件回调</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.addCallback(ManageLiteAV.ITRTCCloudCallback)">
@}
@name 设置 TRTCCloudCallback 回调
@{
<summary>
设置回调接口 ITRTCCloudCallback
<para>您可以通过 ITRTCCloudCallback 获得来自 SDK 的各种状态通知，详见 ITRTCCloudCallback.h 中的定义</para></summary><param name="callback">事件回调</param></member>
        <member name="M:ManageLiteAV.ITRTCCloud.destroyTRTCShareInstance">
            <summary>
释放 ITRTCCloud 单例对象。
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloud.getTRTCShareInstance">
@name 创建与销毁 ITRTCCloud 单例
@{
<summary>
获取 ITRTCCloud 单例对象。
</summary><returns>返回 ITRTCCloud 单例对象</returns></member>
        <member name="M:ManageLiteAV.ITRTCCloud.Dispose">
            <summary>
析构函数，C# 代码中要求显示调用 Dispose 函数，来触发托管 C++ 类析构函数。
</summary>
        </member>
        <member name="T:ManageLiteAV.ITRTCCloud">
@defgroup ITRTCCloud_csharp ITRTCCloud
腾讯云视频通话功能的主要接口类
@{
<summary>
Module:   ITRTCCloud @ TXLiteAVSDK

<para>Function: 腾讯云视频通话功能的主要接口类</para></summary><example>
创建/使用/销毁 ITRTCCloud 对象的示例代码：
<code>
ITRTCCloud trtcCloud = ITRTCCloud.getTRTCShareInstance();
if (trtcCloud != null)
{
	string version = trtcCloud-&gt;getSDKVersion();
}
</code>
程序退出或者后续程序流程不需要使用 TRTCCloud 对象时，释放单例对象 ITRTCCloud
<code>
ITRTCCloud.destroyTRTCShareInstance();
trtcCloud = null;
</code></example></member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.getMusicDurationInMS(System.String)">
            <summary>
2.13 获取景音乐文件的总时长（单位：毫秒）
</summary>
            <param name="path">音乐文件路径，如果 path 为空，那么返回当前正在播放的 music 时长。</param>
            <returns>成功返回时长，失败返回-1</returns>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.seekMusicToPosInTime(System.Int32,System.Int32)">
            <summary>
2.12 设置背景音乐的播放进度（单位：毫秒）
每个音乐都需要您指定具体的 ID，您可以通过该 ID 对音乐的开始、停止、音量等进行设置。
</summary>
            <remarks>
请尽量避免频繁地调用该接口，因为该接口可能会再次读写音乐文件，耗时稍高。
当配合进度条使用时，请在进度条拖动完毕的回调中调用，而避免在拖动过程中实时调用。
</remarks>
            <param name="id">音乐 ID</param>
            <param name="pts">单位: 毫秒</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.getMusicCurrentPosInMS(System.Int32)">
            <summary>
2.11 获取背景音乐当前的播放进度（单位：毫秒）
</summary>
            <param name="id">音乐 ID</param>
            <returns>成功返回当前播放时间，单位：毫秒，失败返回-1</returns>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setMusicSpeedRate(System.Int32,System.Single)">
            <summary>
2.10 调整背景音乐的变速效果
</summary>
            <param name="id">音乐 ID</param>
            <param name="speedRate">速度，默认值是1.0f，范围是：[0.5 ~ 2] 之间的浮点数；</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setMusicPitch(System.Int32,System.Single)">
            <summary>
2.9 调整背景音乐的音调高低
</summary>
            <param name="id">音乐 ID</param>
            <param name="pitch">音调，默认值是0.0f，范围是：[-1 ~ 1] 之间的浮点数；</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setAllMusicVolume(System.Int32)">
            <summary>
2.8 设置全局背景音乐的本地和远端音量的大小
</summary>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setMusicPlayoutVolume(System.Int32,System.Int32)">
            <summary>
2.7 设置背景音乐的本地音量大小，即主播可以通过此接口设置主播自己本地的背景音乐的音量大小。
</summary>
            <param name="id">音乐 ID</param>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setMusicPublishVolume(System.Int32,System.Int32)">
            <summary>
2.6 设置背景音乐的远端音量大小，即主播可以通过此接口设置远端观众能听到的背景音乐的音量大小。
</summary>
            <param name="id">音乐 ID</param>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.resumePlayMusic(System.Int32)">
            <summary>
2.5 恢复播放背景音乐
</summary>
            <param name="id">音乐 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.pausePlayMusic(System.Int32)">
            <summary>
2.4 暂停播放背景音乐
</summary>
            <param name="id">音乐 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.stopPlayMusic(System.Int32)">
            <summary>
2.3 停止播放背景音乐
</summary>
            <param name="id">音乐 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.startPlayMusic(ManageLiteAV.AudioMusicParam)">
            <summary>
2.2 开始播放背景音乐
每个音乐都需要您指定具体的 ID，您可以通过该 ID 对音乐的开始、停止、音量等进行设置。
</summary>
            <remarks>
若您想同时播放多个音乐，请分配不同的 ID 进行播放。
如果使用同一个 ID 播放不同音乐，SDK 会先停止播放旧的音乐，再播放新的音乐。
</remarks>
            <param name="musicParam">音乐参数</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setMusicObserver(System.Int32,ManageLiteAV.ITXMusicPlayObserver)">
@}
@name 背景音乐特效函数
@{
<summary>
2.1 设置背景音乐的播放进度回调接口
</summary><param name="id">音乐 ID</param><param name="observer">具体参考 ITXMusicPlayObserver 中定义接口</param></member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setVoiceCaptureVolume(System.Int32)">
            <summary>
1.2 设置麦克风采集人声的音量
</summary>
            <param name="volume">音量大小，100为正常音量，取值范围为0 - 100；默认值：100</param>
        </member>
        <member name="M:ManageLiteAV.ITXAudioEffectManager.setVoiceReverbType(ManageLiteAV.TXVoiceReverbType)">
@name 人声相关特效函数
@{
<summary>
设置人声的混响效果（KTV、小房间、大会堂、低沉、洪亮...）
</summary></member>
        <member name="M:ManageLiteAV.ITXMusicPlayObserver.onComplete(System.Int32,System.Int32)">
            <summary>
背景音乐已播放完毕
</summary>
        </member>
        <member name="M:ManageLiteAV.ITXMusicPlayObserver.onPlayProgress(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
背景音乐的播放进度
</summary>
        </member>
        <member name="M:ManageLiteAV.ITXMusicPlayObserver.onStart(System.Int32,System.Int32)">
            <summary>
背景音乐开始播放
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_6">
            <summary>
磁性
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_5">
            <summary>
洪亮
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_4">
            <summary>
低沉
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_3">
            <summary>
大会堂
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_2">
            <summary>
小房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_1">
            <summary>
KTV
</summary>
        </member>
        <member name="F:ManageLiteAV.TXVoiceReverbType.TXLiveVoiceReverbType_0">
            <summary>
关闭混响
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.endTimeMS">
            <summary>
【字段含义】音乐结束播放时间点，单位毫秒，0表示播放至文件结尾。
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.startTimeMS">
            <summary>
【字段含义】音乐开始播放时间点，单位毫秒
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.isShortFile">
            <summary>
【字段含义】播放的是否为短音乐文件
【推荐取值】YES：需要重复播放的短音乐文件；NO：正常的音乐文件。默认值：NO
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.publish">
            <summary>
【字段含义】是否将音乐传到远端
【推荐取值】YES：音乐在本地播放的同时，会上行至云端，因此远端用户也能听到该音乐；NO：音乐不会上行至云端，因此只能在本地听到该音乐。默认值：NO
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.loopCount">
            <summary>
【字段含义】音乐循环播放的次数
【推荐取值】取值范围为0 - 任意正整数，默认值：0。0表示播放音乐一次；1表示播放音乐两次；以此类推
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.path">
            <summary>
【字段含义】音乐文件的绝对路径
</summary>
        </member>
        <member name="F:ManageLiteAV.AudioMusicParam.id">
            <summary>
【字段含义】音乐 ID
【特殊说明】SDK 允许播放多路音乐，因此需要音乐 ID 进行标记，用于控制音乐的开始、停止、音量等
</summary>
        </member>
        <member name="T:ManageLiteAV.AudioMusicParam">
@defgroup ITXAudioEffectManager_csharp ITXAudioEffectManager
腾讯云视频通话功能音乐和人声设置接口
@{
</member>
        <member name="M:ManageLiteAV.ITRTCLogCallback.onLog(System.String,ManageLiteAV.TRTCLogLevel,System.String)">
            <summary>
14.1 有日志打印时的回调
</summary>
            <param name="log">日志内容</param>
            <param name="level">日志等级 参见 TRTCLogLevel</param>
            <param name="module">暂无具体意义，目前为固定值 TXLiteAVSDK</param>
        </member>
        <member name="T:ManageLiteAV.ITRTCLogCallback">
            <summary>
日志相关回调
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCAudioFrameCallback.onMixedPlayAudioFrame(ManageLiteAV.TRTCAudioFrame)">
            <summary>
13.3 各路音频数据混合后送入喇叭播放的音频数据
</summary>
            <remarks>
- 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
<para>- 此接口回调出的音频数据支持修改。</para><para>- 此接口回调出的音频时间帧长固定为0.02s。</para><para>  由时间帧长转化为字节帧长的公式为【采样率 × 时间帧长 × 声道数 × 采样点位宽】。</para><para>  以SDK默认的音频播放格式48000采样率、双声道、16采样点位宽为例，字节帧长为【48000 × 0.02s × 2 × 16bit = 30720bit = 3840字节】。</para><para>- 此接口回调出的音频数据是各路音频播放数据的混合,不包含耳返的音频数据。</para></remarks>
            <param name="frame">音频数据</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCAudioFrameCallback.onPlayAudioFrame(ManageLiteAV.TRTCAudioFrame,System.String)">
            <summary>
13.2 混音前的每一路远程用户的音频数据（例如您要对某一路的语音进行文字转换，必须要使用这里的原始数据，而不是混音之后的数据）
</summary>
            <remarks>
- 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
<para>- 此接口回调出的音频数据是只读的，不支持修改。</para></remarks>
            <param name="frame">音频数据</param>
            <param name="userId">用户标识</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCAudioFrameCallback.onCapturedAudioFrame(ManageLiteAV.TRTCAudioFrame)">
            <summary>
13.1 本地麦克风采集到的音频数据回调
</summary>
            <remarks>
- 请不要在此回调函数中做任何耗时操作，建议直接拷贝到另一线程进行处理，否则会导致各种声音问题。
<para>- 此接口回调出的音频数据支持修改。</para><para>- 此接口回调出的音频时间帧长固定为0.02s。</para><para>  由时间帧长转化为字节帧长的公式为【采样率 × 时间帧长 × 声道数 × 采样点位宽】。</para><para>  以SDK默认的音频录制格式48000采样率、单声道、16采样点位宽为例，字节帧长为【48000 × 0.02s × 1 × 16bit = 15360bit = 1920字节】。</para><para>- 此接口回调出的音频数据包含背景音、音效、混响等前处理效果。</para></remarks>
            <param name="frame">音频数据</param>
        </member>
        <member name="T:ManageLiteAV.ITRTCAudioFrameCallback">
            <summary>
声音数据帧的自定义处理回调（只读）
</summary>
            <remarks>
回调函数是在 SDK 内部线程同步抛出来的，请不要做耗时操作。
<para>提示：请按需定义相关函数实现，减少不必要的性能损耗。</para></remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCVideoRenderCallback.onRenderVideoFrame(System.String,ManageLiteAV.TRTCVideoStreamType,ManageLiteAV.TRTCVideoFrame)">
            <summary>
12.1 自定义视频渲染回调

<para>可以通过 setLocalVideoRenderCallback 和 setRemoteVideoRenderCallback 接口设置自定义渲染回调</para></summary>
            <param name="userId">用户标识</param>
            <param name="streamType">流类型：即摄像头还是屏幕分享</param>
            <param name="frame">视频帧数据</param>
        </member>
        <member name="T:ManageLiteAV.ITRTCVideoRenderCallback">
            <summary>
视频数据帧的自定义处理回调
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onPlayBGMComplete(ManageLiteAV.TXLiteAVError)">
            <summary>
10.6 废弃接口：播放背景音乐结束
</summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="errCode">错误码</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onPlayBGMProgress(System.UInt32,System.UInt32)">
            <summary>
10.5 废弃接口：播放背景音乐的进度
</summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="progressMS">已播放时间</param>
            <param name="durationMS">总时间</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onPlayBGMBegin(ManageLiteAV.TXLiteAVError)">
            <summary>
10.4 废弃接口：开始播放背景音乐
</summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="errCode">错误码</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onAudioEffectFinished(System.Int32,System.Int32)">
            <summary>
10.3 废弃接口：播放音效结束回调
</summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="effectId">音效id</param>
            <param name="code">0表示播放正常结束；其他表示异常结束</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserExit(System.String,System.Int32)">
            <summary>
10.2 废弃接口：有用户（主播）离开当前房间

<para>该回调接口可以被看作是 onRemoteUserLeaveRoom 的废弃版本，不推荐使用。请使用
onUserVideoAvailable 或 onRemoteUserEnterRoom 进行替代。</para></summary>
            <remarks>该接口已被废弃，不推荐使用</remarks>
            <param name="userId">用户标识</param>
            <param name="reason">离开原因</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserEnter(System.String)">
@}
@name 弃用接口回调
@{
<summary>
10.1 废弃接口：有主播加入当前房间

<para>该回调接口可以被看作是 onRemoteUserEnterRoom 的废弃版本，不推荐使用。请使用
onUserVideoAvailable 或 onRemoteUserEnterRoom 进行替代。</para></summary><remarks>该接口已被废弃，不推荐使用</remarks><param name="userId">用户标识</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureStoped(System.Int32)">
            <summary>
9.5 当屏幕分享停止时，SDK 会通过此回调通知
</summary>
            <param name="reason">停止原因，0：表示用户主动停止；1：表示屏幕分享窗口被关闭</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureResumed(System.Int32)">
            <summary>
9.4 当屏幕分享恢复时，SDK 会通过此回调通知
</summary>
            <param name="reason">停止原因，0：表示用户主动恢复，1：表示屏幕分享参数设置完毕后自动恢复；2：表示屏幕分享窗口从最小化被恢复；3：表示屏幕分享窗口从隐藏被恢复</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCapturePaused(System.Int32)">
            <summary>
9.3 当屏幕分享暂停时，SDK 会通过此回调通知
</summary>
            <param name="reason">停止原因，0：表示用户主动暂停；1：表示设置屏幕分享参数导致的暂停；2：表示屏幕分享窗口被最小化导致的暂停；3：表示屏幕分享窗口被隐藏导致的暂停</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureStarted">
            <summary>
9.2 当屏幕分享开始时，SDK 会通过此回调通知
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onScreenCaptureCovered">
@}
@name 屏幕分享回调
@{
<summary>
9.1 当屏幕分享窗口被遮挡无法正常捕获时，SDK 会通过此回调通知，可在此回调里通知用户移开遮挡窗口
</summary></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSetMixTranscodingConfig(System.Int32,System.String)">
            <summary>
8.5 设置云端的混流转码参数的回调，对应于 TRTCCloud 中的 setMixTranscodingConfig() 接口

<para>对应于 TRTCCloud 中的 setMixTranscodingConfig() 接口</para></summary>
            <param name="errCode">0表示成功，其余值表示失败</param>
            <param name="errMsg">具体错误原因</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStopPublishCDNStream(System.Int32,System.String)">
            <summary>
8.4 停止旁路推流到 CDN 完成的回调

<para>对应于 TRTCCloud 中的 stopPublishCDNStream() 接口</para></summary>
            <param name="errCode">错误码，参考 TXLiteAVCode.h</param>
            <param name="errMsg">错误详细信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStartPublishCDNStream(System.Int32,System.String)">
            <summary>
8.3 启动旁路推流到 CDN 完成的回调

<para>对应于 TRTCCloud 的 startPublishCDNStream() 接口</para></summary>
            <remarks>
Start 回调如果成功，只能说明转推请求已经成功告知给腾讯云，如果目标 CDN 有异常，还是有可能会转推失败。
</remarks>
            <param name="errCode">错误码，参考 TXLiteAVCode.h</param>
            <param name="errMsg">错误详细信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStopPublishing(System.Int32,System.String)">
            <summary>
8.2 停止向腾讯云的直播 CDN 推流的回调，对应于 TRTCCloud 中的 stopPublishing() 接口
</summary>
            <param name="errCode">0表示成功，其余值表示失败</param>
            <param name="errMsg">具体错误原因</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStartPublishing(System.Int32,System.String)">
@}
@name CDN 旁路转推回调
@{
<summary>
8.1 开始向腾讯云的直播 CDN 推流的回调，对应于 TRTCCloud 中的 startPublishing() 接口
</summary><param name="errCode">0表示成功，其余值表示失败</param><param name="errMsg">具体错误原因</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRecvSEIMsg(System.String,System.Byte[],System.UInt32)">
            <summary>
7.3 收到 SEI 消息的回调

<para>当房间中的某个用户使用 sendSEIMsg 发送数据时，房间中的其它用户可以通过 onRecvSEIMsg 接口接收数据。</para></summary>
            <param name="userId">用户标识</param>
            <param name="message">数据</param>
            <param name="msgSize">数据大小</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onMissCustomCmdMsg(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
7.2 自定义消息丢失回调

<para>TRTC 所使用的传输通道为 UDP 通道，所以即使设置了 reliable，也做不到100%不丢失，只是丢消息概率极低，能满足常规可靠性要求。</para><para>在过去的一段时间内（通常为5s），自定义消息在传输途中丢失的消息数量的统计，SDK 都会通过此回调通知出来。</para></summary>
            <remarks>
只有在发送端设置了可靠传输(reliable)，接收方才能收到消息的丢失回调
</remarks>
            <param name="userId">用户标识</param>
            <param name="cmdId">命令 ID</param>
            <param name="errCode">错误码，当前版本为-1</param>
            <param name="missed">丢失的消息数量</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRecvCustomCmdMsg(System.String,System.Int32,System.UInt32,System.Byte[],System.UInt32)">
@}
@name 自定义消息的接收回调
@{
<summary>
7.1 收到自定义消息回调

<para>当房间中的某个用户使用 sendCustomCmdMsg 发送自定义消息时，房间中的其它用户可以通过 onRecvCustomCmdMsg 接口接收消息</para></summary><param name="userId">用户标识</param><param name="cmdID">命令 ID</param><param name="seq">消息序号</param><param name="msg">消息数据</param><param name="msgSize">消息数据大小</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onAudioDevicePlayoutVolumeChanged(System.UInt32,System.Boolean)">
            <summary>
6.8 当前音频播放设备音量变化通知
</summary>
            <remarks>使用 enableAudioVolumeEvaluation（interval&gt;0）开启，（interval==0）关闭</remarks>
            <param name="volume">音量值，取值范围0 - 100</param>
            <param name="muted">当前音频播放设备是否被静音，true：静音；false：取消静音</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onAudioDeviceCaptureVolumeChanged(System.UInt32,System.Boolean)">
            <summary>
6.7 当前音频采集设备音量变化通知
</summary>
            <remarks>使用 enableAudioVolumeEvaluation（interval&gt;0）开启，（interval==0）关闭</remarks>
            <param name="volume">音量值，取值范围0 - 100</param>
            <param name="muted">当前采集音频设备是否被静音，true：静音；false：取消静音</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onTestSpeakerVolume(System.UInt32)">
            <summary>
6.6 扬声器测试音量回调

<para>扬声器测试接口 startSpeakerDeviceTest 会触发这个回调</para></summary>
            <param name="volume">音量值，取值范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onTestMicVolume(System.UInt32)">
            <summary>
6.5 麦克风测试音量回调

<para>麦克风测试接口 startMicDeviceTest 会触发这个回调</para></summary>
            <param name="volume">音量值，取值范围0 - 100</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onDeviceChange(System.String,ManageLiteAV.TRTCDeviceType,ManageLiteAV.TRTCDeviceState)">
            <summary> 
6.4 本地设备通断回调
</summary>
            <param name="deviceId">设备 ID</param>
            <param name="type">设备类型</param>
            <param name="state">事件类型</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserVoiceVolume(ManageLiteAV.TRTCVolumeInfo[],System.UInt32,System.UInt32)">
            <summary>
6.3 用于提示音量大小的回调,包括每个 userId 的音量和远端总音量

<para>您可以通过调用 TRTCCloud 中的 enableAudioVolumeEvaluation 接口来开关这个回调。</para><para>需要注意的是，调用 enableAudioVolumeEvaluation 开启音量回调后，无论频道内是否有人说话，都会按设置的时间间隔调用这个回调;</para><para>如果没有人说话，则 userVolumes 为空，totalVolume 为0。</para></summary>
            <remarks>
userId 为 null 时表示自己的音量，userVolumes 内仅包含正在说话（音量不为0）的用户音量信息。
</remarks>
            <param name="userVolumes">所有正在说话的房间成员的音量，取值范围0 - 100。</param>
            <param name="userVolumesCount">房间成员数量</param>
            <param name="totalVolume">所有远端成员的总音量, 取值范围0 - 100。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onMicDidReady">
            <summary>
6.2 麦克风准备就绪
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onCameraDidReady">
@}
@name 硬件设备事件回调
@{
<summary>
6.1 摄像头准备就绪
</summary></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSpeedTest(ManageLiteAV.TRTCSpeedTestResult,System.UInt32,System.UInt32)">
            <summary>
5.4 服务器测速的回调，SDK 对多个服务器 IP 做测速，每个 IP 的测速结果通过这个回调通知
</summary>
            <param name="currentResult">当前完成的测速结果</param>
            <param name="finishedCount">已完成测速的服务器数量</param>
            <param name="totalCount">需要测速的服务器总数量</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onConnectionRecovery">
            <summary>
5.3 SDK 跟服务器的连接恢复
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onTryToReconnect">
            <summary>
5.2 SDK 尝试重新连接到服务器
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onConnectionLost">
@}
@name 服务器事件回调
@{
<summary>
5.1 SDK 跟服务器的连接断开
</summary></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onStatistics(ManageLiteAV.TRTCStatistics)">
            <summary>
4.2 技术指标统计回调

<para>如果您是熟悉音视频领域相关术语，可以通过这个回调获取 SDK 的所有技术指标。</para><para>如果您是首次开发音视频相关项目，可以只关注 onNetworkQuality 回调。</para></summary>
            <remarks>
每2秒回调一次
</remarks>
            <param name="statis">统计数据，包括本地和远程的</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onNetworkQuality(ManageLiteAV.TRTCQualityInfo,ManageLiteAV.TRTCQualityInfo[],System.UInt32)">
@}
@name 统计和质量回调
@{
<summary>
4.1 网络质量：该回调每2秒触发一次，统计当前网络的上行和下行质量
</summary><remarks>
userId == null 代表自己当前的视频质量
</remarks><param name="localQuality">上行网络质量</param><param name="remoteQuality">下行网络质量的数组</param><param name="remoteQualityCount">下行网络质量的数组大小</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSendFirstLocalAudioFrame">
            <summary>
3.9 首帧本地音频数据已经被送出

<para>SDK 会在 enterRoom() 并 startLocalAudio() 成功后开始麦克风采集，并将采集到的声音进行编码。</para><para>当 SDK 成功向云端送出第一帧音频数据后，会抛出这个回调事件。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSendFirstLocalVideoFrame(ManageLiteAV.TRTCVideoStreamType)">
            <summary>
3.8 首帧本地视频数据已经被送出

<para>SDK 会在 enterRoom() 并 startLocalPreview() 成功后开始摄像头采集，并将采集到的画面进行编码。</para><para>当 SDK 成功向云端送出第一帧视频数据后，会抛出这个回调事件。</para></summary>
            <param name="streamType">视频流类型，大画面还是小画面或辅流画面（屏幕分享）</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onFirstAudioFrame(System.String)">
            <summary>
3.7 开始播放远程用户的首帧音频（本地声音暂不通知）
</summary>
            <param name="userId">远程用户 ID</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onFirstVideoFrame(System.String,ManageLiteAV.TRTCVideoStreamType,System.Int32,System.Int32)">
            <summary>
3.6 开始渲染本地或远程用户的首帧画面

<para>如果 userId 为 null，代表开始渲染本地采集的摄像头画面，需要您先调用 startLocalPreview 触发。</para><para>如果 userId 不为 null，代表开始渲染远程用户的首帧画面，需要您先调用 startRemoteView 触发。</para></summary>
            <remarks>
只有当您调用 startLocalPreview()、startRemoteView() 或 startRemoteSubStreamView() 之后，才会触发该回调。
</remarks>
            <param name="userId">本地或远程用户 ID，如果 userId == null 代表本地，userId != null 代表远程。</param>
            <param name="streamType">视频流类型：摄像头或屏幕分享。</param>
            <param name="width">画面宽度</param>
            <param name="height">画面高度</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserAudioAvailable(System.String,System.Boolean)">
            <summary>
3.5 用户是否开启音频上行
</summary>
            <param name="userId">用户标识</param>
            <param name="available">声音是否开启</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserSubStreamAvailable(System.String,System.Boolean)">
            <summary>
3.4 用户是否开启屏幕分享
</summary>
            <param name="userId">用户标识</param>
            <param name="available">屏幕分享是否开启</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onUserVideoAvailable(System.String,System.Boolean)">
            <summary>
3.3 用户是否开启摄像头视频

<para>当您收到 onUserVideoAvailable(userId, YES) 通知时，代表该路画面已经有可用的视频数据帧到达。</para><para>之后，您需要调用 startRemoteView(userId) 接口加载该用户的远程画面。</para><para>再之后，您还会收到名为 onFirstVideoFrame(userId) 的首帧画面渲染回调。</para><para>
当您收到了 onUserVideoAvailable(userId, NO) 通知时，代表该路远程画面已经被关闭，这可能是
由于该用户调用了 muteLocalVideo() 或 stopLocalPreview() 所致。
</para></summary>
            <param name="userId">用户标识</param>
            <param name="available">画面是否开启</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRemoteUserLeaveRoom(System.String,System.Int32)">
            <summary>
3.2 有用户离开当前房间

<para>与 onRemoteUserEnterRoom 相对应，在两种不同的应用场景下，该通知的行为会有差别：</para><para>- 通话场景（TRTCAppSceneVideoCall 和 TRTCAppSceneAudioCall）：该场景下用户没有角色的区别，任何用户的离开都会触发该通知。</para><para>- 直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）：只有主播离开房间时才会触发该通知，观众离开房间不会触发该通知。</para></summary>
            <param name="userId">用户标识</param>
            <param name="reason">离开原因，0表示用户主动退出房间，1表示用户超时退出，2表示被踢出房间。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onRemoteUserEnterRoom(System.String)">
@}
@name 成员事件回调
@{
<summary>
3.1 有用户加入当前房间

<para>出于性能方面的考虑，在两种不同的应用场景下，该通知的行为会有差别：</para><para>- 通话场景（TRTCAppSceneVideoCall 和 TRTCAppSceneAudioCall）：该场景下用户没有角色的区别，任何用户进入房间都会触发该通知。</para><para>- 直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）：该场景不限制观众的数量，如果任何用户进出都抛出回调会引起很大的性能损耗，所以该场景下只有主播进入房间时才会触发该通知，观众进入房间不会触发该通知。</para></summary><remarks>
注意 onRemoteUserEnterRoom 和 onRemoteUserLeaveRoom 只适用于维护当前房间里的“成员列表”，如果需要显示远程画面，建议使用监听 onUserVideoAvailable() 事件回调。
</remarks><param name="userId">用户标识</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSwitchRoom(ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.6 切换房间 (switchRoom) 的结果回调
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onDisconnectOtherRoom(ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.5 结束跨房通话（主播 PK）的结果回调
</summary>
            <param name="errCode">错误码，ERR_NULL 代表切换成功，其他请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onConnectOtherRoom(System.String,ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.4 请求跨房通话（主播 PK）的结果回调

<para>调用 TRTCCloud 中的 connectOtherRoom() 接口会将两个不同房间中的主播拉通视频通话，也就是所谓的“主播PK”功能。</para><para>
调用者会收到 onConnectOtherRoom() 回调来获知跨房通话是否成功，
如果成功，两个房间中的所有用户都会收到 PK 主播的 onUserVideoAvailable() 回调。
</para></summary>
            <param name="userId">要 PK 的目标主播 userId。</param>
            <param name="errCode">错误码，ERR_NULL 代表切换成功，其他请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onSwitchRole(ManageLiteAV.TXLiteAVError,System.String)">
            <summary>
2.3 切换角色结果回调
<para>
调用 TRTCCloud 中的 switchRole() 接口会切换主播和观众的角色，该操作会伴随一个线路切换的过程，
待 SDK 切换完成后，会抛出 onSwitchRole() 事件回调。
</para></summary>
            <param name="errCode">错误码，ERR_NULL 代表切换成功，其他请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</param>
            <param name="errMsg">错误信息</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onExitRoom(System.Int32)">
            <summary>
2.2 离开房间的事件回调
<para>
调用 TRTCCloud 中的 exitRoom() 接口会执行退出房间的相关逻辑，例如释放音视频设备资源和编解码器资源等。
待资源释放完毕之后，SDK 会通过 onExitRoom() 回调通知到您。
</para><para>
如果您要再次调用 enterRoom() 或者切换到其他的音视频 SDK，请等待 onExitRoom() 回调到来之后再执行相关操作。
否则可能会遇到如摄像头、麦克风设备被强占等各种异常问题。
</para></summary>
            <param name="reason">离开房间原因，0：主动调用 exitRoom 退房；1：被服务器踢出当前房间；2：当前房间整个被解散。</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onEnterRoom(System.Int32)">
@}
@name 房间事件回调
@{
<summary>
2.1 已加入房间的回调

<para>调用 TRTCCloud 中的 enterRoom() 接口执行进房操作后，会收到来自 SDK 的 onEnterRoom(result) 回调：</para><para>- 如果加入成功，result 会是一个正数（result &gt; 0），代表加入房间的时间消耗，单位是毫秒（ms）。</para><para>- 如果加入失败，result 会是一个负数（result &lt; 0），代表进房失败的错误码。</para><para>进房失败的错误码含义请参见 [错误码](https://cloud.tencent.com/document/product/647/32257)。</para></summary><remarks>
在 Ver6.6 之前的版本，只有进房成功会抛出 onEnterRoom(result) 回调，进房失败由 onError() 回调抛出。
<para>在 Ver6.6 及之后改为：进房成功返回正的 result，进房失败返回负的 result，同时进房失败也会有 onError() 回调抛出。</para></remarks><param name="result">result &gt; 0 时为进房耗时（ms），result &lt; 0 时为进房错误码。</param></member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onWarning(ManageLiteAV.TXLiteAVWarning,System.String,System.IntPtr)">
            <summary>
1.2 警告回调：用于告知您一些非严重性问题，例如出现了卡顿或者可恢复的解码失败。
</summary>
            <param name="warningCode">错误码</param>
            <param name="warningMsg">警告信息</param>
            <param name="arg">扩展信息字段，个别警告码可能会带额外的信息帮助定位问题</param>
        </member>
        <member name="M:ManageLiteAV.ITRTCCloudCallback.onError(ManageLiteAV.TXLiteAVError,System.String,System.IntPtr)">
@name 错误事件和警告事件
@{
<summary>
1.1 错误回调，SDK 不可恢复的错误，一定要监听，并分情况给用户适当的界面提示。
</summary><param name="errCode">错误码</param><param name="errMsg">错误信息</param><param name="arg"> 扩展信息字段，个别错误码可能会带额外的信息帮助定位问题</param></member>
        <member name="T:ManageLiteAV.ITRTCCloudCallback">
@defgroup ITRTCCloudCallback_csharp ITRTCCloudCallback
腾讯云视频通话功能的回调接口类
@{
<summary>
腾讯云视频通话功能的回调接口类
</summary></member>
        <member name="F:ManageLiteAV.TRTCStatistics.remoteStatisticsArraySize">
            <summary>
数组 remoteStatisticsArray 的大小
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.remoteStatisticsArray">
            <summary>
远端成员的音视频统计信息，可能有主画面、小画面以及辅路画面等多路的情况，因此是一个数组
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.localStatisticsArraySize">
            <summary>
数组 localStatisticsArray 的大小
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.localStatisticsArray">
            <summary>
本地的音视频统计信息，可能有主画面、小画面以及辅路画面等多路的情况，因此是一个数组
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.sentBytes">
            <summary>
总发送字节总数（包含信令和音视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.receivedBytes">
            <summary>
总接收字节数（包含信令和音视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.rtt">
            <summary>
延迟（毫秒），指 SDK 到腾讯云服务器的一次网络往返时间，该值越小越好。
<para>一般低于50ms的 rtt 相对理想，而高于100ms的 rtt 会引入较大的通话延时。</para><para>由于数据上下行共享一条网络连接，所以 local 和 remote 的 rtt 相同。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.systemCpu">
            <summary>
当前系统的 CPU 使用率（％）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.appCpu">
            <summary>
当前 App 的 CPU 使用率（％）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.downLoss">
            <summary>
S -&gt; C 下行丢包率（％），
该值越小越好，例如，丢包率为0表示网络很好，
丢包率为30@%则意味着 SDK 向服务器发送的数据包中会有30@%丢失在下行传输中。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCStatistics.upLoss">
            <summary>
C -&gt; S 上行丢包率（％），
<para>
该值越小越好，例如，丢包率为0表示网络很好，
丢包率为30@%则意味着 SDK 向服务器发送的数据包中会有30@%丢失在上行传输中。
</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCStatistics">
            <summary>
统计数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.streamType">
            <summary>
流类型（大画面 | 小画面 | 辅路画面）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.audioBitrate">
            <summary>
音频码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.audioSampleRate">
            <summary>
音频采样率（Hz）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.videoBitrate">
            <summary>
视频码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.frameRate">
            <summary>
接收帧率（fps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.height">
            <summary>
视频高度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.width">
            <summary>
视频宽度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.finalLoss">
            <summary>
该线路的总丢包率（％）

<para>这个值越小越好，例如，丢包率为0表示网络很好。</para><para>丢包率是该线路的 userId 从上行到服务器再到下行的总丢包率。</para><para>如果 downLoss 为0，但是 finalLoss 不为0，说明该 userId 上行时出现了无法恢复的丢包。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRemoteStatistics.userId">
            <summary>
用户 ID，指定是哪个用户的视频流
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCRemoteStatistics">
            <summary>
远端成员的音视频统计信息
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.streamType">
            <summary>
流类型（大画面 | 小画面 | 辅路画面）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.audioBitrate">
            <summary>
音频发送码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.audioSampleRate">
            <summary>
音频采样率（Hz）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.videoBitrate">
            <summary>
视频发送码率（Kbps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.frameRate">
            <summary>
帧率（fps）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.height">
            <summary>
视频高度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLocalStatistics.width">
            <summary>
视频宽度
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCLocalStatistics">
@addtogroup TRTCCloudDef_csharp
@{
<summary>
自己本地的音视频统计信息
</summary></member>
        <member name="F:ManageLiteAV.TRTCRenderParams.mirrorType">
            <summary>
视频画面镜像模式，默认值为 TRTCVideoMirrorType_Disable
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRenderParams.fillMode">
            <summary>
视频画面填充模式，默认值为 TRTCVideoFillMode_Fit
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRenderParams.rotation">
            <summary>
视频画面旋转方向，默认值为 TRTCVideoRotation0
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCRenderParams">
            <summary>
6.16 画面渲染参数

<para>您可以通过设置此参数来控制画面的旋转、填充、镜像模式</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSwitchRoomConfig.privateMapKey">
            <summary>
【字段含义】房间签名 [选填]，当您希望某个房间只能让特定的 userId 进入时，需要使用 privateMapKey 进行权限保护。
【推荐取值】仅建议有高级别安全需求的客户使用，更多详情请参见 [进房权限保护](https://cloud.tencent.com/document/product/647/32240)。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSwitchRoomConfig.userSig">
            <summary>
【字段含义】用户签名 [选填]，当前 userId 对应的验证签名，相当于登录密码。不填时，SDK 会继续使用旧的 userSig，
         但用户必须保证旧的 userSig 仍在有效期内，否则会造成进房失败等后果。
【推荐取值】具体计算方法请参见 [如何计算UserSig](https://cloud.tencent.com/document/product/647/17275)。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSwitchRoomConfig.strRoomId">
            <summary>
【字段含义】字符串房间号码 [选填]，在同一个房间内的用户可以看到彼此并进行视频通话。
【特别说明】roomId 和 strRoomId 必须并且只能填一个。若两者都填，则优先选择 roomId。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSwitchRoomConfig.roomId">
            <summary>
【字段含义】数字房间号码 [选填]，在同一个房间内的用户可以看到彼此并进行视频通话。
【推荐取值】取值范围：1 - 4294967294。
【特别说明】roomId 和 strRoomId 必须并且只能填一个。若两者都填，则优先选择 roomId。
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCSwitchRoomConfig">
            <summary>
6.15 切换房间参数
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.volume">
            <summary>
【字段含义】音效音量
【推荐取值】取值范围为0 - 100；默认值：100
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.publish">
            <summary>
【字段含义】音效是否上行
【推荐取值】YES：音效在本地播放的同时，会上行至云端，因此远端用户也能听到该音效；NO：音效不会上行
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.loopCount">
            <summary>
【字段含义】循环播放次数
【推荐取值】取值范围为0 - 任意正整数，默认值：0。0表示播放音效一次；1表示播放音效两次；以此类推
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.path">
            <summary>
【字段含义】音效路径
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioEffectParam.effectId">
            <summary>
【字段含义】音效 ID
【特别说明】SDK 允许播放多路音效，因此需要音效 ID 进行标记，用于控制音效的开始、停止、音量等
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioEffectParam">
            <summary>
6.14 音效播放
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioRecordingParams.filePath">
            <summary>
【字段含义】文件路径（必填），录音文件的保存路径。该路径需要用户自行指定，请确保路径存在且可写。
【特别说明】该路径需精确到文件名及格式后缀，格式后缀决定录音文件的格式，目前支持的格式有 PCM、WAV 和 AAC。
          例如，指定路径为 path/to/audio.aac，则会生成一个 AAC 格式的文件。
          请指定一个有读写权限的合法路径，否则录音文件无法生成。
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioRecordingParams">
            <summary>
6.13 录音参数

<para>请正确填写参数，确保录音文件顺利生成。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCPublishCDNParam.url">
            <summary>
旁路转推的 URL
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCPublishCDNParam.bizId">
            <summary>
腾讯云直播 bizid，请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】，在“直播信息”中获取
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCPublishCDNParam.appId">
            <summary>
腾讯云 AppID，请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】，在“直播信息”中获取
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCPublishCDNParam">
            <summary>
6.12 CDN 旁路推流参数 
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.mixUsersArraySize">
            <summary>
【字段含义】 数组 mixUsersArray 的大小
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.mixUsersArray">
            <summary>
【字段含义】每一路子画面的位置信息
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.audioChannels">
            <summary>
【字段含义】最终转码后的音频声道数
<para>【推荐取值】默认值：1。取值范围为 [1,2] 中的整型。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.audioBitrate">
            <summary>
【字段含义】最终转码后的音频码率。
<para>【推荐取值】默认值：64kbps，取值范围是 [32，192]。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.audioSampleRate">
            <summary>
【字段含义】最终转码后的音频采样率。
<para>【推荐取值】默认值：48000Hz。支持12000HZ、16000HZ、22050HZ、24000HZ、32000HZ、44100HZ、48000HZ。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.backgroundImage">
            <summary>
【字段含义】混合后画面的背景图。
<para>【推荐取值】默认值：null，即不设置背景图</para><para>【特别说明】背景图需要您事先在 “[控制台](https://console.cloud.tencent.com/trtc) =&gt; 应用管理 =&gt; 功能配置 =&gt; 素材管理” 中上传，</para><para>           上传成功后可以获得对应的“图片ID”，然后将“图片ID”转换成字符串类型并设置到 backgroundImage 里即可。</para><para>           例如：假设“图片ID” 为 63，可以设置 backgroundImage = "63";</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.backgroundColor">
            <summary>
【字段含义】混流背景颜色，格式为 0xRRGGBB。
<para>【推荐取值】默认值：0x000000，黑色。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.videoGOP">
            <summary>
【字段含义】最终转码后的视频分辨率的关键帧间隔（又称为 GOP），单位秒
<para>【推荐取值】默认值：2，单位为秒，取值范围是 [1,8]。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.videoFramerate">
            <summary>
【字段含义】最终转码后的视频分辨率的帧率（FPS）
<para>【推荐取值】默认值：15fps，取值范围是 (0,30]。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.videoBitrate">
            <summary>
【字段含义】最终转码后的视频分辨率的码率（kbps）
<para>【推荐取值】如果填0，后台会根据videoWidth和videoHeight来估算码率，您也可以参考枚举定义TRTCVideoResolution_640_480的注释。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.videoHeight">
            <summary>
【字段含义】最终转码后的视频分辨率的高度（px）
<para>【推荐取值】推荐值：640px ，如果你是纯音频推流，请将 width × height 设为 0px × 0px，否则混流后会携带一条画布背景的视频流。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.videoWidth">
            <summary>
【字段含义】最终转码后的视频分辨率的宽度（px）
<para>【推荐取值】推荐值：360px ，如果你是纯音频推流，请将 width × height 设为 0px × 0px，否则混流后会携带一条画布背景的视频流。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.bizId">
            <summary>
【字段含义】腾讯云直播 bizid
<para>【推荐取值】请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】后，在“直播信息”中获取</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.appId">
            <summary>
【字段含义】腾讯云直播 AppID
<para>【推荐取值】请在 [实时音视频控制台](https://console.cloud.tencent.com/rav) 选择已经创建的应用，单击【帐号信息】后，在“直播信息”中获取</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfig.mode">
            <summary>
【字段含义】转码 config 模式
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCTranscodingConfig">
            <summary>
6.11 云端混流（转码）配置

<para>包括最终编码质量和各路画面的摆放位置</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCTranscodingConfigMode">
            <summary>
6.10 混流参数配置模式

<para>目前暂仅支持手动配置这一种模式，即需要指定 TRTCTranscodingConfig 的全部参数。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Template_ScreenSharing">
            <summary>
                <para>屏幕分享模式，适用于在线教育场景等以屏幕分享为主的应用场景，仅支持 Windows 和 Mac 两个平台的 SDK。</para>
                <para>SDK 会先根据您（通过 videoWidth 和 videoHeight 参数）设置的目标分辨率构建一张画布，</para>
                <para>当老师未开启屏幕分享时，SDK 会将摄像头画面等比例拉伸绘制到该画布上；当老师开启屏幕分享之后，SDK 会将屏幕分享画面绘制到同样的画布上。</para>
                <para>这样操作的目的是为了确保混流模块的输出分辨率一致，避免课程回放和网页观看的花屏问题（网页播放器不支持可变分辨率）。</para>
                <para>由于教学模式下的视频内容以屏幕分享为主，因此同时传输摄像头画面和屏幕分享画面是非常浪费带宽的。</para>
                <para>推荐的做法是直接将摄像头画面通过 setLocalVideoRenderCallback 接口自定义绘制到当前屏幕上。</para>
                <para>在该模式下，您无需设置 TRTCTranscodingConfig 中的 mixUsers 参数，SDK 不会混合学生的画面，以免干扰屏幕分享的效果。</para>
                <para>您可以将 TRTCTranscodingConfig 中的 width × height 设为 0px × 0px，SDK 会自动根据用户当前屏幕的宽高比计算出一个合适的分辨率：</para>
                <para> - 如果老师当前屏幕宽度 &lt;= 1920px，SDK 会使用老师当前屏幕的实际分辨率。</para>
                <para> - 如果老师当前屏幕宽度 &gt; 1920px，SDK 会根据当前屏幕宽高比，选择 1920x1080(16:9)、1920x1200(16:10)、1920x1440(4:3) 三种分辨率中的一种。</para>
            </summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Template_PresetLayout">
            <summary>
                <para>预排版模式，通过占位符提前对各路画面进行排布</para>
                <para>此模式下，您依然需要设置 mixUsers 参数，但可以将 userId 设置为占位符，可选的占位符有：</para>
                <para> - "$PLACE_HOLDER_REMOTE$"     :  指代远程用户的画面，可以设置多个。</para>
                <para> - "$PLACE_HOLDER_LOCAL_MAIN$" :  指代本地摄像头画面，只允许设置一个。</para>
                <para> - "$PLACE_HOLDER_LOCAL_SUB$"  :  指代本地屏幕分享画面，只允许设置一个。</para>
                <para>但是您可以不需要监听 TRTCCloudDelegate 中的 onUserVideoAvailable() 和 onUserAudioAvailable() 回调进行实时调整，</para>
                <para>只需要在进房成功后调用一次 setMixTranscodingConfig() 即可，之后 SDK 会自动将真实的 userId 补位到您设置的占位符上。</para>
            </summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Template_PureAudio">
            <summary>
                <para>纯音频模式，适用于语音通话（AudioCall）和语音聊天室（VoiceChatRoom）等纯音频场景。</para>
                <para>只需要在进房后通过 setMixTranscodingConfig() 接口设置一次，之后 SDK 就会自动把房间内所有上麦用户的声音混流到当前用户的直播流上。</para>
                <para>此模式下，您无需设置 TRTCTranscodingConfig 中的 mixUsers 参数，只需设置 audioSampleRate、audioBitrate 和 audioChannels 等参数。</para>
            </summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Manual">
            <summary>
                <para>全手动模式，灵活性最高，可以自由组合出各种混流方案，但易用性最差。</para>
                <para>此模式下，您需要填写 TRTCTranscodingConfig 中的所有参数，并需要监听 TRTCCloudDelegate 中的 onUserVideoAvailable() 和 onUserAudioAvailable() 回调，</para>
                <para>以便根据当前房间中各个上麦用户的音视频状态不断地调整 mixUsers 参数，否则会导致混流失败。</para>
            </summary>
        </member>
        <member name="F:ManageLiteAV.TRTCTranscodingConfigMode.TRTCTranscodingConfigMode_Unknown">
            <summary>
非法值
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.streamType">
            <summary>
参与混合的是主路画面（TRTCVideoStreamTypeBig）或屏幕分享（TRTCVideoStreamTypeSub）画面
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.pureAudio">
            <summary>
是否纯音频
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.zOrder">
            <summary>
图层层次（1 - 15）不可重复
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.rect">
            <summary>
图层位置坐标以及大小，左上角为坐标原点(0,0) （绝对像素值）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.roomId">
            <summary>
参与混流的 roomId，跨房流传入的实际 roomId，当前房间流传入 roomId = NULL
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCMixUser.userId">
            <summary>
参与混流的 userId
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCMixUser">
            <summary>
6.9 云端混流中每一路子画面的位置信息

<para>TRTCMixUser 用于指定每一路（即每一个 userId）视频画面的具体摆放位置</para></summary>
        </member>
        <member name="F:ManageLiteAV.RECT.bottom">
            <summary>
下坐标点
</summary>
        </member>
        <member name="F:ManageLiteAV.RECT.right">
            <summary>
右坐标点
</summary>
        </member>
        <member name="F:ManageLiteAV.RECT.top">
            <summary>
上坐标点
</summary>
        </member>
        <member name="F:ManageLiteAV.RECT.left">
            <summary>
左坐标点
</summary>
        </member>
        <member name="T:ManageLiteAV.RECT">
            <summary>
记录矩形的四个点坐标
<para>为了兼容 c++ 使用的 RECT 类型</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.rtt">
            <summary>
延迟（毫秒），指当前设备到腾讯云服务器的一次网络往返时间，该值越小越好，正常数值范围是10ms - 100ms
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.downLostRate">
            <summary>
下行丢包率，范围是0 - 1.0，例如，0.2表示每从服务器收取10个数据包可能会在中途丢失2个。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.upLostRate">
            <summary>
上行丢包率，范围是0 - 1.0，例如，0.3表示每向服务器发送10个数据包可能会在中途丢失3个。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.quality">
            <summary>
网络质量，内部通过评估算法测算出的网络质量，loss 越低，rtt 越小，得分便越高
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCSpeedTestResult.ip">
            <summary>
服务器 IP 地址
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCSpeedTestResult">
            <summary>
6.8 网络测速结果
<para>
您可以在用户进入房间前通过 TRTCCloud 的 startSpeedTest 接口进行测速 （注意：请不要在通话中调用），
测速结果会每2 - 3秒钟返回一次，每次返回一个 IP 地址的测试结果。
</para></summary>
            <remarks>
- quality 是内部通过评估算法测算出的网络质量，loss 越低，rtt 越小，得分便越高。
<para>- upLostRate 是指上行丢包率。例如，0.3表示每向服务器发送10个数据包可能会在中途丢失3个。</para><para>- downLostRate 是指下行丢包率。例如，0.2表示每从服务器收取10个数据包可能会在中途丢失2个。</para><para>- rtt 是指当前设备到腾讯云服务器的一次网络往返时间，该值越小越好，正常数值范围是10ms - 100ms。</para></remarks>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.timestamp">
            <summary>
时间戳，单位ms
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.channel">
            <summary>
声道数
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.sampleRate">
            <summary>
采样率
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.length">
            <summary>
音频数据的长度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.data">
            <summary>
音频数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrame.audioFormat">
            <summary>
音频帧的格式
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioFrame">
            <summary>
6.7 音频帧数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.rotation">
            <summary>
画面旋转角度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.timestamp">
            <summary>
时间戳，单位ms
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.height">
            <summary>
画面的高度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.width">
            <summary>
画面的宽度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.length">
            <summary>
视频数据的长度，单位是字节，对于i420而言， length = width * height * 3 / 2，对于BGRA32而言， length = width * height * 4
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.textureId">
            <summary>
视频纹理ID，字段bufferType是LiteAVVideoBufferType_Texture时生效
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.data">
            <summary>
视频数据，字段bufferType是LiteAVVideoBufferType_Buffer时生效
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.bufferType">
            <summary>
视频数据结构类型
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFrame.videoFormat">
            <summary>
视频帧的格式
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoFrame">
            <summary>
6.6 视频帧数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVolumeInfo.volume">
            <summary>
说话者的音量， 取值范围0 - 100              
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVolumeInfo.userId">
            <summary>
说话者的 userId，字符编码格式为 UTF-8
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVolumeInfo">
            <summary>
6.5 音量大小

<para>表示语音音量的评估大小，通过这个数值，您可以在 UI 界面上用图标表征 userId 是否有在说话。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQualityInfo.quality">
            <summary>
视频质量
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQualityInfo.userId">
            <summary>
用户标识
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCQualityInfo">
            <summary>
6.4 视频质量

<para>表示视频质量的好坏，通过这个数值，您可以在 UI 界面上用图标表征 userId 的通话线路质量</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCNetworkQosParam.controlMode">
            <summary>
【字段含义】视频分辨率（云端控制 - 客户端控制）
<para>【推荐取值】云端控制</para><para>【特别说明】</para><para>   - Server 模式（默认）：云端控制模式，若无特殊原因，请直接使用该模式</para><para>   - Client 模式：客户端控制模式，用于 SDK 开发内部调试，客户请勿使用</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCNetworkQosParam.preference">
            <summary>
【字段含义】弱网下是“保清晰”或“保流畅”
<para>【特别说明】</para><para>   - 弱网下保流畅：在遭遇弱网环境时，画面会变得模糊，且出现较多马赛克，但可以保持流畅不卡顿</para><para>   - 弱网下保清晰：在遭遇弱网环境时，画面会尽可能保持清晰，但可能容易出现卡顿</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCNetworkQosParam">
            <summary>
6.3 网络流控相关参数

<para>网络流控相关参数，该设置决定了SDK在各种网络环境下的调控方向（例如弱网下是“保清晰”或“保流畅”）</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.enableAdjustRes">
            <summary>
【字段含义】是否允许调整分辨率
<para>【推荐取值】</para><para>   - 手机直播建议选择 NO。</para><para>   - 视频通话模式，若更关注流畅性，建议选择 YES，此时若遇到带宽有限的弱网，SDK 会自动降低分辨率以保障更好的流畅度（仅针对 TRTCVideoStreamTypeBig 生效）。</para><para>   - 默认值：NO。</para><para>【特别说明】若有录制需求，选择 YES 时，请确保通话过程中，调整分辨率不会影响您的录制效果。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.minVideoBitrate">
            <summary>
【字段含义】最低视频码率，SDK 会在网络不佳的情况下主动降低视频码率，最低会降至 minVideoBitrate 所设定的数值。
<para>【推荐取值】</para><para>     - 如果您追求“允许卡顿但要保持清晰”的效果，可以设置 minVideoBitrate 为 videoBitrate 的 60%；</para><para>     - 如果您追求“允许模糊但要保持流畅”的效果，可以设置 minVideoBitrate 为 200kbps；</para><para>     - 如果您将 videoBitrate 和 minVideoBitrate 设置为同一个值，等价于关闭 SDK 的自适应调节能力；</para><para>     - 默认值：0，此时最低码率由 SDK 根据分辨率情况，自动设置合适的数值。</para><para>【特别说明】</para><para>     - 当您把分辨率设置的比较高时，minVideoBitrate 不适合设置的太低，否则会出现画面模糊和大范围的马赛克宏块。</para><para>       比如把分辨率设置为 720p，把码率设置为 200kbps，那么编码出的画面将会出现大范围区域性马赛克。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.videoBitrate">
            <summary>
【字段含义】目标视频码率，SDK 会按照目标码率进行编码，只有在网络不佳的情况下才会主动降低视频码率。
<para>【推荐取值】请参考本 TRTCVideoResolution 在各档位注释的最佳码率，也可以在此基础上适当调高。</para><para>            比如 TRTCVideoResolution_1280_720 对应 1200kbps 的目标码率，您也可以设置为 1500kbps 用来获得更好的清晰度观感。</para><para>【特别说明】SDK 会努力按照 videoBitrate 指定的码率进行编码，只有在网络不佳的情况下才会主动降低视频码率，最低会降至 minVideoBitrate 所设定的数值。</para><para>            如果您追求“允许卡顿但要保持清晰”的效果，可以设置 minVideoBitrate 为 videoBitrate 的 60%；</para><para>            如果您追求“允许模糊但要保持流畅”的效果，可以设置 minVideoBitrate 为 200kbps；</para><para>            如果您将 videoBitrate 和 minVideoBitrate 设置为同一个值，等价于关闭 SDK 的自适应调节能力。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.videoFps">
            <summary>
【字段含义】视频采集帧率
<para>【推荐取值】15fps 或 20fps。5fps以下，卡顿感明显。10fps以下，会有轻微卡顿感。20fps以上，则过于浪费（电影的帧率为24fps）。</para><para>【特别说明】很多 Android 手机的前置摄像头并不支持15fps以上的采集帧率，部分过于突出美颜功能的 Android 手机前置摄像头的采集帧率可能低于10fps。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.resMode">
            <summary>
【字段含义】分辨率模式（横屏分辨率 - 竖屏分辨率）
<para>【推荐取值】手机直播建议选择 Portrait，Window 和 Mac 建议选择 Landscape。</para><para>【特别说明】如果 videoResolution 指定分辨率 640 × 360，resMode 指定模式为 Portrait，则最终编码出的分辨率为360 × 640。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoEncParam.videoResolution">
            <summary>
【字段含义】 视频分辨率
<para>【推荐取值】</para><para>  - 视频通话建议选择360 × 640及以下分辨率，resMode 选择 Portrait。</para><para>  - 手机直播建议选择540 × 960，resMode 选择 Portrait。</para><para>  - Window 和 iMac 建议选择640 × 360 及以上分辨率，resMode 选择 Landscape。</para><para>【特别说明】 TRTCVideoResolution 默认只有横屏模式的分辨率，例如640 × 360。</para><para>            如需使用竖屏分辨率，请指定 resMode 为 Portrait，例如640 × 360结合 Portrait 则为360 × 640。</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoEncParam">
            <summary>
6.2 视频编码参数

<para>该设置决定了远端用户看到的画面质量（同时也是云端录制出的视频文件的画面质量）。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.businessInfo">
            <summary>
【字段含义】业务数据 [非必填]，部分高级特性才需要使用该字段。
<para>【推荐取值】不建议使用</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.privateMapKey">
            <summary>
【字段含义】房间签名 [非必填]，当您希望某个房间只能让特定的 userId 进入时，需要使用 privateMapKey 进行权限保护。
<para>【推荐取值】仅建议有高级别安全需求的客户使用，更多详情请参见 [进房权限保护](https://cloud.tencent.com/document/product/647/32240)。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.userDefineRecordId">
            <summary>
【字段含义】设置云端录制完成后的回调消息中的 "userdefinerecordid"  字段内容，便于您更方便的识别录制回调。
<para>【推荐取值】限制长度为64字节，只允许包含大小写英文字母（a-zA-Z）、数字（0-9）及下划线和连词符。</para><para>【参考文档】[云端录制](https://cloud.tencent.com/document/product/647/16823)。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.streamId">
            <summary>
【字段含义】绑定腾讯云直播 CDN 流 ID[非必填]，设置之后，您就可以在腾讯云直播 CDN 上通过标准直播方案（FLV或HLS）播放该用户的音视频流。
<para>【推荐取值】限制长度为64字节，可以不填写，一种推荐的方案是使用 “sdkappid_roomid_userid_main” 作为 streamid，这样比较好辨认且不会在您的多个应用中发生冲突。</para><para>【特殊说明】要使用腾讯云直播 CDN，您需要先在[控制台](https://console.cloud.tencent.com/trtc/) 中的功能配置页开启“启用旁路推流”开关。</para><para>【参考文档】[CDN 旁路直播](https://cloud.tencent.com/document/product/647/16826)。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.role">
            <summary>
【字段含义】直播场景下的角色，仅适用于直播场景（TRTCAppSceneLIVE），视频通话场景下指定无效。
<para>【推荐取值】默认值：主播（TRTCRoleAnchor）</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.roomId">
            <summary>
【字段含义】房间号码 [必填]，在同一个房间内的用户可以看到彼此并进行视频通话。
<para>【推荐取值】您可以自定义设置该参数值，但不可重复。如果您的用户帐号 ID （userId）为数字类型，可直接使用创建者的用户 ID 作为 roomId。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.userSig">
            <summary>
【字段含义】用户签名 [必填]，当前 userId 对应的验证签名，相当于登录密码。
<para>【推荐取值】具体计算方法请参见 [如何计算UserSig](https://cloud.tencent.com/document/product/647/17275)。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.userId">
            <summary>
【字段含义】用户标识 [必填]，当前用户的 userId，相当于用户名，使用 UTF-8 编码。
<para>【推荐取值】如果一个用户在您的帐号系统中的 ID 为“abc”，则 userId 即可设置为“abc”。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCParams.sdkAppId">
            <summary>
【字段含义】应用标识 [必填]，腾讯视频云基于 sdkAppId 进行计费统计。
<para>在 [实时音视频控制台](https://console.cloud.tencent.com/rav/) 创建应用后可在帐号信息页面中得到该 ID。</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCParams">
            <summary>
6.1 进房相关参数

<para>只有该参数填写正确，才能顺利调用 enterRoom 进入 roomId 所指定的音视频房间。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCScreenCaptureSourceList.release">
            <summary>
遍历完窗口列表后，调用release释放资源。
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCScreenCaptureSourceList.getSourceInfo(System.UInt32)">
            <returns>窗口信息</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCScreenCaptureSourceList.getCount">
            <returns>窗口个数</returns>
        </member>
        <member name="T:ManageLiteAV.ITRTCScreenCaptureSourceList">
            <summary>
5.6 屏幕窗口列表
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureProperty.highLightWidth">
            <summary>
指定高亮边框的宽度，传入0时采用默认描边宽度，默认宽度为 5，最大值为 50
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureProperty.highLightColor">
            <summary>
指定高亮边框颜色，RGB格式，传入0时采用默认颜色，默认颜色为 #8CBF26
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureProperty.enableHighPerformance">
            <summary>
是否开启高性能模式（只会在分享屏幕时会生效），开启后屏幕采集性能最佳，但无法过滤远端的高亮边框，默认为 true
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureProperty.enableHighLight">
            <summary>
是否高亮正在共享的窗口，默认为 true
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureProperty.enableCaptureMouse">
            <summary>
是否采集目标内容时顺带采集鼠标，默认为 true
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCScreenCaptureProperty">
            <summary>
5.5 屏幕采集属性
</summary>
        </member>
        <member name="F:ManageLiteAV.SIZE.cy">
            <summary>
高
</summary>
        </member>
        <member name="F:ManageLiteAV.SIZE.cx">
            <summary>
宽
</summary>
        </member>
        <member name="T:ManageLiteAV.SIZE">
            <summary>
5.4 记录 buffer 的长宽
<para>为了兼容 c++ 使用的 SIZE 类型</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.iconBGRA">
            <summary>
图标内容
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.thumbBGRA">
            <summary>
缩略图内容
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.sourceName">
            <summary>
采集源名称，UTF8编码
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.sourceId">
            <summary>
采集源ID；对于窗口，该字段指示窗口句柄；对于屏幕，该字段指示屏幕ID
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceInfo.type">
            <summary>
采集源类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCScreenCaptureSourceInfo">
            <summary>
5.3 屏幕采集信息
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.height">
            <summary>
图高
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.width">
            <summary>
图宽
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.length">
            <summary>
图缓存大小
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCImageBuffer.buffer">
            <summary>
图内容
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCImageBuffer">
            <summary>
5.2 图缓存
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCScreenCaptureSourceType">
            <summary>
5.1 屏幕分享目标信息

<para>您可以通过 getScreenCaptureSources() 枚举可共享的窗口列表，列表通过 ITRTCScreenCaptureSourceList 返回</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceType.TRTCScreenCaptureSourceTypeScreen">
            <summary>
该分享目标是整个Windows桌面
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCScreenCaptureSourceType.TRTCScreenCaptureSourceTypeWindow">
            <summary>
该分享目标是某一个Windows窗口
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCWaterMarkSrcType">
            <summary>
4.3 水印图片的源类型
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCWaterMarkSrcType.TRTCWaterMarkSrcTypeRGBA32">
            <summary>
RGBA32格式内存块
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCWaterMarkSrcType.TRTCWaterMarkSrcTypeBGRA32">
            <summary>
BGRA32格式内存块
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCWaterMarkSrcType.TRTCWaterMarkSrcTypeFile">
            <summary>
图片文件路径，支持 BMP、GIF、JPEG、PNG、TIFF、Exif、WMF 和 EMF 文件格式
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCDeviceState">
            <summary>
4.2 设备操作
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceState.TRTCDeviceStateActive">
            <summary>
设备已启用
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceState.TRTCDeviceStateRemove">
            <summary>
移除设备
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceState.TRTCDeviceStateAdd">
            <summary>
添加设备
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCLogLevel">
            <summary>
4.1 Log 级别
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelNone">
            <summary>
不输出任何 SDK Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelFatal">
            <summary>
只输出 FATAL 级别的 Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelError">
            <summary>
只输出ERROR 和 FATAL 级别的 Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelWarn">
            <summary>
只输出 WARNING，ERROR 和 FATAL 级别的 Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelInfo">
            <summary>
输出 INFO，WARNING，ERROR 和 FATAL 级别的 Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelDebug">
            <summary>
输出 DEBUG，INFO，WARNING，ERROR 和 FATAL 级别的 Log
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCLogLevel.TRTCLogLevelVerbose">
            <summary>
输出所有级别的 Log
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioQuality">
            <summary>
3.2 声音音质
</summary>
            <remarks>
音频音质用来衡量声音的保真程度，TRTCAudioQualitySpeech 适用于通话场景，TRTCAudioQualityMusic 适用于高音质音乐场景。
</remarks>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioQuality.TRTCAudioQualityMusic">
            <summary>
高音质：采样率：48k；双声道 + 全频带；音频裸码率：128kbps；适合需要高保真传输音乐的场景，比如K歌、音乐直播等。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioQuality.TRTCAudioQualityDefault">
            <summary>
默认音质：采样率：48k；单声道；音频裸码率：50kbps；SDK 默认的音频质量，如无特殊需求推荐选择之。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioQuality.TRTCAudioQualitySpeech">
            <summary>
流畅音质：采样率：16k；单声道；音频裸码率：16kbps；适合语音通话为主的场景，比如在线会议，语音通话。
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAudioFrameFormat">
            <summary>
3.1 音频帧的格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAudioFrameFormat.TRTCAudioFrameFormatPCM">
            <summary>
PCM，每个采样点占16bit数据量。
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoQosPreference">
            <summary>
2.4 画质偏好

<para>指当 TRTC SDK 在遇到弱网络环境时，您期望“保清晰”或“保流畅”：</para><para>- Smooth：弱网下保流畅。即在遭遇弱网环境时首先确保声音的流畅和优先发送，画面会变得模糊且会有较多马赛克，但可以保持流畅不卡顿。</para><para>- Clear：弱网下保清晰。即在遭遇弱网环境时，画面会尽可能保持清晰，但可能会更容易出现卡顿。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoQosPreference.TRTCVideoQosPreferenceClear">
            <summary>
弱网下保清晰
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoQosPreference.TRTCVideoQosPreferenceSmooth">
            <summary>
弱网下保流畅
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCQosControlMode">
            <summary>
2.3 流控模式

<para>TRTC SDK 内部需要时刻根据网络情况调整内部的编解码器和网络模块，以便能够对网络的变化做出反应。</para><para>为了支持快速算法升级，SDK 内部设置了两种不同的流控模式：</para><para>- ModeServer： 云端控制，默认模式，推荐选择。</para><para>- ModeClient： 本地控制，用于 SDK 开发内部调试，客户请勿使用。</para></summary>
            <remarks>
推荐您使用云端控制，这样每当我们升级 Qos 算法时，您无需升级 SDK 即可体验更好的效果。
</remarks>
        </member>
        <member name="F:ManageLiteAV.TRTCQosControlMode.TRTCQosControlModeServer">
            <summary>
云端控制 （默认）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQosControlMode.TRTCQosControlModeClient">
            <summary>
客户端控制（用于 SDK 开发内部调试，客户请勿使用）
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCRoleType">
            <summary>
2.2 角色，仅适用于直播场景（TRTCAppSceneLIVE 和 TRTCAppSceneVoiceChatRoom）

<para>在直播场景中，多数用户仅为观众，个别用户是主播，这种角色区分有利于 TRTC 进行更好的定向优化。</para><para>- Anchor：主播，可以上行视频和音频，一个房间里最多支持50个主播同时上行音视频。</para><para>- Audience：观众，只能观看，不能上行视频和音频，一个房间里的观众人数没有上限。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRoleType.TRTCRoleAudience">
            <summary>
观众
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCRoleType.TRTCRoleAnchor">
            <summary>
主播
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCAppScene">
            <summary>
2.1 应用场景

<para>TRTC 可用于视频会议和在线直播等多种应用场景，针对不同的应用场景，TRTC SDK 的内部会进行不同的优化配置：</para><para>- TRTCAppSceneVideoCall    ：视频通话场景，适合[1对1视频通话]、[300人视频会议]、[在线问诊]、[视频聊天]、[远程面试]等。</para><para>- TRTCAppSceneLIVE         ：视频互动直播，适合[视频低延时直播]、[十万人互动课堂]、[视频直播 PK]、[视频相亲房]、[互动课堂]、[远程培训]、[超大型会议]等。</para><para>- TRTCAppSceneAudioCall    ：语音通话场景，适合[1对1语音通话]、[300人语音会议]、[语音聊天]、[语音会议]、[在线狼人杀]等。</para><para>- TRTCAppSceneVoiceChatRoom：语音互动直播，适合：[语音低延时直播]、[语音直播连麦]、[语聊房]、[K 歌房]、[FM 电台]等。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAppScene.TRTCAppSceneVoiceChatRoom">
            <summary>
语音互动直播，支持平滑上下麦，切换过程无需等待，主播延时小于300ms；支持十万级别观众同时播放，播放延时低至1000ms。
<para>适合：[语音低延时直播]、[语音直播连麦]、[语聊房]、[K 歌房]、[FM 电台]等。</para><para>注意：此场景下，您必须通过 TRTCParams 中的 role 字段指定当前用户的角色。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAppScene.TRTCAppSceneAudioCall">
            <summary>
语音通话场景，支持 48kHz，支持双声道。单个房间最多支持300人同时在线，最高支持50人同时发言。
<para>适合：[1对1语音通话]、[300人语音会议]、[语音聊天]、[语音会议]、[在线狼人杀]等。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAppScene.TRTCAppSceneLIVE">
            <summary>
视频互动直播，支持平滑上下麦，切换过程无需等待，主播延时小于300ms；支持十万级别观众同时播放，播放延时低至1000ms。
<para>适合：[视频低延时直播]、[十万人互动课堂]、[视频直播 PK]、[视频相亲房]、[互动课堂]、[远程培训]、[超大型会议]等。</para><para>注意：此场景下，您必须通过 TRTCParams 中的 role 字段指定当前用户的角色。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCAppScene.TRTCAppSceneVideoCall">
            <summary>
视频通话场景，支持720P、1080P高清画质，单个房间最多支持300人同时在线，最高支持50人同时发言。
<para>适合：[1对1视频通话]、[300人视频会议]、[在线问诊]、[视频聊天]、[远程面试]等。</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoMirrorType">
            <summary>
1.10 画面渲染镜像类型

<para>TRTC 的画面镜像提供下列设置模式</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoMirrorType.TRTCVideoMirrorType_Disable">
            <summary>
所有画面均不镜像
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoMirrorType.TRTCVideoMirrorType_Enable">
            <summary>
所有画面均镜像
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoBufferType">
            <summary>
1.9 视频数据包装格式
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoBufferType.TRTCVideoBufferType_Texture">
            <summary>
纹理类型
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoBufferType.TRTCVideoBufferType_Buffer">
            <summary>
二进制Buffer类型
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoBufferType.TRTCVideoBufferType_Unknown">
            <summary>
未知类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoPixelFormat">
            <summary>
1.8 视频像素格式

<para>TRTC SDK 提供针对视频的自定义采集和自定义渲染功能，在自定义采集功能中，您可以用下列枚举值描述您采集的视频像素格式。</para><para>在自定义渲染功能中，您可以指定您期望 SDK 回调的视频像素格式。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoPixelFormat.TRTCVideoPixelFormat_BGRA32">
            <summary>
BGRA32
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoPixelFormat.TRTCVideoPixelFormat_Texture_2D">
            <summary>
OpenGL 2D 纹理
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoPixelFormat.TRTCVideoPixelFormat_I420">
            <summary>
I420
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoPixelFormat.TRTCVideoPixelFormat_Unknown">
            <summary>
未知类型
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCBeautyStyle">
            <summary>
1.7 美颜（磨皮）算法

<para>TRTC SDK 内置多种不同的磨皮算法，您可以选择最适合您产品定位的方案。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCBeautyStyle.TRTCBeautyStyleNature">
            <summary>
自然，磨皮算法更多地保留了面部细节，主观感受上会更加自然。
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCBeautyStyle.TRTCBeautyStyleSmooth">
            <summary>
光滑，适用于美女秀场，效果比较明显。
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoRotation">
            <summary>
1.6 视频画面旋转方向

<para>TRTC SDK 提供了对本地和远程画面的旋转角度设置 API，下列的旋转角度都是指顺时针方向的。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation270">
            <summary>
顺时针旋转270度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation180">
            <summary>
顺时针旋转180度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation90">
            <summary>
顺时针旋转90度
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoRotation.TRTCVideoRotation0">
            <summary>
顺时针旋转0度
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoFillMode">
            <summary>
1.5 视频画面填充模式

<para>如果画面的显示分辨率不等于画面的原始分辨率，就需要您设置画面的填充模式:</para><para>- TRTCVideoFillMode_Fill，超出显示视窗的视频部分将被裁剪，画面显示可能不完整。</para><para>- TRTCVideoFillMode_Fit，图像长边填满屏幕，短边区域会被填充黑色，但画面的内容肯定是完整的。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFillMode.TRTCVideoFillMode_Fit">
            <summary>
图像长边填满屏幕，短边区域会被填充黑色
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoFillMode.TRTCVideoFillMode_Fill">
            <summary>
图像铺满屏幕，超出显示视窗的视频部分将被裁剪
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCQuality">
            <summary>
1.4 画质级别

<para>TRTC SDK 对画质定义了六种不同的级别，Excellent 表示最好，Down 表示不可用。</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Down">
            <summary>
不可用
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Vbad">
            <summary>
很差
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Bad">
            <summary>
差
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Poor">
            <summary>
一般
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Good">
            <summary>
好
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Excellent">
            <summary>
最好
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCQuality.TRTCQuality_Unknown">
            <summary>
未定义
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoStreamType">
            <summary>
1.3 视频流类型

<para>TRTC 内部有三种不同的音视频流，分别为：</para><para>-主画面：最常用的一条线路，一般用来传输摄像头的视频数据。</para><para>-小画面：跟主画面的内容相同，但是分辨率和码率更低。</para><para>-辅流画面：一般用于屏幕分享或远程播片（例如老师播放视频给学生观看）。</para></summary>
            <remarks>
- 如果主播的上行网络和性能比较好，则可以同时送出大小两路画面。
<para>- SDK 不支持单独开启小画面，小画面必须依附于主画面而存在。</para></remarks>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoStreamType.TRTCVideoStreamTypeSub">
            <summary>
辅流（屏幕分享）
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoStreamType.TRTCVideoStreamTypeSmall">
            <summary>
小画面视频流
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoStreamType.TRTCVideoStreamTypeBig">
            <summary>
主画面视频流
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoResolutionMode">
            <summary>
1.2 视频分辨率模式

<para>- 横屏分辨率：TRTCVideoResolution_640_360 + TRTCVideoResolutionModeLandscape = 640 × 360</para><para>- 竖屏分辨率：TRTCVideoResolution_640_360 + TRTCVideoResolutionModePortrait  = 360 × 640</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolutionMode.TRTCVideoResolutionModePortrait">
            <summary>
竖屏分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolutionMode.TRTCVideoResolutionModeLandscape">
            <summary>
横屏分辨率
</summary>
        </member>
        <member name="T:ManageLiteAV.TRTCVideoResolution">
@defgroup TRTCCloudDef_csharp 关键类型定义
腾讯云视频通话功能的关键类型定义
@{
<summary>
1.1 视频分辨率
</summary><remarks>
此处仅定义横屏分辨率，如需使用竖屏分辨率（例如360 × 640），需要同时指定 TRTCVideoResolutionMode 为 Portrait。
</remarks></member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_1920_1080">
            <summary>
屏幕分享 - 建议码率2000kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_1280_720">
            <summary>
摄像头采集 - 建议码率1200kbps
<para>屏幕分享 - 建议码率 低清：1000kbps 高清：1600kbps</para></summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_960_540">
            <summary>
建议码率850kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_640_360">
            <summary>
建议码率550kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_480_270">
            <summary>
建议码率350kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_320_180">
            <summary>
建议码率250kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_256_144">
            <summary>
建议码率200kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_160_90">
            <summary>
建议码率150kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_960_720">
            <summary>
建议码率1000kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_640_480">
            <summary>
建议码率600kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_480_360">
            <summary>
建议码率400kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_400_300">
            <summary>
建议码率300kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_320_240">
            <summary>
建议码率250kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_280_210">
            <summary>
建议码率200kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_240_180">
            <summary>
建议码率150kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_160_120">
            <summary>
建议码率100kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_480_480">
            <summary>
建议码率350kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_270_270">
            <summary>
建议码率200kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_160_160">
            <summary>
建议码率100kbps
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCVideoResolution.TRTCVideoResolution_120_120">
            <summary>
建议码率80kbps
</summary>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.stopSpeakerDeviceTest">
            <summary>
停止扬声器测试
</summary>
            <returns>0：操作成功 负数：失败</returns>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.startSpeakerDeviceTest(System.String)">
            <summary>
开始扬声器测试
<para>该方法播放指定的音频文件测试播放设备是否能正常工作。如果能听到声音，说明播放设备能正常工作。</para></summary>
            <param name="filePath">声音文件的路径</param>
            <returns>0：操作成功 负数：失败</returns>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.stopMicDeviceTest">
            <summary>
结束麦克风测试
</summary>
            <returns>0：操作成功 负数：失败</returns>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.startMicDeviceTest(System.UInt32)">
            <summary>
开始麦克风测试
</summary>
            <param name="interval">音量回调间隔</param>
            <returns>0：操作成功 负数：失败</returns>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.stopCameraDeviceTest">
            <summary>
结束摄像头测试
</summary>
            <returns>0：操作成功 负数：失败</returns>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.startCameraDeviceTest(System.IntPtr)">
            <summary>
开始摄像头测试
</summary>
            <param name="view">预览控件所在的父控件</param>
            <returns>0：操作成功 负数：失败</returns>
            <remarks>在测试过程中可以使用 setCurrentCameraDevice 接口切换摄像头。</remarks>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.getCurrentDeviceMute(ManageLiteAV.TRTCDeviceType)">
            <summary>
查询当前设备是否静音
</summary>
            <param name="type">设备类型，根据设备类型获取当前设备状态。详见TRTCDeviceType定义。</param>
            <returns>true : 当前设备已静音；false : 当前设备未静音</returns>
            <remarks>type 只支持 TRTCDeviceTypeMic、TRTCDeviceTypeSpeaker</remarks>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.setCurrentDeviceMute(ManageLiteAV.TRTCDeviceType,System.Boolean)">
            <summary>
设置当前设备是否静音
</summary>
            <param name="type">设备类型，根据设备类型设置当前设备状态。详见TRTCDeviceType定义。</param>
            <param name="mute">是否静音/禁画</param>
            <returns>0：操作成功 负数：失败</returns>
            <remarks>type 只支持 TRTCDeviceTypeMic、TRTCDeviceTypeSpeaker</remarks>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.getCurrentDeviceVolume(ManageLiteAV.TRTCDeviceType)">
            <summary>
获取当前设备的音量
</summary>
            <param name="type">设备类型，根据设备类型获取当前设备音量。详见TRTCDeviceType定义。</param>
            <remarks>type 只支持 TRTCDeviceTypeMic、TRTCDeviceTypeSpeaker</remarks>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.setCurrentDeviceVolume(ManageLiteAV.TRTCDeviceType,System.UInt32)">
            <summary>
设置当前设备的音量
</summary>
            <param name="type">设备类型，根据设备类型获取当前设备音量。详见TRTCDeviceType定义。</param>
            <param name="volume">音量大小</param>
            <returns>0：操作成功 负数：失败</returns>
            <remarks>type 只支持 TRTCDeviceTypeMic、TRTCDeviceTypeSpeaker</remarks>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.getCurrentDevice(ManageLiteAV.TRTCDeviceType)">
            <summary>
获取当前使用的设备
</summary>
            <param name="type">设备类型，根据设备类型获取当前设备信息。详见 TRTCDeviceType 定义</param>
            <returns>ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称</returns>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.setCurrentDevice(ManageLiteAV.TRTCDeviceType,System.String)">
            <summary>
指定当前设备
</summary>
            <param name="type">设备类型，根据设备类型指定当前设备。详见 TRTCDeviceType 定义。</param>
            <param name="deviceId">从 getDevicesList 中得到的设备 ID</param>
            <returns>0：操作成功 负数：失败</returns>
            <remarks>
type 只支持 TRTCDeviceTypeMic、TRTCDeviceTypeSpeaker、TRTCDeviceTypeCamera
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITXDeviceManager.getDevicesList(ManageLiteAV.TRTCDeviceType)">
            <summary>
获取设备列表
</summary>
            <param name="type">设备类型，指定需要获取哪种设备的列表。详见TRTCDeviceType定义。</param>
            <remarks>
- SDK 会维护 ITXDeviceCollection 对象的生命周期，使用完毕后请调用 release 方法释放资源。
- type 只支持 TRTCDeviceTypeMic、TRTCDeviceTypeSpeaker、TRTCDeviceTypeCamera
</remarks>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceInfo.release">
            <summary>
获取完设备信息后，调用release释放资源。
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceInfo.getDevicePID">
            <returns>设备PID，字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceInfo.getDeviceName">
            <returns>设备名称，字符编码格式是UTF-8</returns>
        </member>
        <member name="T:ManageLiteAV.ITRTCDeviceInfo">
            <summary>
设备Item信息
<para>【获取SDK当前使用设备信息 ITRTCDeviceInfo】</para><para>您可以通过 setCurrentCameraDevice()/getCurrentMicDevice()/getCurrentSpeakerDevice
获取当前使用设备。</para></summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.release">
            <summary>
遍历完设备后，调用release释放资源。
</summary>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.getDevicePID(System.UInt32)">
            <returns>设备PID，字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.getDeviceName(System.UInt32)">
            <returns>设备名称，字符编码格式是UTF-8</returns>
        </member>
        <member name="M:ManageLiteAV.ITRTCDeviceCollection.getCount">
            <returns>设备个数</returns>
        </member>
        <member name="T:ManageLiteAV.ITRTCDeviceCollection">
            <summary>
设备列表
<para>【获取SDK设备信息接口 ITRTCDeviceCollection】</para><para>您可以通过 getMicDevicesList()/getSpeakerDevicesList()/getMicDevicesList
枚举硬件设备列表，列表通过 ITRTCDeviceCollection 返回</para></summary>
        </member>
        <member name="T:ManageLiteAV.TRTCDeviceType">
@defgroup ITXDeviceManager_csharp ITXDeviceManager
腾讯云视频通话功能的设备管理接口类
@{
<summary>
设备类型
</summary></member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TXMediaDeviceTypeCamera">
            <summary>
摄像头
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TXMediaDeviceTypeSpeaker">
            <summary>
扬声器
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TXMediaDeviceTypeMic">
            <summary>
麦克风
</summary>
        </member>
        <member name="F:ManageLiteAV.TRTCDeviceType.TXMediaDeviceTypeUnknown">
            <summary>
未知设备
</summary>
        </member>
        <member name="M:trtc.ITRTCCloud.callExperimentalAPI(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
13.9. Call experimental APIs

</member>
        <member name="M:trtc.ITRTCCloud.showDebugView(System.Int32)">
13.7. Display dashboard

"Dashboard" is a semi-transparent floating layer for debugging information on top of the video rendering control. It is used to display audio/video information and event information to facilitate integration and debugging.
@param showType 0: does not display; 1: displays lite edition (only with audio/video information); 2: displays full edition (with audio/video information and event information).

</member>
        <member name="M:trtc.ITRTCCloud.setLogCallback(trtc.ITRTCLogCallback*)">
13.6. Set log callback

</member>
        <member name="M:trtc.ITRTCCloud.setLogDirPath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
13.5. Set local log storage path

You can use this API to change the default storage path of the SDK's local logs, which is as follows:
- Windows: C:/Users/[username]/AppData/Roaming/liteav/log, i.e., under `%appdata%/liteav/log`.
- iOS or macOS: under `sandbox Documents/log`.
- Android: under `/app directory/files/log/liteav/`.
@note Please be sure to call this API before all other APIs and make sure that the directory you specify exists and your application has read/write permissions of the directory.
@param path Log storage path

</member>
        <member name="M:trtc.ITRTCCloud.setLogCompressEnabled(System.Boolean)">
13.4. Enable/Disable local log compression

If compression is enabled, the log size will significantly reduce, but logs can be read only after being decompressed by the Python script provided by Tencent Cloud.
If compression is disabled, logs will be stored in plaintext and can be read directly in Notepad, but will take up more storage capacity.
@param enabled Specify whether to enable it, which is enabled by default

</member>
        <member name="M:trtc.ITRTCCloud.setConsoleEnabled(System.Boolean)">
13.3. Enable/Disable console log printing

@param enabled Specify whether to enable it, which is disabled by default

</member>
        <member name="M:trtc.ITRTCCloud.setLogLevel(trtc.TRTCLogLevel)">
13.2. Set log output level

@param level For more information, please see {@link TRTCLogLevel}. Default value: {@link TRTCLogLevelNone}

</member>
        <member name="M:trtc.ITRTCCloud.getSDKVersion">
@}
@name  Debugging APIs
@{
13.1. Get SDK version information

</member>
        <member name="M:trtc.ITRTCCloud.stopSpeedTest">
12.2. Stop network speed test

</member>
        <member name="M:trtc.ITRTCCloud.startSpeedTest(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name  Network test APIs
@{
12.1. Start network speed test (used before room entry)

As TRTC involves real-time audio/video transfer services very sensitive to the transfer latency, it has high requirements for network stability.
For most users, if their network environments are below TRTC's minimum requirements, direct room entry will cause a very poor user experience.
The recommended approach is to perform the network speed test before the user enters the room, so that a reminder can be displayed on the UI to prompt the user to switch to a better network (such as from Wi-Fi to 4G) first before room entry if the user's network is poor.
@note 
1. The speed test will consume a certain amount of traffic and generate a small amount of extra traffic fees as a result.
2. Please perform the speed test before room entry, because if performed after room entry, the test will affect the normal audio/video transfer, and its result will be inaccurate due to interference in the room.
@param sdkAppId Application ID. For more information, please see {@link TRTCParams}.
@param userId User ID. For more information, please see {@link TRTCParams}.
@param userSig User signature. For more information, please see {@link TRTCParams}.

</member>
        <member name="M:trtc.ITRTCCloud.sendSEIMsg(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)">
11.2. Use SEI channel to send custom message to all users in room 

This API allows you to use TRTC's SEI channel to broadcast custom data to other users in the current room for signaling transfer.
The header of a video frame has a header data block called SEI. This API works by embedding the custom signaling data you want to send in the SEI block and sending it together with the video frame.
Therefore, the SEI channel has a better compatibility than {@link sendCustomCmdMsg} as the signaling data can be transferred to the CSS CDN along with the video frame.
However, because the data block of the video frame header cannot be too large, we recommend you limit the size of the signaling data to only a few bytes when using this API.
The most common use is to embed the custom timestamp into video frames through this API so as to implement a perfect alignment between the message and video image (such as between the teaching material and video signal in the education scenario).
Other users in the room can receive the message through the `onRecvSEIMsg` callback in {@link TRTCCloudDelegate}.
@param data Data to be sent, which can be up to 1 KB (1,000 bytes)
@param repeatCount Data sending count
@return YES: the message is allowed and will be sent with subsequent video frames; NO: the message is not allowed to be sent
@note This API has the following restrictions:
1. The data will not be instantly sent after this API is called; instead, it will be inserted into the next video frame after the API call.
2. Up to 30 messages can be sent per second to all users in the room (this limit is shared with `sendCustomCmdMsg`).
3. Each packet can be up to 1 KB (this limit is shared with `sendCustomCmdMsg`). If a large amount of data is sent, the video bitrate will increase, which may reduce the video quality or even cause lagging.
4. Each client can send up to 8 KB of data in total per second (this limit is shared with `sendCustomCmdMsg`).
5. If multiple times of sending is required (i.e., `repeatCount` &gt; 1), the data will be inserted into subsequent `repeatCount` video frames in a row for sending, which will increase the video bitrate.
6. If `repeatCount` is greater than 1, the data will be sent for multiple times, and the same message may be received multiple times in the `onRecvSEIMsg` callback; therefore, deduplication is required.

</member>
        <member name="M:trtc.ITRTCCloud.sendCustomCmdMsg(System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Boolean,System.Boolean)">
@}
@name  Custom message sending APIs
@{
11.1. Use UDP channel to send custom message to all users in room 

This API allows you to use TRTC's UDP channel to broadcast custom data to other users in the current room for signaling transfer.
The UDP channel in TRTC was originally designed to transfer audio/video data. This API works by disguising the signaling data you want to send as audio/video data packets and sending them together with the audio/video data to be sent.
Other users in the room can receive the message through the `onRecvCustomCmdMsg` callback in {@link TRTCCloudDelegate}.
@param cmdID Message ID. Value range: 1–10
@param data Message to be sent. The maximum length of one single message is 1 KB.
@param reliable Whether reliable sending is enabled. Reliable sending can achieve a higher success rate but with a longer reception delay than unreliable sending.
@param ordered Whether orderly sending is enabled, i.e., whether the data packets should be received in the same order in which they are sent; if so, a certain delay will be caused.
@return true: sent the message successfully; false: failed to send the message.
@note 
1. Up to 30 messages can be sent per second to all users in the room (this is not supported for web and mini program currently).
2. A packet can contain up to 1 KB of data; if the threshold is exceeded, the packet is very likely to be discarded by the intermediate router or server.
3. A client can send up to 8 KB of data in total per second.
4. `reliable` and `ordered` must be set to the same value (`true` or `false`) and cannot be set to different values currently.
5. We strongly recommend you set different `cmdID` values for messages of different types. This can reduce message delay when orderly sending is required.

</member>
        <member name="M:trtc.ITRTCCloud.setAudioFrameCallback(trtc.ITRTCAudioFrameCallback*)">
10.11. Set custom audio data callback

After this callback is set, the SDK will internally call back the audio data (in PCM format), including:
- {@link onCapturedRawAudioFrame}: callback of the original audio data captured by the local mic
- {@link onLocalProcessedAudioFrame}: callback of the audio data captured by the local mic and preprocessed by the audio module
- {@link onRemoteUserAudioFrame}: audio data from each remote user before audio mixing
- {@link onMixedPlayAudioFrame}: callback of the audio data that will be played back by the system after audio streams are mixed

@note Setting the callback to null indicates to stop the custom audio callback, while setting it to a non-null value indicates to start the custom audio callback.

</member>
        <member name="M:trtc.ITRTCCloud.setRemoteVideoRenderCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoPixelFormat,trtc.TRTCVideoBufferType,trtc.ITRTCVideoRenderCallback*)">
10.10. Set the callback of custom rendering for remote video

After this callback is set, the SDK will skip its own rendering process and call back the captured data. Therefore, you need to complete image rendering on your own.
- You can call `setLocalVideoRenderCallback(TRTCVideoPixelFormat_Unknown, TRTCVideoBufferType_Unknown, nullptr)` to stop the callback.
- On iOS, macOS, and Windows, only video frames in {@link TRTCVideoPixelFormat_I420} or {@link TRTCVideoPixelFormat_BGRA32} pixel format can be called back currently.
- On Android, only video frames in {@link TRTCVideoPixelFormat_I420} pixel format can be passed in currently.

@note In actual use, you need to call `startRemoteView(userid, nullptr)` to get the video stream of the remote user first (set `view` to `nullptr`); otherwise, there will be no data called back.
@param userId remote user id
@param pixelFormat Specify the format of the pixel called back
@param bufferType  Specify video data structure type. Only {@link TRTCVideoBufferType_Buffer} is supported currently
@param callback    Callback for custom rendering
@return 0: success; values smaller than 0: error

</member>
        <member name="M:trtc.ITRTCCloud.setLocalVideoRenderCallback(trtc.TRTCVideoPixelFormat,trtc.TRTCVideoBufferType,trtc.ITRTCVideoRenderCallback*)">
10.8. Set video data callback for third-party beauty filters

After this callback is set, the SDK will call back the captured video frames through the `listener` you set and use them for further processing by a third-party beauty filter component. Then, the SDK will encode and send the processed video frames.
@param listener: Custom preprocessing callback. For more information, please see {@link ITRTCVideoFrameCallback}
@return 0: success; values smaller than 0: error

10.9. Set the callback of custom rendering for local video

After this callback is set, the SDK will skip its own rendering process and call back the captured data. Therefore, you need to complete image rendering on your own.
- You can call `setLocalVideoRenderCallback(TRTCVideoPixelFormat_Unknown, TRTCVideoBufferType_Unknown, nullptr)` to stop the callback.
- On iOS, macOS, and Windows, only video frames in {@link TRTCVideoPixelFormat_I420} or {@link TRTCVideoPixelFormat_BGRA32} pixel format can be called back currently.
- On Android, only video frames in {@link TRTCVideoPixelFormat_I420} pixel format can be passed in currently.

@param pixelFormat Specify the format of the pixel called back
@param bufferType  Specify video data structure type. Only {@link TRTCVideoBufferType_Buffer} is supported currently
@param callback    Callback for custom rendering
@return 0: success; values smaller than 0: error

</member>
        <member name="M:trtc.ITRTCCloud.generateCustomPTS">
10.7. Generate custom capturing timestamp

This API is only suitable for the custom capturing mode and is used to solve the problem of out-of-sync audio/video caused by the inconsistency between the capturing time and delivery time of audio/video frames.
When you call APIs such as {@link sendCustomVideoData} or {@link sendCustomAudioData} for custom video or audio capturing, please use this API as instructed below:
 1. First, when a video or audio frame is captured, call this API to get the corresponding PTS timestamp.
 2. Then, send the video or audio frame to the preprocessing module you use (such as a third-party beauty filter or sound effect component).
 3. When you actually call {@link sendCustomVideoData} or {@link sendCustomAudioData} for delivery, assign the PTS timestamp recorded when the frame was captured to the `timestamp` field in {@link TRTCVideoFrame} or {@link TRTCAudioFrame}.

@return Timestamp in ms

</member>
        <member name="M:trtc.ITRTCCloud.mixExternalAudioFrame(trtc.TRTCAudioFrame*)">
10.6. Mix custom audio track into SDK

Before you use this API to mix custom PCM audio into the SDK, you need to first enable custom audio tracks through {@link enableMixExternalAudioFrame}.
You are expected to feed audio data into the SDK at an even pace, but we understand that it can be challenging to call an API at absolutely regular intervals.
Given this, we have provided a buffer pool in the SDK, which can cache the audio data you pass in to reduce the fluctuations in intervals between API calls.
The value returned by this API indicates the size (ms) of the buffer pool. For example, if `50` is returned, it indicates that the buffer pool has 50 ms of audio data. As long as you call this API again within 50 ms, the SDK can make sure that continuous audio data is mixed.
If the value returned is `100` or greater, you can wait after an audio frame is played to call the API again. If the value returned is smaller than `100`, then there isn’t enough data in the buffer pool, and you should feed more audio data into the SDK until the data in the buffer pool is above the safety level. 
Fill the fields in {@link TRTCAudioFrame} as follows (other fields are not required).
- `data`: audio frame buffer. Audio frames must be in PCM format. Each frame can be 5-100 ms (20 ms is recommended) in duration. Assume that the sample rate is 48000, and sound channels mono-channel. Then the **frame size would be 48000 x 0.02s x 1 x 16 bit = 15360 bit = 1920 bytes**.
- `sampleRate`: sample rate. Valid values: 16000, 24000, 32000, 44100, 48000
- `channel`: number of sound channels (if dual-channel is used, data is interleaved). Valid values: `1` (mono-channel); `2` (dual channel)
- `timestamp`: timestamp (ms). Set it to the timestamp when audio frames are captured, which you can obtain by calling {@link generateCustomPTS} after getting an audio frame.

@param frame Audio data
@return If the value returned is `0` or greater, the value represents the current size of the buffer pool; if the value returned is smaller than `0`, it means that an error occurred. `-1` indicates that you didn’t call {@link enableMixExternalAudioFrame} to enable custom audio tracks.

</member>
        <member name="M:trtc.ITRTCCloud.enableMixExternalAudioFrame(System.Boolean,System.Boolean)">
10.5. Enable/Disable custom audio track

After this feature is enabled, you can mix a custom audio track into the SDK through this API. With two boolean parameters, you can control whether to play back this track remotely or locally.
@param enablePublish Whether the mixed audio track should be played back remotely. Default value: false
@param enablePlayout Whether the mixed audio track should be played back locally. Default value: false
@note If you specify both `enablePublish` and `enablePlayout` as `false`, the custom audio track will be completely closed.

</member>
        <member name="M:trtc.ITRTCCloud.sendCustomAudioData(trtc.TRTCAudioFrame*)">
10.4. Deliver captured audio data to SDK

We recommend you enter the following information for the {@link TRTCAudioFrame} parameter (other fields can be left empty):
- audioFormat: audio data format, which can only be `TRTCAudioFrameFormatPCM`.
- data: audio frame buffer. Audio frame data must be in PCM format, and it supports a frame length of 5–100 ms (20 ms is recommended). Length calculation method: **for example, if the sample rate is 48000, then the frame length for mono channel will be `48000 * 0.02s * 1 * 16 bit = 15360 bit = 1920 bytes`.**
- sampleRate: sample rate. Valid values: 16000, 24000, 32000, 44100, 48000.
- channel: number of channels (if stereo is used, data is interwoven). Valid values: 1: mono channel; 2: dual channel.
- timestamp (ms): Set it to the timestamp when audio frames are captured, which you can obtain by calling {@link generateCustomPTS} after getting a audio frame.

For more information, please see [Custom Capturing and Rendering](https://cloud.tencent.com/document/product/647/34066).
@param frame Audio data
@note Please call this API accurately at intervals of the frame length; otherwise, sound lag may occur due to uneven data delivery intervals.

</member>
        <member name="M:trtc.ITRTCCloud.enableCustomAudioCapture(System.Boolean)">
10.3. Enable custom audio capturing mode

After this mode is enabled, the SDK will not run the original audio capturing process (i.e., stopping mic data capturing) and will retain only the audio encoding and sending capabilities.
You need to use {@link sendCustomAudioData} to continuously insert the captured audio data into the SDK.
@param enable Whether to enable. Default value: false
@note As acoustic echo cancellation (AEC) requires strict control over the audio capturing and playback time, after custom audio capturing is enabled, AEC may fail.

</member>
        <member name="M:trtc.ITRTCCloud.sendCustomVideoData(trtc.TRTCVideoStreamType,trtc.TRTCVideoFrame*)">
10.2. Deliver captured video frames to SDK

You can use this API to deliver video frames you capture to the SDK, and the SDK will encode and transfer them through its own network module.
We recommend you enter the following information for the {@link TRTCVideoFrame} parameter (other fields can be left empty):
- pixelFormat: on Windows and Android, only {@link TRTCVideoPixelFormat_I420} is supported; on iOS and macOS, {@link TRTCVideoPixelFormat_I420} and {@link TRTCVideoPixelFormat_BGRA32} are supported.
- bufferType: {@link TRTCVideoBufferType_Buffer} is recommended.
- data: buffer used to carry video frame data.
- length: video frame data length. If `pixelFormat` is set to I420, `length` can be calculated according to the following formula: length = width * height * 3 / 2.
- width: video image width, such as 640 px.
- height: video image height, such as 480 px.
- timestamp (ms): Set it to the timestamp when video frames are captured, which you can obtain by calling {@link generateCustomPTS} after getting a video frame.

For more information, please see [Custom Capturing and Rendering](https://cloud.tencent.com/document/product/647/34066).
@param streamType Specify video stream type ({@link TRTCVideoStreamTypeBig}: HD big image; {@link TRTCVideoStreamTypeSub}: substream image).
@param frame Video data, which can be in I420 format.
@note 
1. We recommend you call the {@link generateCustomPTS} API to get the `timestamp` value of a video frame immediately after capturing it, so as to achieve the best audio/video sync effect.
2. The video frame rate eventually encoded by the SDK is not determined by the frequency at which you call this API, but by the FPS you set in {@link setVideoEncoderParam}.
3. Please try to keep the calling interval of this API even; otherwise, problems will occur, such as unstable output frame rate of the encoder or out-of-sync audio/video.
4. On iOS and macOS, video frames in {@link TRTCVideoPixelFormat_I420} or {@link TRTCVideoPixelFormat_BGRA32} format can be passed in currently.
5. On Windows and Android, only video frames in {@link TRTCVideoPixelFormat_I420} format can be passed in currently.

</member>
        <member name="M:trtc.ITRTCCloud.enableCustomVideoCapture(trtc.TRTCVideoStreamType,System.Boolean)">
@}
@name  Custom capturing and rendering APIs
@{
10.1. Enable/Disable custom video capturing mode

After this mode is enabled, the SDK will not run the original video capturing process (i.e., stopping camera data capturing and beauty filter operations) and will retain only the video encoding and sending capabilities.
You need to use {@link sendCustomVideoData} to continuously insert the captured video image into the SDK.
@param streamType Specify video stream type ({@link TRTCVideoStreamTypeBig}: HD big image; {@link TRTCVideoStreamTypeSub}: substream image).
@param enable Whether to enable. Default value: false

</member>
        <member name="M:trtc.ITRTCCloud.removeAllIncludedShareWindow">
9.14. Remove all windows from the inclusion list of screen sharing (for desktop systems only)

This API takes effect only if the `type` in {@link TRTCScreenCaptureSourceInfo} is specified as {@link TRTCScreenCaptureSourceTypeWindow}.
That is, the feature of additionally including specified windows works only when a window is shared.

</member>
        <member name="M:trtc.ITRTCCloud.removeIncludedShareWindow(HWND__*)">
9.13. Remove specified windows from the inclusion list of screen sharing (for desktop systems only)

This API takes effect only if the `type` in {@link TRTCScreenCaptureSourceInfo} is specified as {@link TRTCScreenCaptureSourceTypeWindow}.
That is, the feature of additionally including specified windows works only when a window is shared.
@param windowID Window to be shared (window ID on macOS or HWND on Windows)

</member>
        <member name="M:trtc.ITRTCCloud.addIncludedShareWindow(HWND__*)">
9.12. Add specified windows to the inclusion list of screen sharing (for desktop systems only)

This API takes effect only if the `type` in {@link TRTCScreenCaptureSourceInfo} is specified as {@link TRTCScreenCaptureSourceTypeWindow}; that is, the feature of additionally including specified windows works only when a window is shared.
You can call it before or after {@link startScreenCapture}.
@param windowID Window to be shared (which is a window handle `HWND` on Windows)
@note The windows added to the inclusion list by this method will be automatically cleared by the SDK after room exit. 

</member>
        <member name="M:trtc.ITRTCCloud.removeAllExcludedShareWindow">
9.11. Remove all windows from the exclusion list of screen sharing (for desktop systems only)

</member>
        <member name="M:trtc.ITRTCCloud.removeExcludedShareWindow(HWND__*)">
9.10. Remove specified windows from the exclusion list of screen sharing (for desktop systems only)

@param windowID 

</member>
        <member name="M:trtc.ITRTCCloud.addExcludedShareWindow(HWND__*)">
9.9. Add specified windows to the exclusion list of screen sharing (for desktop systems only)

The excluded windows will not be shared. This feature is generally used to add a certain application's window to the exclusion list to avoid privacy issues.
You can set the filtered windows before starting screen sharing or dynamically add the filtered windows during screen sharing.
@param window Window not to be shared
@note 
 1. This API takes effect only if the `type` in {@link TRTCScreenCaptureSourceInfo} is specified as {@link TRTCScreenCaptureSourceTypeScreen}; that is, the feature of excluding specified windows works only when the entire screen is shared.
 2. The windows added to the exclusion list through this API will be automatically cleared by the SDK after room exit.
 3. On macOS, please pass in the window ID (CGWindowID), which can be obtained through the `sourceId` member in {@link TRTCScreenCaptureSourceInfo}.

</member>
        <member name="M:trtc.ITRTCCloud.setSubStreamMixVolume(System.UInt32)">
9.8. Set the audio mixing volume of screen sharing (for desktop systems only)

The greater the value, the larger the ratio of the screen sharing volume to the mic volume. We recommend you not set a high value for this parameter as a high volume will cover the mic sound.
@param volume Set audio mixing volume. Value range: 0–100

</member>
        <member name="M:trtc.ITRTCCloud.setSubStreamEncoderParam(trtc.TRTCVideoEncParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
9.7. Set the video encoding parameters of screen sharing (i.e., substream) (for desktop systems only)

This API can set the image quality of screen sharing (i.e., the substream) viewed by remote users, which is also the image quality of screen sharing in on-cloud recording files.
Please note the differences between the following two APIs:
- {@link setVideoEncoderParam} is used to set the video encoding parameters of the primary stream image ({@link TRTCVideoStreamTypeBig}, generally for camera).
- {@link setSubStreamEncoderParam} is used to set the video encoding parameters of the substream image ({@link TRTCVideoStreamTypeSub}, generally for screen sharing).

@param param Substream encoding parameters. For more information, please see {@link TRTCVideoEncParam}.
@note Even if you use the primary stream to transfer screen sharing data (set `type=TRTCVideoStreamTypeBig` when calling `startScreenCapture`), you still need to call the {@link setSubStreamEncoderParam} API instead of the {@link setVideoEncoderParam} API to set the screen sharing encoding parameters.

</member>
        <member name="M:trtc.ITRTCCloud.selectScreenCaptureTarget(trtc.TRTCScreenCaptureSourceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trtc.TRTCScreenCaptureProperty!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
9.6. Select the screen or window to share (for desktop systems only)

After you get the sharable screens and windows through `getScreenCaptureSources`, you can call this API to select the target screen or window you want to share.
During the screen sharing process, you can also call this API at any time to switch the sharing target.
The following four sharing modes are supported:
- Sharing the entire screen: for `source` whose `type` is `Screen` in `sourceInfoList`, set `captureRect` to `{ 0, 0, 0, 0 }`.
- Sharing a specified area: for `source` whose `type` is `Screen` in `sourceInfoList`, set `captureRect` to a non-nullptr value, e.g., `{ 100, 100, 300, 300 }`.
- Sharing an entire window: for `source` whose `type` is `Window` in `sourceInfoList`, set `captureRect` to `{ 0, 0, 0, 0 }`.
- Sharing a specified window area: for `source` whose `type` is `Window` in `sourceInfoList`, set `captureRect` to a non-nullptr value, e.g., `{ 100, 100, 300, 300 }`.
@param source        Specify sharing source
@param captureRect   Specify the area to be captured
@param property      Specify the attributes of the screen sharing target, such as capturing the cursor and highlighting the captured window. For more information, please see the definition of `TRTCScreenCaptureProperty`
@note Setting the highlight border color and width parameters does not take effect on macOS.

</member>
        <member name="M:trtc.ITRTCCloud.getScreenCaptureSources(tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagSIZE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
9.5. Enumerate shareable screens and windows (for desktop systems only)

When you integrate the screen sharing feature of a desktop system, you generally need to display a UI for selecting the sharing target, so that users can use the UI to choose whether to share the entire screen or a certain window.
Through this API, you can query the IDs, names, and thumbnails of sharable windows on the current system. We provide a default UI implementation in the demo for your reference.
@note 
1. The returned list contains the screen and the application windows. The screen is the first element in the list. If the user has multiple displays, then each display is a sharing target.
2. Please do not use `delete ITRTCScreenCaptureSourceList*` to delete the `SourceList`; otherwise, crashes may occur. Instead, please use the `release` method in `ITRTCScreenCaptureSourceList` to release the list.
@param thumbnailSize Specify the thumbnail size of the window to be obtained. The thumbnail can be drawn on the window selection UI.
@param iconSize Specify the icon size of the window to be obtained.
@return List of windows (including the screen)

</member>
        <member name="M:trtc.ITRTCCloud.resumeScreenCapture">
9.4. Resume screen sharing

</member>
        <member name="M:trtc.ITRTCCloud.pauseScreenCapture">
9.3. Pause screen sharing

</member>
        <member name="M:trtc.ITRTCCloud.stopScreenCapture">
9.2. Stop screen sharing

</member>
        <member name="M:trtc.ITRTCCloud.startScreenCapture(HWND__*,trtc.TRTCVideoStreamType,trtc.TRTCVideoEncParam*)">
@}
@name  Screen sharing APIs
@{
9.1. Start desktop screen sharing (for desktop systems only)

This API can capture the screen content of the entire macOS system or a specified application and share it with other users in the same room.
@param view Parent control of the rendering control, which can be set to a null value, indicating not to display the preview of the shared screen.
@param streamType Channel used for screen sharing, which can be the primary stream ({@link TRTCVideoStreamTypeBig}) or substream ({@link TRTCVideoStreamTypeSub}). 
@param encParam Image encoding parameters used for screen sharing, which can be set to `nil`, indicating to let the SDK choose the optimal encoding parameters (such as resolution and bitrate).

@note 
1. A user can publish at most one primary stream ({@link TRTCVideoStreamTypeBig}) and one substream ({@link TRTCVideoStreamTypeSub}) at the same time.
2. By default, screen sharing uses the substream image. If you want to use the primary stream for screen sharing, you need to stop camera capturing (through {@link stopLocalPreview}) in advance to avoid conflicts.
3. Only one user can use the substream for screen sharing in the same room at any time; that is, only one user is allowed to enable the substream in the same room at any time.
4. When there is already a user in the room using the substream for screen sharing, calling this API will return the `onError(ERR_SERVER_CENTER_ANOTHER_USER_PUSH_SUB_VIDEO)` callback from {@link TRTCCloudDelegate}.

</member>
        <member name="M:trtc.ITRTCCloud.setSystemAudioLoopbackVolume(System.UInt32)">
8.4. Set the volume of system audio capturing (for desktop systems only)

@param volume Set volume. Value range: [0, 150]. Default value: 100

</member>
        <member name="M:trtc.ITRTCCloud.stopSystemAudioLoopback">
8.3. Stop system audio capturing (for desktop systems only)

</member>
        <member name="M:trtc.ITRTCCloud.startSystemAudioLoopback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
8.2. Enable system audio capturing (for desktop systems only)

This API captures audio data from the sound card of the anchor’s computer and mixes it into the current audio stream of the SDK. This ensures that other users in the room hear the audio played back by the anchor’s computer.
In online education scenarios, a teacher can use this API to have the SDK capture the audio of instructional videos and broadcast it to students in the room.
In live music scenarios, an anchor can use this API to have the SDK capture the music played back by his or her player so as to add background music to the room.
@param path If this parameter is empty, the audio of the entire system is captured.
            On Windows, you can also set `path` to the path of an executable file (such as `QQMuisc.exe`) to have the SDK capture only the audio of the application.
@note You can specify `path` only on Windows and with 32-bit TRTC SDK.

</member>
        <member name="M:trtc.ITRTCCloud.getAudioEffectManager">
@}
@name  Background music and sound effect APIs
@{
8.1. Get sound effect management class (TXAudioEffectManager)

`TXAudioEffectManager` is a sound effect management API, through which you can implement the following features:
- Background music: both online music and local music can be played back with various features such as speed adjustment, pitch adjustment, original voice, accompaniment, and loop.
- In-ear monitoring: the sound captured by the mic is played back in the headphones in real time, which is generally used for music live streaming.
- Reverb effect: karaoke room, small room, big hall, deep, resonant, and other effects.
- Voice changing effect: young girl, middle-aged man, heavy metal, and other effects.
- Short sound effect: short sound effect files such as applause and laughter are supported (for files less than 10 seconds in length, please set the `isShortFile` parameter to `true`).

</member>
        <member name="M:trtc.ITRTCCloud.setWaterMark(trtc.TRTCVideoStreamType,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCWaterMarkSrcType,System.UInt32,System.UInt32,System.Single,System.Single,System.Single)">
7.2. Add watermark

The watermark position is determined by the `xOffset`, `yOffset`, and `fWidthRatio` parameters.
- `xOffset`: X coordinate of watermark, which is a floating-point number between 0 and 1.
- `yOffset`: Y coordinate of watermark, which is a floating-point number between 0 and 1.
- `fWidthRatio`: watermark dimensions ratio, which is a floating-point number between 0 and 1.

@param streamType Stream type of the watermark to be set (`TRTCVideoStreamTypeBig` or `TRTCVideoStreamTypeSub`)
@param srcData    Source data of watermark image (if `nullptr` is passed in, the watermark will be removed)
@param srcType    Source data type of watermark image
@param nWidth     Pixel width of watermark image (this parameter will be ignored if the source data is a file path)
@param nHeight    Pixel height of watermark image (this parameter will be ignored if the source data is a file path)
@param xOffset    Top-left offset on the X axis of watermark
@param yOffset    Top-left offset on the Y axis of watermark
@param fWidthRatio Ratio of watermark width to image width (the watermark will be scaled according to this parameter)
@note This API only supports adding an image watermark to the primary stream

</member>
        <member name="M:trtc.ITRTCCloud.setBeautyStyle(trtc.TRTCBeautyStyle,System.UInt32,System.UInt32,System.UInt32)">
@}
@name  Beauty filter and watermark APIs
@{
7.1. Set special effects such as beauty, brightening, and rosy skin filters

The SDK is integrated with two skin smoothing algorithms of different styles:
- "Smooth" style, which uses a more radical algorithm for more obvious effect and is suitable for show live streaming.
- "Natural" style, which retains more facial details for more natural effect and is suitable for most live streaming use cases.
@param style Skin smoothening algorithm ("smooth" or "natural")
@param beautyLevel Strength of the beauty filter. Value range: 0–9; 0 indicates that the filter is disabled, and the greater the value, the more obvious the effect.
@param whitenessLevel Strength of the brightening filter. Value range: 0–9; 0 indicates that the filter is disabled, and the greater the value, the more obvious the effect.
@param ruddinessLevel Strength of the rosy skin filter. Value range: 0–9; 0 indicates that the filter is disabled, and the greater the value, the more obvious the effect.

</member>
        <member name="M:trtc.ITRTCCloud.getDeviceManager">
@}
@name  Device management APIs
@{
6.1. Get device management class (TXDeviceManager)

</member>
        <member name="M:trtc.ITRTCCloud.stopLocalRecording">
5.16. Stop local media recording

If a recording task has not been stopped through this API before room exit, it will be automatically stopped after room exit.

</member>
        <member name="M:trtc.ITRTCCloud.startLocalRecording(trtc.TRTCLocalRecordingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
5.15. Start local media recording

This API records the audio/video content during live streaming into a local file.
@param params Recording parameter. For more information, please see {@link TRTCLocalRecordingParams}

</member>
        <member name="M:trtc.ITRTCCloud.stopAudioRecording">
5.14. Stop audio recording

If a recording task has not been stopped through this API before room exit, it will be automatically stopped after room exit.

</member>
        <member name="M:trtc.ITRTCCloud.startAudioRecording(trtc.TRTCAudioRecordingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
5.13. Start audio recording

After you call this API, the SDK will mix and record all local and remote audio streams (such as local audio, remote audio, background music, and sound effects) into a local file.
This API works when called either before or after room entry. If a recording task has not been stopped through `stopAudioRecording` before room exit, it will be automatically stopped after room exit.
@param param Recording parameter. For more information, please see {@link TRTCAudioRecordingParams}
@return 0: success; -1: audio recording has been started; -2: failed to create file or directory; -3: the audio format of the specified file extension is not supported

</member>
        <member name="M:trtc.ITRTCCloud.enableAudioVolumeEvaluation(System.UInt32)">
5.12. Enable volume reminder

After this feature is enabled, the SDK will return the remote audio volume in the {@link onUserVoiceVolume} callback of {@link TRTCCloudDelegate}.
@note To enable this feature, call this API before calling `startLocalAudio`.
@param interval Set the interval in ms for triggering the `onUserVoiceVolume` callback. The minimum interval is 100 ms. If the value is smaller than or equal to 0, the callback will be disabled. We recommend you set this parameter to 300 ms.

</member>
        <member name="M:trtc.ITRTCCloud.getAudioPlayoutVolume">
5.11. Get the playback volume of remote audio

</member>
        <member name="M:trtc.ITRTCCloud.setAudioPlayoutVolume(System.Int32)">
5.10. Set the playback volume of remote audio

This API controls the volume of the sound ultimately delivered by the SDK to the system for playback. It affects the volume of the recorded local audio file but not the volume of in-ear monitoring.
@param volume Volume. 100 is the original volume. Value range: [0,150]. Default value: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITRTCCloud.getAudioCaptureVolume">
5.9. Get the capturing volume of local audio

</member>
        <member name="M:trtc.ITRTCCloud.setAudioCaptureVolume(System.Int32)">
5.8. Set the capturing volume of local audio

@param volume Volume. 100 is the original volume. Value range: [0,150]. Default value: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITRTCCloud.setRemoteAudioVolume(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
5.7. Set the audio playback volume of remote user

You can mute the audio of a remote user through `setRemoteAudioVolume(userId, 0)`.
@param userId ID of the specified remote user
@param volume Volume. 100 is the original volume. Value range: [0,150]. Default value: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITRTCCloud.muteAllRemoteAudio(System.Boolean)">
5.5. Pause/Resume playing back all remote users' audio streams

When you mute the audio of all remote users, the SDK will stop playing back all their audio streams and pulling all their audio data.
@param mute true: mute; false: unmute
@note This API works when called either before or after room entry (enterRoom), and the mute status will be reset to `false` after room exit (exitRoom).

</member>
        <member name="M:trtc.ITRTCCloud.muteRemoteAudio(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
5.4. Pause/Resume playing back remote audio stream

When you mute the remote audio of a specified user, the SDK will stop playing back the user's audio and pulling the user's audio data.
@param userId ID of the specified remote user
@param mute true: mute; false: unmute
@note This API works when called either before or after room entry (enterRoom), and the mute status will be reset to `false` after room exit (exitRoom).

</member>
        <member name="M:trtc.ITRTCCloud.muteLocalAudio(System.Boolean)">
5.3. Pause/Resume publishing local audio stream

After local audio publishing is paused, other users in the room will receive the {@link onUserAudioAvailable}(userId, false) notification.
After local audio publishing is resumed, other users in the room will receive the {@link onUserAudioAvailable}(userId, true) notification.
Different from {@link stopLocalAudio}, `muteLocalAudio(true)` does not release the mic permission; instead, it continues to send mute packets with extremely low bitrate.
This is very suitable for scenarios that require on-cloud recording, as video file formats such as MP4 have a high requirement for audio continuity, while an MP4 recording file cannot be played back smoothly if {@link stopLocalAudio} is used.
Therefore, `muteLocalAudio` instead of `stopLocalAudio` is recommended in scenarios where the requirement for recording file quality is high.
@param mute true: mute; false: unmute

</member>
        <member name="M:trtc.ITRTCCloud.stopLocalAudio">
5.2. Stop local audio capturing and publishing

After local audio capturing and publishing is stopped, other users in the room will receive the {@link onUserAudioAvailable}(userId, false) notification.

</member>
        <member name="M:trtc.ITRTCCloud.startLocalAudio(trtc.TRTCAudioQuality)">
@}
@name  Audio APIs
@{
5.1. Enable local audio capturing and publishing

The SDK does not enable the mic by default. When a user wants to publish the local audio, the user needs to call this API to enable mic capturing and encode and publish the audio to the current room.
After local audio capturing and publishing is enabled, other users in the room will receive the {@link onUserAudioAvailable}(userId, true) notification.
@param quality Sound quality
  - {@link TRTCAudioQualitySpeech} - Smooth: sample rate: 16 kHz; mono channel; audio bitrate: 16 Kbps. This is suitable for audio call scenarios, such as online meeting and audio call.
  - {@link TRTCAudioQualityDefault} - Default: sample rate: 48 kHz; mono channel; audio bitrate: 50 Kbps. This is the default sound quality of the SDK and recommended if there are no special requirements.
  - {@link TRTCAudioQualityMusic} - HD: sample rate: 48 kHz; dual channel + full band; audio bitrate: 128 Kbps. This is suitable for scenarios where Hi-Fi music transfer is required, such as online karaoke and music live streaming.
@note This API will check the mic permission. If the current application does not have permission to use the mic, the SDK will automatically ask the user to grant the mic permission.

</member>
        <member name="M:trtc.ITRTCCloud.snapshotVideo(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,trtc.TRTCSnapshotSourceType)">
4.22. Screencapture video

You can use this API to screencapture the local video image or the primary stream image and substream (screen sharing) image of a remote user.
@param userId User ID. A null value indicates to screencapture the local video.
@param streamType Video stream type, which can be the primary stream image ({@link TRTCVideoStreamTypeBig}, generally for camera) or substream image ({@link TRTCVideoStreamTypeSub}, generally for screen sharing)
@param sourceType Video image source, which can be the video stream image ({@link TRTCSnapshotSourceTypeStream}, generally in higher definition) or the video rendering image ({@link TRTCSnapshotSourceTypeView})
@note On Windows, only video image from the {@link TRTCSnapshotSourceTypeStream} source can be screencaptured currently.

</member>
        <member name="M:trtc.ITRTCCloud.setRemoteVideoStreamType(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType)">
4.21. Switch the big/small image of specified remote user

After an anchor in a room enables dual-channel encoding, the video image that other users in the room subscribe to through {@link startRemoteView} will be **HD big image** by default.
You can use this API to select whether the image subscribed to is the big image or small image. The API can take effect before or after {@link startRemoteView} is called.
@note To implement this feature, the target user must have enabled the dual-channel encoding mode through {@link enableEncSmallVideoStream}; otherwise, this API will not work.
@param userId ID of the specified remote user
@param streamType Video stream type, i.e., big image or small image. Default value: big image

</member>
        <member name="M:trtc.ITRTCCloud.enableSmallVideoStream(System.Boolean,trtc.TRTCVideoEncParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
4.20. Enable dual-channel encoding mode with big and small images

In this mode, the current user's encoder will output two channels of video streams, i.e., **HD big image** and **Smooth small image**, at the same time (only one channel of audio stream will be output though).
In this way, other users in the room can choose to subscribe to the **HD big image** or **Smooth small image** according to their own network conditions or screen size.
@note Dual-channel encoding will consume more CPU resources and network bandwidth; therefore, this feature can be enabled on macOS, Windows, or high-spec tablets, but is not recommended for phones.
@param enable Whether to enable small image encoding. Default value: false
@param smallVideoEncParam Video parameters of small image stream
@return 0: success; -1: the current big image has been set to a lower quality, and it is not necessary to enable dual-channel encoding

</member>
        <member name="M:trtc.ITRTCCloud.setVideoEncoderMirror(System.Boolean)">
4.18. Set the mirror mode of image output by encoder

This setting does not affect the mirror mode of the local video image, but affects the mirror mode of the image viewed by other users in the room (and on-cloud recording files).
@param mirror Whether to enable remote mirror mode. true: yes; false: no. Default value: false

</member>
        <member name="M:trtc.ITRTCCloud.setVideoEncoderRotation(trtc.TRTCVideoRotation)">
4.17. Set the direction of image output by video encoder

This setting does not affect the preview direction of the local video image, but affects the direction of the image viewed by other users in the room (and on-cloud recording files).
When a phone or tablet is rotated upside down, as the capturing direction of the camera does not change, the video image viewed by other users in the room will become upside-down.
In this case, you can call this API to rotate the image encoded by the SDK 180 degrees, so that other users in the room can view the image in the normal direction.
If you want to achieve the aforementioned user-friendly interactive experience, we recommend you directly call {@link setGSensorMode} to implement smarter direction adaptation, with no need to call this API manually.
@param rotation Currently, rotation angles of 0 and 180 degrees are supported. Default value: TRTCVideoRotation0 (no rotation)

</member>
        <member name="M:trtc.ITRTCCloud.setRemoteRenderParams(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,trtc.TRTCRenderParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
4.16. Set the rendering mode of remote video image

The parameters that can be set include video image rotation angle, fill mode, and mirror mode.
@param userId ID of the specified remote user
@param streamType It can be set to the primary stream image (TRTCVideoStreamTypeBig) or substream image (TRTCVideoStreamTypeSub).
@param params Video image rendering parameters. For more information, please see {@link TRTCRenderParams}.

</member>
        <member name="M:trtc.ITRTCCloud.setLocalRenderParams(trtc.TRTCRenderParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
4.15. Set the rendering parameters of local video image

The parameters that can be set include video image rotation angle, fill mode, and mirror mode.
@param params Video image rendering parameters. For more information, please see {@link TRTCRenderParams}.

</member>
        <member name="M:trtc.ITRTCCloud.setNetworkQosParam(trtc.TRTCNetworkQosParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
4.14. Set network quality control parameters

This setting determines the quality control policy in a poor network environment, such as "image quality preferred" or "smoothness preferred".
@param param It is used to set relevant parameters for network quality control. For details, please refer to {@link TRTCNetworkQosParam}.

</member>
        <member name="M:trtc.ITRTCCloud.setVideoEncoderParam(trtc.TRTCVideoEncParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
4.13. Set the encoding parameters of video encoder

This setting can determine the quality of image viewed by remote users, which is also the image quality of on-cloud recording files.
@param param It is used to set relevant parameters for the video encoder. For more information, please see {@link TRTCVideoEncParam}.

</member>
        <member name="M:trtc.ITRTCCloud.muteAllRemoteVideoStreams(System.Boolean)">
4.12. Pause/Resume subscribing to all remote users' video streams

This API only pauses/resumes receiving all users' video streams but does not release displaying resources; therefore, the video image will freeze at the last frame before it is called.
@param mute Whether to pause receiving
@note This API can be called before room entry (enterRoom), and the pause status will be reset after room exit (exitRoom).

</member>
        <member name="M:trtc.ITRTCCloud.muteRemoteVideoStream(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
4.11. Pause/Resume subscribing to remote user's video stream

This API only pauses/resumes receiving the specified user's video stream but does not release displaying resources; therefore, the video image will freeze at the last frame before it is called.
@param userId ID of the specified remote user
@param mute Whether to pause receiving
@note This API can be called before room entry (enterRoom), and the pause status will be reset after room exit (exitRoom).

</member>
        <member name="M:trtc.ITRTCCloud.stopAllRemoteView">
4.10. Stop subscribing to all remote users' video streams and release all rendering resources

Calling this API will cause the SDK to stop receiving all remote video streams and release all decoding and rendering resources.
@note If a substream image (screen sharing) is being displayed, it will also be stopped.

</member>
        <member name="M:trtc.ITRTCCloud.stopRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType)">
4.9. Stop subscribing to remote user's video stream and release rendering control

Calling this API will cause the SDK to stop receiving the user's video stream and release the decoding and rendering resources for the stream.
@param userId ID of the specified remote user
@param streamType Video stream type of the `userId` specified for watching:
   - HD big image: {@link TRTCVideoStreamTypeBig}
   - Smooth small image: {@link TRTCVideoStreamTypeSmall}
   - Substream image (usually used for screen sharing): {@link TRTCVideoStreamTypeSub}

</member>
        <member name="M:trtc.ITRTCCloud.updateRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,HWND__*)">
4.8. Update remote user's video rendering control

This API can be used to update the rendering control of the remote video image. It is often used in interactive scenarios where the display area needs to be switched.
@param view Control that carries the video image
@param streamType Type of the stream for which to set the preview window (only {@link TRTCVideoStreamTypeBig} and {@link TRTCVideoStreamTypeSub} are supported)
@param userId ID of the specified remote user

</member>
        <member name="M:trtc.ITRTCCloud.startRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,HWND__*)">
4.7. Subscribe to remote user's video stream and bind video rendering control

Calling this API allows the SDK to pull the video stream of the specified `userId` and render it to the rendering control specified by the `view` parameter. You can set the display mode of the video image through {@link setRemoteRenderParams}.
- If you already know the `userId` of a user who has a video stream in the room, you can directly call `startRemoteView` to subscribe to the user's video image.
- If you don't know which users in the room are publishing video streams, you can wait for the notification from {@link onUserVideoAvailable} after `enterRoom`.

Calling this API only starts pulling the video stream, and the image needs to be loaded and buffered at this time. After the buffering is completed, you will receive a notification from {@link onFirstVideoFrame}.
@param userId ID of the specified remote user
@param streamType Video stream type of the `userId` specified for watching:
   - HD big image: {@link TRTCVideoStreamTypeBig}
   - Smooth small image: {@link TRTCVideoStreamTypeSmall} (the remote user should enable dual-channel encoding through {@link enableEncSmallVideoStream} for this parameter to take effect)
   - Substream image (usually used for screen sharing): {@link TRTCVideoStreamTypeSub}

@param view Rendering control that carries the video image
@note The following requires your attention:
 1. The SDK supports watching the big image and substream image or small image and substream image of a `userId` at the same time, but does not support watching the big image and small image at the same time.
 2. Only when the specified `userId` enables dual-channel encoding through {@link enableEncSmallVideoStream} can the user's small image be viewed.
 3. If the small image of the specified `userId` does not exist, the SDK will switch to the big image of the user by default.

</member>
        <member name="M:trtc.ITRTCCloud.muteLocalVideo(System.Boolean)">
4.5. Pause/Resume publishing local video stream

This API can pause (or resume) publishing the local video image. After the pause, other users in the same room will not be able to see the local image.
This API is equivalent to the two APIs of `startLocalPreview/stopLocalPreview` but has higher performance and response speed.
The `startLocalPreview/stopLocalPreview` APIs need to enable/disable the camera, which are hardware device-related operations, so they are very time-consuming.
In contrast, `muteLocalVideo` only needs to pause or allow the data stream at the software level, so it is more efficient and more suitable for scenarios where frequent enabling/disabling are needed.
After local video publishing is paused, other members in the same room will receive the `onUserVideoAvailable(userId, false)` callback notification.
After local video publishing is resumed, other members in the same room will receive the `onUserVideoAvailable(userId, true)` callback notification.
@param mute true: pause; false: resume

</member>
        <member name="M:trtc.ITRTCCloud.stopLocalPreview">
4.4. Stop camera preview

</member>
        <member name="M:trtc.ITRTCCloud.updateLocalView(HWND__*)">
4.3. Update the preview image of local camera

</member>
        <member name="M:trtc.ITRTCCloud.startLocalPreview(HWND__*)">
@}
@name  Video APIs
@{
4.1. Enable the preview image of local camera (mobile)

If this API is called before `enterRoom`, the SDK will only enable the camera and wait until `enterRoom` is called before starting push.
If it is called after `enterRoom`, the SDK will enable the camera and automatically start pushing the video stream.
When the first camera video frame starts to be rendered, you will receive the `onCameraDidReady` callback in {@link TRTCCloudDelegate}.
@param frontCamera YES: front camera; NO: rear camera
@param view Control that carries the video image
@note If you want to preview the camera image and adjust the beauty filter parameters through `BeautyManager` before going live, you can:
 - Scheme 1. Call `startLocalPreview` before calling `enterRoom`
 - Scheme 2. Call `startLocalPreview` and `muteLocalVideo(true)` after calling `enterRoom`

4.2. Enable the preview image of local camera (desktop)

Before this API is called, `setCurrentCameraDevice` can be called first to select whether to use the macOS device's built-in camera or an external camera.
If this API is called before `enterRoom`, the SDK will only enable the camera and wait until `enterRoom` is called before starting push.
If it is called after `enterRoom`, the SDK will enable the camera and automatically start pushing the video stream.
When the first camera video frame starts to be rendered, you will receive the `onCameraDidReady` callback in {@link TRTCCloudDelegate}.
@param view Control that carries the video image
@note If you want to preview the camera image and adjust the beauty filter parameters through `BeautyManager` before going live, you can:
- Scheme 1. Call `startLocalPreview` before calling `enterRoom`
- Scheme 2. Call `startLocalPreview` and `muteLocalVideo(true)` after calling `enterRoom`

</member>
        <member name="M:trtc.ITRTCCloud.setMixTranscodingConfig(trtc.TRTCTranscodingConfig*)">
3.5. Set the layout and transcoding parameters of On-Cloud MixTranscoding

In a live room, there may be multiple anchors publishing their audio/video streams at the same time, but for audience on CSS CDN, they only need to watch one video stream in HTTP-FLV or HLS format.
When you call this API, the SDK will send a command to the TRTC mixtranscoding server to combine multiple audio/video streams in the room into one stream.
You can use the {@link TRTCTranscodingConfig} parameter to set the layout of each channel of image. You can also set the encoding parameters of the mixed audio/video streams.
For more information, please see [On-Cloud MixTranscoding](https://cloud.tencent.com/document/product/647/16827).
<pre>
    **Image 1** =&gt; decoding ====&gt; \\
                                   \\
    **Image 2** =&gt; decoding =&gt; image mixing =&gt; encoding =&gt; **mixed image**
                                   //
    **Image 3** =&gt; decoding ====&gt; //
    
    **Audio 1** =&gt; decoding ====&gt; \\
                                   \\
    **Audio 2** =&gt; decoding =&gt; audio mixing =&gt; encoding =&gt; **mixed audio**
                                   //
    **Audio 3** =&gt; decoding ====&gt; //
</pre>
@param config If `config` is not empty, On-Cloud MixTranscoding will be started; otherwise, it will be stopped. For more information, please see {@link TRTCTranscodingConfig}.
@note Notes on On-Cloud MixTranscoding:
  - If the user calling this API does not set `streamId` in the `config` parameter, TRTC will mix the multiple channels of images in the room into the audio/video streams corresponding to the current user, i.e., A + B =&gt; A.
  - If the user calling this API sets `streamId` in the `config` parameter, TRTC will mix the multiple channels of images in the room into the specified `streamId`, i.e., A + B =&gt; streamId.
  - Please note that if you are still in the room but do not need mixtranscoding anymore, be sure to call this API again and leave `config` empty to cancel it; otherwise, additional fees may be incurred.
  - Please rest assured that TRTC will automatically cancel the mixtranscoding status upon room exit.

</member>
        <member name="M:trtc.ITRTCCloud.stopPublishCDNStream">
3.4. Stop publishing audio/video streams to non-Tencent Cloud CDN

</member>
        <member name="M:trtc.ITRTCCloud.startPublishCDNStream(trtc.TRTCPublishCDNParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
3.3. Start publishing audio/video streams to non-Tencent Cloud CDN

This API is similar to the `startPublishing` API. The difference is that `startPublishing` can only publish audio/video streams to Tencent Cloud CDN, while this API can relay streams to live streaming CDN services of other cloud providers.
@param param CDN relaying parameter. For more information, please see {@link TRTCPublishCDNParam}
@note 
- Using the `startPublishing` API to publish audio/video streams to Tencent Cloud CSS CDN does not incur additional fees.
- Using the `startPublishCDNStream` API to publish audio/video streams to non-Tencent Cloud CDN incurs additional relaying bandwidth fees.

</member>
        <member name="M:trtc.ITRTCCloud.stopPublishing">
3.2. Stop publishing audio/video streams to Tencent Cloud CSS CDN

</member>
        <member name="M:trtc.ITRTCCloud.startPublishing(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType)">
3.1. Start publishing audio/video streams to Tencent Cloud CSS CDN

This API sends a command to the TRTC server, requesting it to relay the current user's audio/video streams to CSS CDN.
You can set the `StreamId` of the live stream through the `streamId` parameter, so as to specify the playback address of the user's audio/video streams on CSS CDN.
For example, if you specify the current user's live stream ID as `user_stream_001` through this API, then the corresponding CDN playback address is:
"http://yourdomain/live/user_stream_001.flv", where `yourdomain` is your playback domain name with an ICP filing.
You can configure your playback domain name in the [CSS console](https://console.cloud.tencent.com/live). Tencent Cloud does not provide a default playback domain name.
You can also specify the `streamId` when setting the `TRTCParams` parameter of `enterRoom`, which is the recommended approach.
@param streamId Custom stream ID.
@param streamType Only `TRTCVideoStreamTypeBig` and `TRTCVideoStreamTypeSub` are supported.
@note You need to enable the "Enable Relayed Push" option on the "Function Configuration" page in the [TRTC console](https://console.cloud.tencent.com/trtc/) in advance.
  - If you select "Specified stream for relayed push", you can use this API to push the corresponding audio/video stream to Tencent Cloud CDN and specify the entered stream ID.
  - If you select "Global auto-relayed push", you can use this API to adjust the default stream ID.

</member>
        <member name="M:trtc.ITRTCCloud.destroySubCloud(trtc.ITRTCCloud*)">
2.9. Terminate room subinstance

@param subCloud

</member>
        <member name="M:trtc.ITRTCCloud.createSubCloud">
2.8. Create room subinstance (for concurrent multi-room listen/watch)

`TRTCCloud` was originally designed to work in the singleton mode, which limited the ability to watch concurrently in multiple rooms.
By calling this API, you can create multiple `TRTCCloud` instances, so that you can enter multiple different rooms at the same time to listen/watch audio/video streams.
However, it should be noted that because there are still only one camera and one mic available, you can exist as an "anchor" in only one `TRTCCloud` instance at any time; that is, you can only publish your audio/video streams in one `TRTCCloud` instance at any time.
This feature is mainly used in the "super small class" use case in the online education scenario to break the limit that "only up to 50 users can publish their audio/video streams simultaneously in one TRTC room".
Below is the sample code:
<pre>
    ITRTCCloud *mainCloud = getTRTCShareInstance();
    mainCloud-&gt;enterRoom(params1, TRTCAppSceneLIVE);
    //... 
    //Switch the role from "anchor" to "audience" in your own room
    mainCloud-&gt;switchRole(TRTCRoleAudience);
    mainCloud-&gt;muteLocalVideo(true);
    mainCloud-&gt;muteLocalAudio(true);
    //...
    //Use subcloud to enter another room and switch the role from "audience" to "anchor"
    ITRTCCloud *subCloud = mainCloud-&gt;createSubCloud();
    subCloud-&gt;enterRoom(params2, TRTCAppSceneLIVE);
    subCloud-&gt;switchRole(TRTCRoleAnchor);
    subCloud-&gt;muteLocalVideo(false);
    subCloud-&gt;muteLocalAudio(false);
    //...
    //Exit from new room and release it.
    subCloud-&gt;exitRoom();
    mainCloud-&gt;destroySubCloud(subCloud);
</pre>

@note
- The same user can enter multiple rooms with different `roomId` values by using the same `userId`.
- Two devices cannot use the same `userId` to enter the same room with a specified `roomId`.
- The same user can push a stream in only one `TRTCCloud` instance at any time. If streams are pushed simultaneously in different rooms, a status mess will be caused in the cloud, leading to various bugs.
- The `TRTCCloud` instance created by the `createSubCloud` API cannot call APIs related to the local audio/video in the subinstance, except `switchRole`, `muteLocalVideo`, and `muteLocalAudio`. To use APIs such as the beauty filter, please use the original `TRTCCloud` instance object.
@return `TRTCCloud` subinstance

</member>
        <member name="M:trtc.ITRTCCloud.setDefaultStreamRecvMode(System.Boolean,System.Boolean)">
2.7. Set subscription mode (which must be set before room entry for it to take effect)

You can switch between the "automatic subscription" and "manual subscription" modes through this API:
- Automatic subscription: this is the default mode, where the user will immediately receive the audio/video streams in the room after room entry, so that the audio will be automatically played back, and the video will be automatically decoded (you still need to bind the rendering control through the `startRemoteView` API).
- Manual subscription: after room entry, the user needs to manually call the {@startRemoteView} API to start subscribing to and decoding the video stream and call the `{@muteRemoteAudio} (false)` API to start playing back the audio stream.
In most scenarios, users will subscribe to the audio/video streams of all anchors in the room after room entry. Therefore, TRTC adopts the automatic subscription mode by default in order to achieve the best "instant streaming experience".
In your application scenario, if there are many audio/video streams being published at the same time in each room, and each user only wants to subscribe to 1–2 streams of them, we recommend you use the "manual subscription" mode to reduce the traffic costs.
@param autoRecvAudio YES: automatic subscription to audio; NO: manual subscription to audio by calling `muteRemoteAudio(false)`. Default value: YES
@param autoRecvVideo YES: automatic subscription to video; NO: manual subscription to video by calling `startRemoteView`. Default value: YES
@note
1. The configuration takes effect only if this API is called before room entry (enterRoom).
2. In the automatic subscription mode, if the user does not call {@startRemoteView} to subscribe to the video stream after room entry, the SDK will automatically stop subscribing to the video stream in order to reduce the traffic consumption.

</member>
        <member name="M:trtc.ITRTCCloud.disconnectOtherRoom">
2.6. Exit cross-room call

The result will be returned through the `onDisconnectOtherRoom()` callback in {@link TRTCCloudDelegate}.

</member>
        <member name="M:trtc.ITRTCCloud.connectOtherRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.5. Request cross-room call

By default, only users in the same room can make audio/video calls with each other, and the audio/video streams in different rooms are isolated from each other.
However, you can publish the audio/video streams of an anchor in another room to the current room by calling this API. At the same time, this API will also publish the local audio/video streams to the target anchor's room.
In other words, you can use this API to share the audio/video streams of two anchors in two different rooms, so that the audience in each room can watch the streams of these two anchors. This feature can be used to implement anchor competition.
The result of requesting cross-room call will be returned through the `onConnectOtherRoom()` callback in {@link TRTCCloudDelegate}.
For example, after anchor A in room "101" uses `connectOtherRoom()` to successfully call anchor B in room "102":
- All users in room "101" will receive the `onRemoteUserEnterRoom(B)` and `onUserVideoAvailable(B,YES)` event callbacks of anchor B; that is, all users in room "101" can subscribe to the audio/video streams of anchor B.
- All users in room "102" will receive the `onRemoteUserEnterRoom(A)` and `onUserVideoAvailable(A,YES)` event callbacks of anchor A; that is, all users in room "102" can subscribe to the audio/video streams of anchor A.
<pre>
                                  Room 101                          Room 102
                            ---------------------               ---------------------
 Before cross-room call:   | Anchor:     A       |             | Anchor:     B       |
                           | Users :   U, V, W   |             | Users:   X, Y, Z    |
                            ---------------------               ---------------------

                                  Room 101                           Room 102
                            ---------------------               ---------------------
 After cross-room call:    | Anchors: A and B    |             | Anchors: B and A    |
                           | Users  : U, V, W    |             | Users  : X, Y, Z    |
                            ---------------------               ---------------------
</pre>
For compatibility with subsequent extended fields for cross-room call, parameters in JSON format are used currently.
Case 1: numeric room ID
If anchor A in room "101" wants to co-anchor with anchor B in room "102", then anchor A needs to pass in {"roomId": 102, "userId": "userB"} when calling this API.
Below is the sample code:
<pre>
  Json::Value jsonObj;
  jsonObj["roomId"] = 102;
  jsonObj["userId"] = "userB";
  Json::FastWriter writer;
  std::string params = writer.write(jsonObj);
  trtc.ConnectOtherRoom(params.c_str());
</pre>

Case 2: string room ID
If you use a string room ID, please be sure to replace the `roomId` in JSON with `strRoomId`, such as {"strRoomId": "102", "userId": "userB"}
Below is the sample code:
<pre>
  Json::Value jsonObj;
  jsonObj["strRoomId"] = "102";
  jsonObj["userId"] = "userB";
  Json::FastWriter writer;
  std::string params = writer.write(jsonObj);
  trtc.ConnectOtherRoom(params.c_str());
</pre>

@param param You need to pass in a string parameter in JSON format: `roomId` represents the room ID in numeric format, `strRoomId` represents the room ID in string format, and `userId` represents the user ID of the target anchor.

</member>
        <member name="M:trtc.ITRTCCloud.switchRoom(trtc.TRTCSwitchRoomConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
2.4. Switch room

This API is used to quickly switch a user from one room to another.
- If the user's role is "audience", calling this API is equivalent to `exitRoom` (current room) + `enterRoom` (new room).
- If the user's role is "anchor", the API will retain the current audio/video publishing status while switching the room; therefore, during the room switch, camera preview and sound capturing will not be interrupted.
This API is suitable for the online education scenario where the supervising teacher can perform fast room switch across multiple rooms. In this scenario, using `switchRoom` can get better smoothness and use less code than `exitRoom + enterRoom`.
The API call result will be called back through `onSwitchRoom(errCode, errMsg)` in {@link TRTCCloudDelegate}.
@param config Room parameter. For more information, please see {@link TRTCSwitchRoomConfig}.
@note Due to the requirement for compatibility with legacy versions of the SDK, the `config` parameter contains both `roomId` and `strRoomId` parameters. You should pay special attention as detailed below when specifying these two parameters:
1. If you decide to use `strRoomId`, then set `roomId` to 0. If both are specified, `roomId` will be used. 
2. All rooms need to use either `strRoomId` or `roomId` at the same time. They cannot be mixed; otherwise, there will be many unexpected bugs.

</member>
        <member name="M:trtc.ITRTCCloud.switchRole(trtc.TRTCRoleType)">
2.3. Switch role

This API is used to switch the user role between "anchor" and "audience".
As video live rooms and audio chat rooms need to support an audience of up to 100,000 concurrent online users, the rule "only anchors can publish their audio/video streams" has been set. Therefore, when some users want to publish their streams (so that they can interact with anchors), they need to switch their role to "anchor" first.
You can use the `role` field in {@link TRTCParams} during room entry to specify the user role in advance or use the `switchRole` API to switch roles after room entry.
@param role Role, which is "anchor" by default:
- {@link TRTCRoleAnchor}: anchor, who can publish their audio/video streams. Up to 50 anchors are allowed to publish streams at the same time in one room.
- {@link TRTCRoleAudience}: audience, who cannot publish their audio/video streams, but can only watch streams of anchors in the room. If they want to publish their streams, they need to switch to the "anchor" role first through {@link switchRole}. One room supports an audience of up to 100,000 concurrent online users.
@note
1. This API is only applicable to two scenarios: live streaming ({@link TRTCAppSceneLIVE}) and audio chat room ({@link TRTCAppSceneVoiceChatRoom}).
2. If the `scene` you specify in {@link enterRoom} is {@link TRTCAppSceneVideoCall} or {@link TRTCAppSceneAudioCall}, please do not call this API.

</member>
        <member name="M:trtc.ITRTCCloud.exitRoom">
2.2. Exit room

Calling this API will allow the user to leave the current audio or video room and release the camera, mic, speaker, and other device resources.
After resources are released, the SDK will use the `onExitRoom()` callback in {@link TRTCCloudDelegate} to notify you.
If you need to call {@link enterRoom} again or switch to the SDK of another provider, we recommend you wait until you receive the `onExitRoom()` callback, so as to avoid the problem of the camera or mic being occupied.

</member>
        <member name="M:trtc.ITRTCCloud.removeCallback(trtc.ITRTCCloudCallback*)">
1.4. Remove TRTC event callback

@param callback

</member>
        <member name="M:trtc.ITRTCCloud.addCallback(trtc.ITRTCCloudCallback*)">
1.3. Set TRTC event callback

You can use {@link TRTCCloudDelegate} to get various event notifications from the SDK, such as error codes, warning codes, and audio/video status parameters.

</member>
        <member name="M:trtc.ITRTCCloud.destroyTRTCShareInstance">
1.2. Terminate `TRTCCloud` instance (singleton mode) 

</member>
        <member name="M:trtc.ITRTCCloud.getTRTCShareInstance">
@name TRTCCloud basic APIs
@{
1.1. Create `TRTCCloud` instance (singleton mode)

@param context It is only applicable to the Android platform. The SDK internally converts it into the `ApplicationContext` of Android to call the Android system API.
@note 
1. If you use `delete ITRTCCloud*`, a compilation error will occur. Please use `destroyTRTCCloud` to release the object pointer.
2. On Windows, macOS, or iOS, please call the `getTRTCShareInstance()` API.
3. On Android, please call the `getTRTCShareInstance(void *context)` API.

</member>
        <member name="M:getTRTCShareInstance">
Export the following C-style interface to facilitate “LoadLibrary()”
You can use the following methods to create and destroy TRTCCloud instance:
<pre>
   ITRTCCloud *trtcCloud = getTRTCShareInstance();
   if(trtcCloud) {
       std::string version(trtcCloud-&gt;getSDKVersion());
   }
   //
   //
   destroyTRTCShareInstance();
   trtcCloud = nullptr;
</pre>

@name Exported C function
@{
</member>
        <member name="D:LiteAVVideoBufferType">
以下定义仅用于兼容原有接口，具体定义参见 TRTCTypeDef.h 文件

</member>
        <member name="M:setGlobalEnv(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
设置 liteav SDK 接入的环境。
腾讯云在全球各地区部署的环境，按照各地区政策法规要求，需要接入不同地区接入点。

@param env_config 需要接入的环境，SDK 默认接入的环境是：默认正式环境。
@return 0：成功；其他：错误
@note 目标市场为中国大陆的客户请不要调用此接口，如果目标市场为海外用户，请通过技术支持联系我们，了解 env_config 的配置方法，以确保 App 遵守 GDPR 标准。

</member>
        <member name="M:getLiteAvSDKVersion">
 Module:   TXLiteAVBase @ liteav

 Function: SDK 公共定义头文件


@name SDK 导出基础功能接口
@{
 \brief 获取 SDK 版本号

 \return 返回 UTF-8 编码的版本号。


@name SDK 导出基础功能接口
@{
 \brief 获取 SDK 版本号

 \return 返回 UTF-8 编码的版本号。

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.sendCustomVideoData(trtc.TRTCVideoFrame*)">
 TRTCVideoFrame 推荐如下填写方式（其他字段不需要填写）：
 - pixelFormat： Windows、Android平台仅支持 TRTCVideoPixelFormat_I420，iOS、Mac平台支持TRTCVideoPixelFormat_I420和TRTCVideoPixelFormat_BGRA32
 - bufferType：仅支持 TRTCVideoBufferType_Buffer。
 - data：视频帧 buffer。
 - length：视频帧数据长度，I420 格式下，其值等于：width × height × 3 / 2。
 - width：视频图像长度。
 - height：视频图像宽度。
 - timestamp：如果 timestamp 间隔不均匀，会严重影响音画同步和录制出的 MP4 质量。

 参考文档：[自定义采集和渲染](https://cloud.tencent.com/document/product/647/34066)。
 @param frame 视频数据，支持 I420 格式数据。
 @note - SDK 内部有帧率控制逻辑，目标帧率以您在 setVideoEncoderParam 中设置的为准，太快会自动丢帧，太慢则会自动补帧。
       - 可以设置 frame 中的 timestamp 为 0，相当于让 SDK 自己设置时间戳，但请“均匀”地控制 sendCustomVideoData 的调用间隔，否则会导致视频帧率不稳定。
       - iOS、Mac平台目前仅支持传入TRTCVideoPixelFormat_I420或TRTCVideoPixelFormat_BGRA32格式的视频帧
       - Windows、Android平台目前仅支持传入TRTCVideoPixelFormat_I420格式的视频帧

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.enableCustomVideoCapture(System.Boolean)">
 启用视频自定义采集模式

 开启该模式后，SDK 不再运行原有的视频采集流程，只保留编码和发送能力。
 您需要用 sendCustomVideoData() 不断地向 SDK 塞入自己采集的视频画面。

 @param enable 是否启用，默认值：false

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.selectScreenCaptureTarget(trtc.TRTCScreenCaptureSourceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
 设置屏幕共享参数

 @deprecated v7.9 版本弃用，请使用 selectScreenCaptureTarget(TRTCScreenCaptureSourceInfo,RECT,TRTCScreenCaptureProperty) 接口
 @param source            指定分享源
 @param captureRect       指定捕获的区域
 @param captureMouse      指定是否捕获鼠标指针
 @param highlightWindow   指定是否高亮正在共享的窗口，以及当捕获图像被遮挡时高亮遮挡窗口提示用户移走遮挡

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.resumeAudioEffect(System.Int32)">
 恢复音效

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager resumePlayMusic 接口
 @param effectId 音效 Id

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.pauseAudioEffect(System.Int32)">
 暂停音效

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager pausePlayMusic 接口
 @param effectId 音效 Id

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setAllAudioEffectsVolume(System.Int32)">
 设置所有音效的音量

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPublishVolume / setMusicPlayoutVolume 接口
 @note 该操作会覆盖通过 setAudioEffectVolume 指定的单独音效音量。

 @param volume 音量大小，取值范围为0 - 100；默认值：100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopAllAudioEffects">
 停止所有音效

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager stopPlayMusic 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopAudioEffect(System.Int32)">
 停止音效

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager stopPlayMusic 接口
 @param effectId 音效 ID

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setAudioEffectVolume(System.Int32,System.Int32)">
 设置音效音量

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager setMusicPublishVolume / setMusicPlayoutVolume 接口
 @note 会覆盖通过 setAllAudioEffectsVolume 指定的整体音效音量。

 @param effectId 音效 ID
 @param volume   音量大小，取值范围为0 - 100；默认值：100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.playAudioEffect(trtc.TRTCAudioEffectParam*)">
 播放音效

 每个音效都需要您指定具体的 ID，您可以通过该 ID 对音效的开始、停止、音量等进行设置。
 支持的文件格式：aac, mp3。

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager startPlayMusic 接口
 @note 若您想同时播放多个音效，请分配不同的 ID 进行播放。因为使用同一个 ID 播放不同音效，SDK
 将会停止上一个 ID 对应的音效播放，再启动新的音效播放。

 @param effect 音效

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setBGMPublishVolume(System.UInt32)">
 设置背景音乐远端播放音量的大小

 播放背景音乐混音时使用，用来控制背景音乐在远端播放时的音量大小。

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager::setMusicPublishVolume 接口
 @param volume 音量大小，100为正常音量，取值范围为0 - 100；默认值：100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setBGMPlayoutVolume(System.UInt32)">
 设置背景音乐本地播放音量的大小

 播放背景音乐混音时使用，用来控制背景音乐在本地播放时的音量大小。

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager::setMusicPlayoutVolume 接口
 @param volume 音量大小，100为正常音量，取值范围为0 - 100；默认值：100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setBGMVolume(System.UInt32)">
 设置背景音乐播放音量的大小

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager::setMusicPublishVolume / setMusicPlayoutVolume 接口播放背景音乐混音时使用，用来控制背景音乐播放音量的大小，
 该接口会同时控制远端播放音量的大小和本地播放音量的大小，因此调用该接口后，setBGMPlayoutVolume和setBGMPublishVolume设置的音量值会被覆盖。

 @param volume 音量大小，100为正常音量，取值范围为0 - 100；默认值：100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setBGMPosition(System.UInt32)">
 设置 BGM 播放进度

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager seekMusicToPosInMS 接口
 @param pos 单位毫秒

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getBGMDuration(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 获取音乐文件总时长，单位毫秒

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager getMusicDurationInMS 接口
 @param path 音乐文件路径，如果 path 为空，那么返回当前正在播放的 music 时长
 @return     成功返回时长，失败返回-1

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.resumeBGM">
 继续播放背景音乐

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager resumePlayMusic 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.pauseBGM">
 暂停播放背景音乐

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager pausePlayMusic 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopBGM">
 停止播放背景音乐

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager stopPlayMusic 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.playBGM(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 启动播放背景音乐

 @deprecated v7.3 版本弃用，请使用 TXAudioEffectManager startPlayMusic 接口，支持并发播放多个 BGM

 @param path 音乐文件路径，支持的文件格式：aac, mp3。

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startScreenCapture(HWND__*)">
 启动屏幕分享

 @deprecated 从 v7.2 版本开始废弃，请使用 startScreenCapture(rendView, type, params) 接口替代。

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setMicVolumeOnMixing(System.UInt32)">
 设置麦克风的音量大小

 @deprecated 从 v6.9 版本开始废弃，请使用 setAudioCaptureVolume 接口替代。

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopSpeakerDeviceTest">
停止扬声器测试

@deprecated v8.0 版本弃用，请使用 ITXDeviceManager::stopSpeakerDeviceTest 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startSpeakerDeviceTest(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 开启扬声器测试

 回调接口 onTestSpeakerVolume 获取测试数据

 该方法播放指定的音频文件测试播放设备是否能正常工作。如果能听到声音，说明播放设备能正常工作。

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::startSpeakerDeviceTest 接口
 @param testAudioFilePath 音频文件的绝对路径，路径字符串使用 UTF-8 编码格式，支持文件格式：WAV、MP3

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopMicDeviceTest">
停止麦克风测试

@deprecated v8.0 版本弃用，请使用 ITXDeviceManager::stopMicDeviceTest 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startMicDeviceTest(System.UInt32)">
 开启麦克风测试

 回调接口 onTestMicVolume 获取测试数据

 该方法测试麦克风是否能正常工作，volume 的取值范围为0 - 100。

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::startMicDeviceTest 接口
 @param interval 反馈音量提示的时间间隔（ms），建议设置到大于 200 毫秒

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopCameraDeviceTest">
停止摄像头测试

@deprecated v8.0 版本弃用，请使用 ITXDeviceManager::stopCameraDeviceTest 接口

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startCameraDeviceTest(trtc.ITRTCVideoRenderCallback*)">
 开始进行摄像头测试

 会触发 onFirstVideoFrame 回调接口

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::startCameraDeviceTest 接口
 @note 在测试过程中可以使用 setCurrentCameraDevice 接口切换摄像头。
 @param callback 摄像头预览自定义渲染画面回调

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startCameraDeviceTest(HWND__*)">
 开始进行摄像头测试

 会触发 onFirstVideoFrame 回调接口

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::startCameraDeviceTest 接口
 @note 在测试过程中可以使用 setCurrentCameraDevice 接口切换摄像头。
 @param rendView 承载预览画面的 HWND

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentSpeakerDeviceMute">
 获取系统当前扬声器设备是否静音

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDeviceMute 接口
 @note 查询的是系统硬件静音状态

 @return 静音状态

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentSpeakerDeviceMute(System.Boolean)">
 设置系统当前扬声器设备的是否静音

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDeviceMute 接口
 @note 该接口的功能是设置系统扬声器静音，如果用户直接设置 Windows 系统设置的扬声器静音时，该接口的设置结果会被用户的操作所覆盖。

 @param mute 设置为 true 时，则设置扬声器设备静音

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentSpeakerVolume(System.UInt32)">
 设置系统当前扬声器设备音量

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDeviceVolume 接口
 @note 该接口的功能是调节系统播放音量，如果用户直接调节 Windows 系统设置的播放音量时，该接口的设置结果会被用户的操作所覆盖。

 @param volume 设置的扬声器音量，范围0 - 100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentSpeakerVolume">
 获取系统当前扬声器设备音量

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDeviceVolume 接口
 @note 查询的是系统硬件音量大小。

 @return 扬声器音量，范围0 - 100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentSpeakerDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 设置要使用的扬声器

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDevice 接口
 @param speakerId 从 getSpeakerDevicesList 中得到的设备 ID

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentSpeakerDevice">
 获取当前的扬声器设备

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDevice 接口
 @return ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentMicDeviceMute">
 获取系统当前麦克风设备是否静音

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDeviceMute 接口
 @note 查询的是系统硬件静音状态

 @return 静音状态

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentMicDeviceMute(System.Boolean)">
 设置系统当前麦克风设备的是否静音

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDeviceMute 接口
 @note 该接口的功能是设置系统麦克风静音，如果用户直接设置 Windows 系统设置的麦克风静音时，该接口的设置结果会被用户的操作所覆盖。

 @param mute 设置为 true 时，则设置麦克风设备静音

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentMicDeviceVolume(System.UInt32)">
 设置系统当前麦克风设备的音量

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDeviceVolume 接口
 @note 该接口的功能是调节系统采集音量，如果用户直接调节 Windows 系统设置的采集音量时，该接口的设置结果会被用户的操作所覆盖。

 @param volume 麦克风音量值，范围0 - 100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentMicDeviceVolume">
 获取系统当前麦克风设备音量

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDeviceVolume 接口
 @note 查询的是系统硬件音量大小。

 @return 音量值，范围是0 - 100

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentMicDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 设置要使用的麦克风

 选择指定的麦克风作为录音设备，不调用该接口时，默认选择索引为0的麦克风

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDevice 接口
 @param micId 从 getMicDevicesList 中得到的设备 ID

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentMicDevice">
 获取当前选择的麦克风

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDevice 接口
 @return ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.getCurrentCameraDevice">
 获取当前使用的摄像头

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::getCurrentDevice 接口
 @return ITRTCDeviceInfo 设备信息，能获取设备 ID 和设备名称

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setCurrentCameraDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 设置要使用的摄像头

 @deprecated v8.0 版本弃用，请使用 ITXDeviceManager::setCurrentDevice 接口
 @param deviceId 从 getCameraDevicesList 中得到的设备 ID

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setPriorRemoteVideoStreamType(trtc.TRTCVideoStreamType)">
 设定观看方优先选择的视频质量

 低端设备推荐优先选择低清晰度的小画面。
 如果对方没有开启双路视频模式，则此操作无效。

 @deprecated v8.0 版本弃用，请使用 startRemoteView(userId, streamType, rendView) 接口
 @param type 默认观看大画面还是小画面，默认为 TRTCVideoStreamTypeBig

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setAudioQuality(trtc.TRTCAudioQuality)">
 设置音频质量

 主播端的音质越高，观众端的听感越好，但传输所依赖的带宽也就越高，在带宽有限的场景下也更容易出现卡顿。

 - {@link TRTCCloudDef#TRTCAudioQualitySpeech}，流畅：采样率：16k；单声道；音频裸码率：16kbps；适合语音通话为主的场景，比如在线会议，语音通话。
 - {@link TRTCCloudDef#TRTCAudioQualityDefault}，默认：采样率：48k；单声道；音频裸码率：50kbps；SDK 默认的音频质量，如无特殊需求推荐选择之。
 - {@link TRTCCloudDef#TRTCAudioQualityMusic}，高音质：采样率：48k；双声道 + 全频带；音频裸码率：128kbps；适合需要高保真传输音乐的场景，比如K歌、音乐直播等。

 @deprecated v8.0 版本弃用，请使用 startLocalAudio(TRTCAudioQuality) 接口
 @note 该方法需要在 startLocalAudio 之前进行设置，否则不会生效。

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setRemoteSubStreamViewRotation(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoRotation)">
 设置辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的顺时针旋转角度
 
 - setRemoteViewRotation() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的旋转角度。
 - setRemoteSubStreamViewRotation() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的旋转角度。

 @deprecated v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口
 @param userId 用户 ID
 @param rotation 支持90、180、270旋转角度

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setRemoteSubStreamViewFillMode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoFillMode)">
 设置辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的显示模式
 
 - setRemoteViewFillMode() 用于设置远端主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）的显示模式。
 - setRemoteSubStreamViewFillMode() 用于设置远端辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）的显示模式。

 @deprecated v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口
 @param userId 用户的 ID
 @param mode 填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopRemoteSubStreamView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
停止显示远端用户的辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）。

@deprecated v8.0 版本弃用，请使用 stopRemoteView(userId,streamType) 接口
@param userId 对方的用户标识

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startRemoteSubStreamView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,HWND__*)">
 开始显示远端用户的辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）

 - startRemoteView() 用于显示主路画面（TRTCVideoStreamTypeBig，一般用于摄像头）。
 - startRemoteSubStreamView() 用于显示辅路画面（TRTCVideoStreamTypeSub，一般用于屏幕分享）。

 @deprecated v8.0 版本弃用，请使用 startRemoteView(userId,streamType,rendView) 接口
 @param userId  对方的用户标识
 @param rendView 渲染画面的 TXView
 @note 请在 onUserSubStreamAvailable 回调后再调用这个接口。

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setRemoteViewRotation(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoRotation)">
 设置远端图像的顺时针旋转角度

 @deprecated v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口
 @param userId 用户 ID
 @param rotation 支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setRemoteViewFillMode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoFillMode)">
 设置远端图像的渲染模式

 @deprecated v8.0 版本弃用，请使用 setRemoteRenderParams(userId,streamType,param) 接口
 @param userId 用户 ID
 @param mode 填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setLocalViewMirror(System.Boolean)">
 设置本地摄像头预览画面的镜像模式

 @deprecated v8.0 版本弃用，请使用 setLocalRenderParams(TRTCRenderParams) 接口
 @param mirror 镜像模式，默认值：false（非镜像模式）

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setLocalViewRotation(trtc.TRTCVideoRotation)">
 设置本地图像的顺时针旋转角度

 @deprecated v8.0 版本弃用，请使用 setLocalRenderParams(TRTCRenderParams) 接口
 @param rotation 支持 TRTCVideoRotation90 、 TRTCVideoRotation180 以及 TRTCVideoRotation270 旋转角度，默认值：TRTCVideoRotation0

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.setLocalViewFillMode(trtc.TRTCVideoFillMode)">
 设置本地图像的填充模式

 @deprecated v8.0 版本弃用，请使用 setLocalRenderParams(TRTCRenderParams) 接口
 @param mode 填充（画面可能会被拉伸裁剪）或适应（画面可能会有黑边），默认值：TRTCVideoFillMode_Fit

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.stopRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 停止显示远端视频画面，同时不再拉取该远端用户的视频数据流

 调用此接口后，SDK 会停止接收该用户的远程视频流，同时会清理相关的视频显示资源。

 @deprecated v8.0 版本弃用，请使用 stopRemoteView(userId,streamType) 接口
 @param userId 对方的用户标识

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startRemoteView(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,HWND__*)">
 开始显示远端视频画面

 在收到 SDK 的 onUserVideoAvailable(userId, true) 通知时，可以获知该远程用户开启了视频，此后调用 startRemoteView(userId) 接口加载该用户的远程画面时，
 可以用 loading 动画优化加载过程中的等待体验。 待该用户的首帧画面开始显示时，您会收到 onFirstVideoFrame(userId) 事件回调。

 @deprecated v8.0 版本弃用，请使用 startRemoteView(userId, streamType, rendView) 接口
 @param userId   对方的用户标识
 @param rendView 承载预览画面的窗口句柄

</member>
        <member name="M:trtc.IDeprecatedTRTCCloud.startLocalAudio">
@name 弃用接口函数
@{
 开启本地音频的采集和上行

 该函数会启动麦克风采集，并将音频数据传输给房间里的其他用户。
 SDK 不会默认开启本地音频采集和上行，您需要调用该函数开启，否则房间里的其他用户将无法听到您的声音。

 @deprecated v8.0 版本弃用，请使用 startLocalAudio(quality) 接口
 @note TRTC SDK 并不会默认打开本地的麦克风采集。

</member>
        <member name="T:trtc.IDeprecatedTRTCCloud">
@defgroup IDeprecatedTRTCCloud_cplusplus IDeprecatedTRTCCloud
腾讯云视频通话的 Windows C++ 专有废弃接口
@{
</member>
        <member name="M:trtc.ITXAudioEffectManager.seekMusicToPosInTime(System.Int32,System.Int32)">
2.12 Setting the playback progress (ms) of background music

@note Do not call this API frequently as the music file may be read and written to each time the API is called, which can be time-consuming.
      Wait till users finish dragging the progress bar before you call this API.
      The progress bar controller on the UI tends to update the progress at a high frequency as users drag the progress bar. This will result in poor user experience unless you limit the frequency.

@param id    Music ID
@param pts Unit: millisecond

</member>
        <member name="M:trtc.ITXAudioEffectManager.getMusicDurationInMS(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
2.11 Getting the total length (ms) of background music

@param path Path of the music file. If it is not specified, the length of the music file being played is returned.
@return The length of the specified music file is returned. -1 indicates failure to get the length.

</member>
        <member name="M:trtc.ITXAudioEffectManager.getMusicCurrentPosInMS(System.Int32)">
2.10 Getting the playback progress (ms) of background music

@param id    Music ID
@return The milliseconds that have passed since playback started. -1 indicates failure to get the the playback progress.

</member>
        <member name="M:trtc.ITXAudioEffectManager.setMusicSpeedRate(System.Int32,System.Single)">
2.9 Changing the speed of background music

@param id    Music ID
@param speedRate Music speed. Value range: floating point numbers in the range of [0.5, 2]; default: 1.0f

</member>
        <member name="M:trtc.ITXAudioEffectManager.setMusicPitch(System.Int32,System.Single)">
2.8 Adjusting the pitch of background music

@param id    Music ID
@param pitch Pitch. Value range: floating point numbers in the range of [-1, 1]; default: 0.0f

</member>
        <member name="M:trtc.ITXAudioEffectManager.setMusicPlayoutVolume(System.Int32,System.Int32)">
2.7 Setting the local playback volume of a specific music track

This API is used to control the local playback volume (the volume heard by anchors) of a specific music track.

@param id     Music ID
@param volume Volume. Value range: 0-100. default: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITXAudioEffectManager.setMusicPublishVolume(System.Int32,System.Int32)">
2.6 Setting the remote playback volume of a specific music track

This API is used to control the remote playback volume (the volume heard by audience) of a specific music track.

@param id     Music ID
@param volume Volume. Value range: 0-100; default: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITXAudioEffectManager.setAllMusicVolume(System.Int32)">
2.5 Setting the local and remote playback volume of background music

This API is used to set the local and remote playback volume of background music.
- Local volume: the volume of music heard by anchors
- Remote volume: the volume of music heard by audience

@param volume Volume. Value range: 0-100; default: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITXAudioEffectManager.resumePlayMusic(System.Int32)">
2.4 Resuming background music

@param id    Music ID

</member>
        <member name="M:trtc.ITXAudioEffectManager.pausePlayMusic(System.Int32)">
2.3 Pausing background music

@param id    Music ID

</member>
        <member name="M:trtc.ITXAudioEffectManager.stopPlayMusic(System.Int32)">
2.2 Stopping background music

@param id    Music ID

</member>
        <member name="M:trtc.ITXAudioEffectManager.startPlayMusic(trtc.AudioMusicParam)">
2.1 Starting background music

You must assign an ID to each music track so that you can start, stop, or set the volume of music tracks by ID.

@note 
1. If you play the same music track multiple times, please use the same ID instead of a separate ID for each playback.
2. If you want to play different music tracks at the same time, use different IDs for them.
3. If you use the same ID to play a music track different from the current one, the SDK will stop the current one before playing the new one.

@param musicParam Music parameter
@param startBlock Callback of starting music
@param progressBlock Callback of playback progress
@param completeBlock Callback of ending music

</member>
        <member name="M:trtc.ITXAudioEffectManager.setMusicObserver(System.Int32,trtc.ITXMusicPlayObserver*)">
@}
@name Background music APIs
@{
2.0 Setting the background music callback

Before playing background music, please use this API to set the music callback, which can inform you of the playback progress.

@param musicId   Music ID
@param observer  For more information, please see the APIs defined in `ITXMusicPlayObserver`.

</member>
        <member name="M:trtc.ITXAudioEffectManager.setVoiceCaptureVolume(System.Int32)">
1.5 Setting speech volume

This API is used to set the volume of speech. It is often used together with the music volume setting API {@link setAllMusicVolume} to balance between the volume of music and speech.

@param volume Volume. Value range: 0-100; default: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITXAudioEffectManager.setVoiceReverbType(trtc.TXVoiceReverbType)">
@}
@name Voice effect APIs
@{
1.3 Setting voice reverb effects

This API is used to set reverb effects for human voice. For the effects supported, please see {@link TXVoiceReverbType}.

@note Effects become invalid after room exit. If you want to use the same effect after you enter the room again, you need to set the effect again using this API.

</member>
        <member name="F:trtc.AudioMusicParam.endTimeMS">
**Field description:** the point in time in milliseconds for ending music playback. 0 indicates that playback continues till the end of the music track.
</member>
        <member name="F:trtc.AudioMusicParam.startTimeMS">
**Field description:** the point in time in milliseconds for starting music playback
</member>
        <member name="F:trtc.AudioMusicParam.isShortFile">
**Field description:** whether the music played is a short music track <br />
**Valid values:** `YES`: short music track that needs to be looped; `NO` (default): normal-length music track
</member>
        <member name="F:trtc.AudioMusicParam.publish">
**Field description:** whether to send the music to remote users<br />
**Valid values:** `YES`: remote users can hear the music played locally; `NO` (default): only the local user can hear the music.
</member>
        <member name="F:trtc.AudioMusicParam.loopCount">
**Field description:** number of times the music track is looped <br />
**Valid values:** 0 or any positive integer. 0 (default) indicates that the music is played once, 1 twice, and so on.
</member>
        <member name="F:trtc.AudioMusicParam.path">
**Field description:** absolute path of the music file
</member>
        <member name="F:trtc.AudioMusicParam.id">
**Field description:** music ID<br />
**Note:** the SDK supports playing multiple music tracks. IDs are used to distinguish different music tracks and control their start, end, volume, etc.
</member>
        <member name="T:trtc.AudioMusicParam">
@}
@name Background music playback information
@{
Background music playback information

The information, including playback ID, file path, and loop times, is passed in the {@link startPlayMusic} API.
1. If you play the same music track multiple times, please use the same ID instead of a separate ID for each playback.
2. If you want to play different music tracks at the same time, use different IDs for them.
3. If you use the same ID to play a music track different from the current one, the SDK will stop the current one before playing the new one.

</member>
        <member name="M:trtc.ITXMusicPlayObserver.onComplete(System.Int32,System.Int32)">
Background music ended
</member>
        <member name="M:trtc.ITXMusicPlayObserver.onPlayProgress(System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
Playback progress of background music
</member>
        <member name="M:trtc.ITXMusicPlayObserver.onStart(System.Int32,System.Int32)">
Background music started.
</member>
        <member name="T:trtc.ITXMusicPlayObserver">
@}
@name Callback of playing background music
@{
</member>
        <member name="T:trtc.TXVoiceReverbType">
@defgroup TXAudioEffectManager_cplusplus TXAudioEffectManager
Tencent Cloud Audio Effect Management Module
@{
@name Definitions of enumerated values related to audio effects
@{
1.1 Reverb effects

Reverb effects can be applied to human voice. Based on acoustic algorithms, they can mimic voice in different environments. The following effects are supported currently:
0: original; 1: karaoke; 2: room; 3: hall; 4: low and deep; 5: resonant; 6: metal; 7: husky

</member>
        <member name="M:trtc.ITRTCLogCallback.onLog(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCLogLevel,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Printing of local log

If you want to capture the local log printing event, you can configure the log callback to have the SDK return to you via this callback all logs that are to be printed.
@param log Log content
@param level Log level. For more information, please see `TRTC_LOG_LEVEL`.
@param module Reserved field, which is not defined at the moment and has a fixed value of `TXLiteAVSDK`.

</member>
        <member name="T:trtc.ITRTCLogCallback">
@}
@name Other event callbacks
@{
</member>
        <member name="M:trtc.ITRTCAudioFrameCallback.onMixedPlayAudioFrame(trtc.TRTCAudioFrame*)">
Data mixed from each channel before being submitted to the system for playback

After you configure the callback of custom audio processing, the SDK will return to you via this callback the data (PCM format) mixed from each channel before it is submitted to the system for playback.
- The audio data returned via this callback is in PCM format and has a fixed frame length (time) of 0.02s.
- The formula to convert a frame length in seconds to one in bytes is **sample rate * frame length in seconds * number of sound channels * audio bit depth**.
- Assume that the audio is recorded on a single channel with a sample rate of 48,000 Hz and audio bit depth of 16 bits, which are the default settings of TRTC. The frame length in bytes will be **48000 * 0.02s * 1 * 16 bits = 15360 bits = 1920 bytes**.

@param frame Audio frames in PCM format
@note
1. Please avoid time-consuming operations in this callback function. The SDK processes an audio frame every 20 ms, so if your operation takes more than 20 ms, it will cause audio exceptions.
2. The audio data returned via this callback can be read and modified, but please keep the duration of your operation short.
3. The audio data returned via this callback is the audio data mixed from each channel before it is played. It does not include the in-ear monitoring data.

</member>
        <member name="M:trtc.ITRTCAudioFrameCallback.onPlayAudioFrame(trtc.TRTCAudioFrame*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Audio data of each remote user before audio mixing

After you configure the callback of custom audio processing, the SDK will return via this callback the raw audio data (PCM format) of each remote user before mixing.
- The audio data returned via this callback is in PCM format and has a fixed frame length (time) of 0.02s.
- The formula to convert a frame length in seconds to one in bytes is **sample rate * frame length in seconds * number of sound channels * audio bit depth**.
- Assume that the audio is recorded on a single channel with a sample rate of 48,000 Hz and audio bit depth of 16 bits, which are the default settings of TRTC. The frame length in bytes will be **48000 * 0.02s * 1 * 16 bits = 15360 bits = 1920 bytes**.

@param frame Audio frames in PCM format
@param userId User ID
@note The audio data returned via this callback can be read but not modified.

</member>
        <member name="M:trtc.ITRTCAudioFrameCallback.onLocalProcessedAudioFrame(trtc.TRTCAudioFrame*)">
Audio data captured by the local mic and pre-processed by the audio module

After you configure the callback of custom audio processing, the SDK will return via this callback the data captured and pre-processed (ANS, AEC, and AGC) in PCM format.
- The audio data returned via this callback is in PCM format and has a fixed frame length (time) of 0.02s.
- The formula to convert a frame length in seconds to one in bytes is **sample rate * frame length in seconds * number of sound channels * audio bit depth**.
- Assume that the audio is recorded on a single channel with a sample rate of 48,000 Hz and audio bit depth of 16 bits, which are the default settings of TRTC. The frame length in bytes will be **48000 * 0.02s * 1 * 16 bits = 15360 bits = 1920 bytes**.

@param frame Audio frames in PCM format
@note
1. Please avoid time-consuming operations in this callback function. The SDK processes an audio frame every 20 ms, so if your operation takes more than 20 ms, it will cause audio exceptions.
2. The audio data returned via this callback can be read and modified, but please keep the duration of your operation short.
3. Audio data is returned via this callback after AEC, but the delay is longer than that with {@link onCapturedRawAudioFrame}.

</member>
        <member name="M:trtc.ITRTCAudioFrameCallback.onCapturedAudioFrame(trtc.TRTCAudioFrame*)">
Raw audio data captured locally

After you configure the callback of custom audio processing, the SDK will return to you via this callback the raw audio data (PCM format) captured by the mic.
- The audio returned is in PCM format and has a fixed frame length (time) of 0.02s.
- The formula to convert a frame length in seconds to one in bytes is **sample rate * frame length in seconds * number of sound channels * audio bit depth**.
- Assume that the audio is recorded on a single channel with a sample rate of 48,000 Hz and audio bit depth of 16 bits, which are the default settings of TRTC. The frame length in bytes will be **48000 * 0.02s * 1 * 16 bits = 15360 bits = 1920 bytes**.

@param frame Audio frames in PCM format
@note
1. Please avoid time-consuming operations in this callback function. The SDK processes an audio frame every 20 ms, so if your operation takes more than 20 ms, it will cause audio exceptions.
2. The audio data returned via this callback can be read and modified, but please keep the duration of your operation short.
3. The audio data returned via this callback **does not include** pre-processing effects like background music, audio effects, or reverb, and therefore has a very short delay.

</member>
        <member name="T:trtc.ITRTCAudioFrameCallback">
@}
@name Callback of custom audio processing
@{
</member>
        <member name="M:trtc.ITRTCVideoRenderCallback.onRenderVideoFrame(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,trtc.TRTCVideoFrame*)">
Custom video rendering

If you have configured the callback of custom rendering for local or remote video, the SDK will return to you via this callback video frames that are otherwise sent to the rendering control, so that you can customize rendering.
@param frame Video frames to be rendered
@param userId `userId` of the video source. This parameter can be ignored if the callback is for local video (`setLocalVideoRenderDelegate`).
@param streamType Stream type. The primary stream (`Main`) is usually used for camera images, and the substream (`Sub`) for screen sharing images.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onPlayBGMComplete(TXLiteAVError)">
Background music stopped (disused)

@deprecated This callback is not recommended in the new version. Please use {@link ITXMusicPlayObserver} instead.
Audio effects and background music can be started using the same API ({@link startPlayMusic}) now instead of separate ones.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onPlayBGMProgress(System.UInt32,System.UInt32)">
Playback progress of background music (disused)

@deprecated This callback is not recommended in the new version. Please use {@link ITXMusicPlayObserver} instead.
Audio effects and background music can be started using the same API ({@link startPlayMusic}) now instead of separate ones.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onPlayBGMBegin(TXLiteAVError)">
Started playing background music (disused)

@deprecated This callback is not recommended in the new version. Please use {@link ITXMusicPlayObserver} instead.
Audio effects and background music can be started using the same API ({@link startPlayMusic}) now instead of separate ones.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onAudioEffectFinished(System.Int32,System.Int32)">
Audio effects ended (disused)

@deprecated This callback is not recommended in the new version. Please use {@link ITXAudioEffectManager} instead.
Audio effects and background music can be started using the same API ({@link startPlayMusic}) now instead of separate ones.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onUserExit(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
An anchor left the room (disused)

@deprecated This callback is not recommended in the new version. Please use {@link onRemoteUserLeaveRoom} instead.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onUserEnter(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name  Disused callbacks (please use the new ones)
@{
An anchor entered the room (disused)

@deprecated This callback is not recommended in the new version. Please use {@link onRemoteUserEnterRoom} instead.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSnapshotComplete(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.UInt32,System.UInt32,trtc.TRTCVideoPixelFormat)">
10.4 Finished taking a local screenshot

@param userId User ID. If it is empty, the screenshot is a local image.
@param type   Video stream type
@param data   Screenshot data. If it is `nullptr`, it indicates that the SDK failed to take the screenshot.
@param length Screenshot data length. In BGRA32 format, length = width * height * 4.
@param width  Screenshot width
@param height Screenshot height
@param format Screenshot data format. Only `TRTCVideoPixelFormat_BGRA32` is supported now.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onLocalRecordComplete(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
10.3 Local recording stopped

When you call {@link stopLocalRecording} to stop local recording, the SDK returns this callback to notify you of the recording result.
@param errCode Error code. `0`: recording succeeded; `-1`: recording failed; `-2`: recording was ended due to change of resolution or switch between the landscape and portrait mode.
@param storagePath Storage path of recording file

</member>
        <member name="M:trtc.ITRTCCloudCallback.onLocalRecording(System.Int32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
10.2 Local media is being recorded

The SDK returns this callback regularly after local recording is started successfully via the calling of {@link startLocalRecording}.
You can capture this callback to stay up to date with the status of the recording task.
You can set the callback interval when calling {@link startLocalRecording}.

@param duration Cumulative duration of recording, in milliseconds
@param storagePath Storage path of recording file

</member>
        <member name="M:trtc.ITRTCCloudCallback.onLocalRecordBegin(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name Callback of local recording and screenshot events
@{
10.1 Local recording started

When you call {@link startLocalRecording} to start local recording, the SDK returns this callback to notify you whether recording is started successfully.
@param errCode Error code. `0`: recording started successfully; `-1`: failed to start recording; `-2`: incorrect file extension
@param storagePath Storage path of recording file

</member>
        <member name="M:trtc.ITRTCCloudCallback.onScreenCaptureCovered">
9.5 The shared window was covered (for Windows only)

The SDK returns this callback when the shared window is covered and cannot be captured. Upon receiving this callback, you can prompt users via the UI to move and expose the window.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onScreenCaptureStoped(System.Int32)">
9.4 Screen sharing stopped

The SDK returns this callback when you call {@link stopScreenCapture} to stop screen sharing.
@param reason Reason. `0`: the user stopped screen sharing; `1`: screen sharing stopped because the shared window was closed.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onScreenCaptureResumed(System.Int32)">
9.3 Screen sharing was resumed

The SDK returns this callback when you call {@link resumeScreenCapture} to resume screen sharing.
@param reason Reason. `0`: the user resumed screen sharing; `1`: screen sharing was resumed automatically after the shared window became visible again.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onScreenCapturePaused(System.Int32)">
9.2 Screen sharing was paused

The SDK returns this callback when you call {@link pauseScreenCapture} to pause screen sharing.
@param reason Reason. `0`: the user paused screen sharing; `1`: screen sharing was paused because the shared window became invisible.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onScreenCaptureStarted">
@}
@name Screen sharing event callback
@{
9.1 Screen sharing started

The SDK returns this callback when you call {@link startScreenCapture} and other APIs to start screen sharing.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSetMixTranscodingConfig(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
8.5 Set the layout and transcoding parameters for On-Cloud MixTranscoding

When you call {@link setMixTranscodingConfig} to modify the layout and transcoding parameters for On-Cloud MixTranscoding, the SDK will sync the command to the CVM immediately.
The SDK will then receive the execution result from the CVM and return the result to you via this callback.

@param err `0`: successful; other values: failed
@param errMsg Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onStopPublishCDNStream(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
8.4 Stopped publishing to non-Tencent Cloud’s live streaming CDN

When you call {@link stopPublishCDNStream} to stop publishing to a non-Tencent Cloud’s live streaming CDN, the SDK will sync the command to the CVM immediately.
The SDK will then receive the execution result from the CVM and return the result to you via this callback.

@param err `0`: successful; other values: failed
@param errMsg Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onStartPublishCDNStream(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
8.3 Started publishing to non-Tencent Cloud’s live streaming CDN

When you call {@link startPublishCDNStream} to start publishing streams to a non-Tencent Cloud’s live streaming CDN, the SDK will sync the command to the CVM immediately.
The SDK will then receive the execution result from the CVM and return the result to you via this callback.

@note If you receive a callback that the command is executed successfully, it only means that your command was sent to Tencent Cloud’s backend server. If the CDN vendor does not accept your streams, the publishing will still fail.
@param err `0`: successful; other values: failed
@param errMsg Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onStopPublishing(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
8.2 Stopped publishing to Tencent Cloud CSS CDN

When you call {@link stopPublishing} to stop publishing streams to Tencent Cloud CSS CDN, the SDK will sync the command to the CVM immediately.
The SDK will then receive the execution result from the CVM and return the result to you via this callback.

@param err `0`: successful; other values: failed
@param errMsg Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onStartPublishing(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name CDN event callback
@{
8.1 Started publishing to Tencent Cloud CSS CDN

When you call {@link startPublishing} to publish streams to Tencent Cloud CSS CDN, the SDK will sync the command to the CVM immediately.
The SDK will then receive the execution result from the CVM and return the result to you via this callback.

@param err `0`: successful; other values: failed
@param errMsg Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onRecvSEIMsg(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
7.3 Receipt of SEI message

If a user in the room uses {@link sendSEIMsg} to send an SEI message via video frames, other users in the room can receive the message through the `onRecvSEIMsg` callback.

@param userId User ID
@param message  Data

</member>
        <member name="M:trtc.ITRTCCloudCallback.onMissCustomCmdMsg(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32)">
7.2 Loss of custom message

When you use {@link sendCustomCmdMsg} to send a custom UDP message, even if you enable reliable transfer (by setting `reliable` to `true`), there is still a chance of message loss. Reliable transfer only helps maintain a low probability of message loss, which meets the reliability requirements in most cases. 
If the sender sets `reliable` to `true`, the SDK will use this callback to notify the recipient of the number of custom messages lost during a specified time period (usually 5s) in the past.

@note The recipient receives this callback only if the sender sets `reliable` to `true`.
@param userId User ID
@param cmdID Command ID
@param errCode Error code
@param missed Number of lost messages

</member>
        <member name="M:trtc.ITRTCCloudCallback.onRecvCustomCmdMsg(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
@}
@name Callback of the receipt of a custom message
@{
7.1 Receipt of custom message

When a user in a room uses {@link sendCustomCmdMsg} to send a custom message, other users in the room can receive the message through the `onRecvCustomCmdMsg` callback.

@param userId User ID
@param cmdID Command ID
@param seq   Message serial number
@param message Message data

</member>
        <member name="M:trtc.ITRTCCloudCallback.onTestSpeakerVolume(System.UInt32)">
6.10 Volume during speaker test

When you call {@link startSpeakerDeviceTest} to test the speaker, the SDK will keep returning this callback.
The `volume` parameter in the callback represents the volume of audio sent by the SDK to the speaker for playback. If its value fluctuates but users cannot hear any sound, the speaker is not working properly.

@param volume The volume of audio sent by the SDK to the speaker for playback. Value range: 0-100

</member>
        <member name="M:trtc.ITRTCCloudCallback.onTestMicVolume(System.UInt32)">
6.8 Whether system audio capturing is enabled successfully (for macOS only)

On macOS, you can call {@link startSystemAudioLoopback} to install an audio driver and have the SDK capture the audio played back by the system.
In use cases such as video teaching and music live streaming, the teacher can use this feature to let the SDK capture the sound of the video played by his or her computer, so that students in the room can hear the sound too.
The SDK returns this callback after trying to enable system audio capturing. To determine whether it is actually enabled, pay attention to the error parameter in the callback.

@param err If it is `ERR_NULL`, system audio capturing is enabled successfully. Otherwise, it is not.

6.9 Volume during mic test

When you call {@link startMicDeviceTest} to test the mic, the SDK will keep returning this callback. The `volume` parameter represents the volume of the audio captured by the mic.
If the value of the `volume` parameter fluctuates, the mic works properly. If it is `0` throughout the test, it indicates that there is a problem with the mic, and users should be prompted to switch to a different mic.

@param volume Captured mic volume. Value range: 0-100

</member>
        <member name="M:trtc.ITRTCCloudCallback.onAudioDevicePlayoutVolumeChanged(System.UInt32,System.Boolean)">
6.7 The playback volume changed

On desktop OS such as macOS and Windows, users can set the system’s playback volume in the audio control panel.
On some keyboards and laptops, users can also mute the speaker by pressing a key (whose icon is a crossed out speaker).

When users set the system’s playback volume via the UI or a keyboard shortcut, the SDK will return this callback.

@note You need to call {@link enableAudioVolumeEvaluation} and set the callback interval (`interval` &gt; 0) to enable the callback. To disable the callback, set `interval` to `0`.

@param volume The system playback volume, which users can set in the audio control panel. Value range: 0-100
@param muted Whether the speaker is muted. `true`: muted; `false`: unmuted

</member>
        <member name="M:trtc.ITRTCCloudCallback.onAudioDeviceCaptureVolumeChanged(System.UInt32,System.Boolean)">
6.6 The capturing volume of the mic changed

On desktop OS such as macOS and Windows, users can set the capturing volume of the mic in the audio control panel.
The higher volume a user sets, the higher the volume of raw audio captured by the mic.
On some keyboards and laptops, users can also mute the mic by pressing a key (whose icon is a crossed out mic).

When users set the mic capturing volume via the UI or a keyboard shortcut, the SDK will return this callback.

@note You need to call {@link enableAudioVolumeEvaluation} and set the callback interval (`interval` &gt; 0) to enable the callback. To disable the callback, set `interval` to `0`.

@param volume System audio capturing volume, which users can set in the audio control panel. Value range: 0-100
@param muted Whether the mic is muted. `true`: muted; `false`: unmuted

</member>
        <member name="M:trtc.ITRTCCloudCallback.onDeviceChange(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TXMediaDeviceType,trtc.TRTCDeviceState)">
6.5 The status of a local device changed (for desktop OS only)

The SDK returns this callback when a local device (camera, mic, or speaker) is connected or disconnected.

@param deviceId Device ID
@param deviceType Device type
@param state Device status. `0`: connected; `1`: disconnected; `2`: started

</member>
        <member name="M:trtc.ITRTCCloudCallback.onUserVoiceVolume(trtc.TRTCVolumeInfo*,System.UInt32,System.UInt32)">
6.4 Volume

The SDK can assess the volume of each channel and return this callback on a regular basis. You can display, for example, a waveform or volume bar on the UI based on the statistics returned.
You need to first call {@link enableAudioVolumeEvaluation} to enable the feature and set the interval for the callback.
Note that the SDK returns this callback at the specified interval regardless of whether someone is speaking in the room. When no one is speaking in the room, `userVolumes` is empty, and `totalVolume` is `0`.

@note `userVolumes` is an array. If `userId` is empty, the elements in the array represent the volume of the local user’s audio. Otherwise, they represent the volume of a remote user’s audio.

@param userVolumes An array that represents the volume of all users who are speaking in the room. Value range: 0-100
@param totalVolume The total volume of all remote users. Value range: 0-100

</member>
        <member name="M:trtc.ITRTCCloudCallback.onMicDidReady">
6.2 The mic is ready

After you call {@link startLocalAudio}, the SDK will try to start the mic and return this callback if the mic is started.
If it fails to start the mic, it’s probably because the application does not have access to the mic or the mic is being used.
You can capture the {@link onError} callback to learn about the exception and let users know via UI messages.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onCameraDidReady">
@}
@name Callback of hardware events
@{
6.1 The camera is ready

After you call {@link startLocalPreivew}, the SDK will try to start the camera and return this callback if the camera is started.
If it fails to start the camera, it’s probably because the application does not have access to the camera or the camera is being used.
You can capture the {@link onError} callback to learn about the exception and let users know via UI messages.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSpeedTest(trtc.TRTCSpeedTestResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
5.4 Result of server speed testing

After you call {@link startSpeedTest} to start server speed testing, the SDK will return the testing results multiple times.
The SDK tests the speed of multiple servers and returns the result for each IP via this callback.
@param currentResult Result of the current test
@param finishedCount Number of servers that have been tested
@param totalCount Total number of servers to test

</member>
        <member name="M:trtc.ITRTCCloudCallback.onConnectionRecovery">
5.3 The SDK is reconnected to the cloud

When the SDK is disconnected from the cloud, it returns the {@link onConnectionLost} callback. It then attempts to reconnect and returns the {@link onTryToReconnect} callback. After it is reconnected, it returns this callback ({@link onConnectionRecovery}).

</member>
        <member name="M:trtc.ITRTCCloudCallback.onTryToReconnect">
5.2 The SDK is reconnecting to the cloud

When the SDK is disconnected from the cloud, it returns the {@link onConnectionLost} callback. It then attempts to reconnect and returns this callback ({@link onTryToReconnect}). After it is reconnected, it returns the {@link onConnectionRecovery} callback.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onConnectionLost">
@}
@name Callback of connection to the cloud
@{
5.1 The SDK was disconnected from the cloud

The SDK returns this callback when it is disconnected from the cloud, which may be caused by network unavailability or change of network, for example, when the user walks into an elevator.
After returning this callback, the SDK will attempt to reconnect to the cloud, and will return the {@link onTryToReconnect} callback. When it is reconnected, it will return the {@link onConnectionRecovery} callback.
In other words, the SDK proceeds from one event to the next in the following order:
<pre>
        [onConnectionLost] =====&gt; [onTryToReconnect] =====&gt; [onConnectionRecovery] 
              /|\                                                     |
               |------------------------------------------------------|
</pre></member>
        <member name="M:trtc.ITRTCCloudCallback.onStatistics(trtc.TRTCStatistics!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
4.2 Real-time statistics on technical metrics

This callback is returned every 2 seconds and notifies you of the statistics on technical metrics related to video, audio, and network. The metrics are listed in {@link TRTCStatistics}:
- Video statistics: video resolution (`resolution`), frame rate (`FPS`), bitrate (`bitrate`), etc.
- Audio statistics: audio sample rate (`samplerate`), number of audio channels (`channel`), bitrate (`bitrate`), etc.
- Network statistics: the round trip time (`rtt`) between the SDK and the cloud (SDK -&gt; Cloud -&gt; SDK), package loss rate (`loss`), upstream traffic (`sentBytes`), downstream traffic (`receivedBytes`), etc.

@note If you want to learn about only the current network quality and do not want to spend much time analyzing the statistics returned by this callback, we recommend you use {@link onNetworkQuality}. 
@param statistics Statistics, including local statistics and the statistics of remote users. For details, please see {@link TRTCStatistics}.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onNetworkQuality(trtc.TRTCQualityInfo,trtc.TRTCQualityInfo*,System.UInt32)">
@}
@name Callback of statistics on network and technical metrics
@{
4.1 Real-time network quality statistics

This callback is returned every 2 seconds and notifies you of the upstream and downstream network quality detected by the SDK.
The SDK uses a built-in proprietary algorithm to assess the current latency, bandwidth, and stability of the network and returns a result.
If the result is `1` (excellent), it means that the current network conditions are excellent; if it is `6` (down), it means that the current network conditions are too bad to support TRTC calls.
 
@note In the returned parameters `localQuality` and `remoteQuality`, if `userId` is empty, it indicates that the network quality statistics of the local user are returned. Otherwise, the network quality statistics of a remote user are returned.

@param localQuality Upstream network quality
@param remoteQuality Downstream network quality

</member>
        <member name="M:trtc.ITRTCCloudCallback.onRemoteVideoStatusUpdated(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType,trtc.TRTCAVStatusType,trtc.TRTCAVStatusChangeReason,System.Void*)">
3.10 Change of remote video status

You can use this callback to get the status (`Playing`, `Loading`, or `Stopped`) of the video of each remote user and display it on the UI.
@param userId User ID
@param streamType Video stream type. The primary stream (`Main`) is usually used for camera images, and the substream (`Sub`) for screen sharing images.
@param status Video status, which may be `Playing`, `Loading`, or `Stopped`
@param reason Reason for the change of status
@param extraInfo Extra information

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSendFirstLocalAudioFrame">
3.9 The first local audio frame was published

After you enter a room and call {@link startLocalAudio} to enable audio capturing (whichever happens first), 
the SDK will start audio encoding and publish the local audio data via its network module to the cloud.
The SDK returns the `onSendFirstLocalAudioFrame` callback after sending the first local audio frame.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSendFirstLocalVideoFrame(trtc.TRTCVideoStreamType!System.Runtime.CompilerServices.IsConst)">
3.8 The first local video frame was published

After you enter a room and call {@link startLocalPreview} or {@link startScreenCapture} to enable local video capturing (whichever happens first), 
the SDK will start video encoding and publish the local video data via its network module to the cloud.
It returns the `onSendFirstLocalVideoFrame` callback after publishing the first local video frame.

@param streamType Video stream type. The primary stream (`Main`) is usually used for camera images, and the substream (`Sub`) for screen sharing images.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onFirstAudioFrame(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
3.7 The SDK started playing the first audio frame of a remote user

The SDK returns this callback when it plays the first audio frame of a remote user. The callback is not returned for the playing of the first audio frame of the local user.

@param userId User ID of the remote user

</member>
        <member name="M:trtc.ITRTCCloudCallback.onFirstVideoFrame(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,trtc.TRTCVideoStreamType!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
3.6 The SDK started rendering the first video frame of the local or a remote user

The SDK returns this event callback when it starts rendering your first video frame or that of a remote user. The `userId` in the callback can help you determine whether the frame is yours or a remote user’s.
- If `userId` is empty, it indicates that the SDK has started rendering your first video frame. The precondition is that you have called {@link startLocalPreview} or {@link startScreenCapture}.
- If `userId` is not empty, it indicates that the SDK has started rendering the first video frame of a remote user. The precondition is that you have called {@link startRemoteView} to subscribe to the user’s video.

@note 
1. The callback of the first local video frame being rendered is triggered only after you call {@link startLocalPreview} or {@link startScreenCapture}.
2. The callback of the first video frame of a remote user being rendered is triggered only after you call {@link startRemoteView} or {@link startRemoteSubStreamView}.

@param userId The user ID of the local or a remote user. If it is empty, it indicates that the first local video frame is available; if it is not empty, it indicates that the first video frame of a remote user is available.
@param streamType Video stream type. The primary stream (`Main`) is usually used for camera images, and the substream (`Sub`) for screen sharing images.
@param width  Video width
@param height Video height

</member>
        <member name="M:trtc.ITRTCCloudCallback.onUserAudioAvailable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
3.5 A remote user published/unpublished audio

If you receive the `onUserAudioAvailable(userId, true)` callback, it indicates that the user published audio.
- In auto-subscription mode, the SDK will play the user’s audio automatically.
- In manual subscription mode, you can call {@link muteRemoteAudio}(userid, false) to play the user’s audio.

@note The auto-subscription mode is used by default. You can switch to the manual subscription mode by calling {@link setDefaultStreamRecvMode}, but it must be called before room entry for the switch to take effect.

@param userId User ID of the remote user
@param available Whether the user published (or unpublished) audio. `true`: published; `false`: unpublished

</member>
        <member name="M:trtc.ITRTCCloudCallback.onUserSubStreamAvailable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
3.4 A remote user published/unpublished substream video

The substream is usually used for screen sharing images. If you receive the `onUserSubStreamAvailable(userId, true)` callback, it indicates that the user has available substream video.
You can then call {@link startRemoteSubStreamView} to subscribe to the remote user’s video. If the subscription is successful, you will receive the `onFirstVideoFrame(userid)` callback, which indicates that the first frame of the user is rendered.

@note The API used to display substream images is {@link startRemoteSubStreamView}, not {@link startRemoteView}.

@param userId User ID of the remote user
@param available Whether the user published (or unpublished) substream video. `true`: published; `false`: unpublished

</member>
        <member name="M:trtc.ITRTCCloudCallback.onUserVideoAvailable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
3.3 A remote user published/unpublished primary stream video

The primary stream is usually used for camera images. If you receive the `onUserVideoAvailable(userId, true)` callback, it indicates that the user has available primary stream video.
You can then call {@link startRemoteView} to subscribe to the remote user’s video. If the subscription is successful, you will receive the `onFirstVideoFrame(userid)` callback, which indicates that the first video frame of the user is rendered.

If you receive the `onUserVideoAvailable(userId, false)` callback, it indicates that the video of the remote user is disabled, which may be because the user called {@link muteLocalVideo} or {@link stopLocalPreview}.

@param userId User ID of the remote user
@param available Whether the user published (or unpublished) primary stream video. `true`: published; `false`: unpublished

</member>
        <member name="M:trtc.ITRTCCloudCallback.onRemoteUserLeaveRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
3.2 A user exited the room

As with `onRemoteUserEnterRoom`, this callback works differently in different scenarios (i.e., `AppScene`, which you can specify by setting the second parameter when calling `enterRoom`).
 - Live streaming scenarios (`TRTCAppSceneLIVE` or `TRTCAppSceneVoiceChatRoom`): the callback is triggered only when an anchor exits the room.
 - Call scenarios (`TRTCAppSceneVideoCall` or `TRTCAppSceneAudioCall`): in call scenarios, the concept of roles does not apply, and the callback is returned when any user exits the room.

@param userId User ID of the remote user
@param reason Reason for room exit. `0`: the user exited the room voluntarily; `1`: the user exited the room due to timeout; `2`: the user was removed from the room.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onRemoteUserEnterRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
@name User event callback
@{
3.1 A user entered the room

Due to performance concerns, this callback works differently in different scenarios (i.e., `AppScene`, which you can specify by setting the second parameter when calling `enterRoom`).
 - Live streaming scenarios (`TRTCAppSceneLIVE` or `TRTCAppSceneVoiceChatRoom`): in live streaming scenarios, a user is either in the role of an anchor or audience. The callback is returned only when an anchor enters the room.
 - Call scenarios (`TRTCAppSceneVideoCall` or `TRTCAppSceneAudioCall`): in call scenarios, the concept of roles does not apply (all users can be considered as anchors), and the callback is returned when any user enters the room.

@note 
1. The `onRemoteUserEnterRoom` callback indicates that a user entered the room, but it does not necessarily mean that the user enabled audio or video.
2. If you want to know whether a user enabled video, we recommend you use the `onUserVideoAvailable()` callback.
@param userId User ID of the remote user

</member>
        <member name="M:trtc.ITRTCCloudCallback.onDisconnectOtherRoom(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.6 Result of ending cross-room call

</member>
        <member name="M:trtc.ITRTCCloudCallback.onConnectOtherRoom(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.5 Result of requesting cross-room call

You can call the `connectOtherRoom()` API in `TRTCCloud` to establish a video call with the anchor of another room. This is the “anchor competition” feature.
The caller will receive the `onConnectOtherRoom()` callback, which can be used to determine whether the cross-room call is successful.
If it is successful, all users in either room will receive the `onUserVideoAvailable()` callback from the anchor of the other room.

@param userId  The user ID of the anchor (in another room) to be called
@param errCode Error code. `ERR_NULL` indicates that cross-room connection is established successfully. For more information, please see [Error Codes](https://intl.cloud.tencent.com/document/product/647/35124).
@param errMsg  Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSwitchRoom(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.4 Result of room switching

You can call the `switchRoom()` API in `TRTCCloud` to switch from one room to another.
After the switching, the SDK will return the `onSwitchRoom()` event callback.

@param errCode Error code. `ERR_NULL` indicates a successful switch. For more information, please see [Error Codes](https://intl.cloud.tencent.com/document/product/647/35124).
@param errMsg  Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onSwitchRole(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.3 Role switching

You can call the `switchRole()` API in `TRTCCloud` to switch between the anchor and audience roles. This is accompanied by a line switching process.
After the switching, the SDK will return the `onSwitchRole()` event callback.

@param errCode Error code. `ERR_NULL` indicates a successful switch. For more information, please see [Error Codes](https://intl.cloud.tencent.com/document/product/647/35124).
@param errMsg  Error message

</member>
        <member name="M:trtc.ITRTCCloudCallback.onExitRoom(System.Int32)">
2.2 Room exit

Calling the `exitRoom()` API in `TRTCCloud` will trigger the execution of room exit-related logic, such as releasing resources of audio/video devices and codecs.
After all resources occupied by the SDK are released, the SDK will return the `onExitRoom()` callback.

If you need to call `enterRoom()` again or switch to another audio/video SDK, please wait until you receive the `onExitRoom()` callback.
Otherwise, you may encounter problems such as the camera or mic being occupied.

@param reason Reason for room exit. `0`: the user called `exitRoom` to exit the room; `1`: the user was removed from the room by the server; `2`: the room was dismissed.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onWarning(TXLiteAVWarning,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*)">
1.2 Warning event callback

Warning event, which indicates that the SDK threw an error requiring attention, such as video lag or high CPU usage
For more information, see [Error Codes](https://intl.cloud.tencent.com/document/product/647/35124). 

@param warningCode Warning code
@param warningMsg Warning message
@param extInfo Extended field. Certain warning codes may carry extra information for troubleshooting.

</member>
        <member name="M:trtc.ITRTCCloudCallback.onError(TXLiteAVError,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*)">
@name Error events and warning events
@{
1.1 Error event callback

Error event, which indicates that the SDK threw an irrecoverable error such as room entry failure or failure to start device
For more information, see [Error Codes](https://intl.cloud.tencent.com/document/product/647/35124). 

@param errCode Error code
@param errMsg Error message
@param extInfo Extended field. Certain error codes may carry extra information for troubleshooting.

</member>
        <member name="T:trtc.ITRTCCloudCallback">
@defgroup TRTCCloudCallback_cplusplus TRTCCloudCallback
Tencent Cloud TRTC Event Notification Interface
@{
</member>
        <member name="F:trtc.TRTCStatistics.remoteStatisticsArraySize">
**Field description:** `remoteStatisticsArray` array size
</member>
        <member name="F:trtc.TRTCStatistics.remoteStatisticsArray">
**Field description:** remote audio/video statistics
As there may be multiple concurrent remote users, and each of them may have multiple concurrent audio/video streams (i.e., HD big image, smooth small image, and substream image), the remote audio/video statistics are an array.
</member>
        <member name="F:trtc.TRTCStatistics.localStatisticsArraySize">
**Field description:** `localStatisticsArray` array size
</member>
        <member name="F:trtc.TRTCStatistics.localStatisticsArray">
**Field description:** local audio/video statistics
As there may be three local audio/video streams (i.e., HD big image, smooth small image, and substream image), the local audio/video statistics are an array.
</member>
        <member name="F:trtc.TRTCStatistics.receivedBytes">
**Field description:** total number of received bytes (including signaling data and audio/video data)
</member>
        <member name="F:trtc.TRTCStatistics.sentBytes">
**Field description:** total number of sent bytes (including signaling data and audio/video data)
</member>
        <member name="F:trtc.TRTCStatistics.rtt">
**Field description:** round-trip delay (ms) from the SDK to cloud
This value represents the total time it takes to send a network packet from the SDK to the cloud and then send a network packet back from the cloud to the SDK, i.e., the total time it takes for a network packet to go through the linkage of "SDK -&gt; cloud -&gt; SDK".
The smaller the value, the better. If `rtt` is below 50 ms, it means a short audio/video call delay; if `rtt` is above 100 ms, it means a long audio/video call delay.
It should be explained that `rtt` represents the total time spent on the linkage of "SDK -&gt; cloud -&gt; SDK"; therefore, there is no need to distinguish between `upRtt` and `downRtt`.
</member>
        <member name="F:trtc.TRTCStatistics.downLoss">
**Field description:** downstream packet loss rate (%) from cloud to the SDK
The smaller the value, the better. If `downLoss` is `0%`, the downstream network quality is very good, and the data packets received from the cloud are basically not lost.
If `downLoss` is `30%`, 30% of the audio/video data packets sent to the SDK by the cloud are lost on the transfer linkage.
</member>
        <member name="F:trtc.TRTCStatistics.upLoss">
**Field description:** upstream packet loss rate (%) from the SDK to cloud
The smaller the value, the better. If `upLoss` is `0%`, the upstream network quality is very good, and the data packets uploaded to the cloud are basically not lost.
If `upLoss` is `30%`, 30% of the audio/video data packets sent to the cloud by the SDK are lost on the transfer linkage.
</member>
        <member name="F:trtc.TRTCStatistics.systemCpu">
**Field description:** CPU utilization (%) of the current system
</member>
        <member name="F:trtc.TRTCStatistics.appCpu">
**Field description:** CPU utilization (%) of the current application
</member>
        <member name="T:trtc.TRTCStatistics">
@}
@name Network and performance metrics
@{
</member>
        <member name="F:trtc.TRTCRemoteStatistics.streamType">
**Field description:** video stream type (HD big image | smooth small image | substream image)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.videoBlockRate">
**Field description:** video playback lag rate (%)
Video playback lag rate (videoBlockRate) = cumulative video playback lag duration (videoTotalBlockTime)/total video playback duration
</member>
        <member name="F:trtc.TRTCRemoteStatistics.videoTotalBlockTime">
**Field description:** cumulative video playback lag duration (ms)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.audioBlockRate">
**Field description:** audio playback lag rate (%)
Audio playback lag rate (audioBlockRate) = cumulative audio playback lag duration (audioTotalBlockTime)/total audio playback duration
</member>
        <member name="F:trtc.TRTCRemoteStatistics.audioTotalBlockTime">
**Field description:** cumulative audio playback lag duration (ms)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.point2PointDelay">
**Field description:** end-to-end delay (ms)
`point2PointDelay` represents the delay of "anchor -&gt; cloud -&gt; audience". To be more precise, it represents the delay of the entire linkage of "collection -&gt; encoding -&gt; network transfer -&gt; receiving -&gt; buffering -&gt; decoding -&gt; playback".
`point2PointDelay` works only if both the local and remote SDKs are on version 8.5 or above. If the remote SDK is on a version below 8.5, this value will always be 0 and thus meaningless.
</member>
        <member name="F:trtc.TRTCRemoteStatistics.jitterBufferDelay">
**Field description:** playback delay (ms)
In order to avoid audio/video lags caused by network jitters and network packet disorders, TRTC maintains a playback buffer on the playback side to organize the received network data packets.
The size of the buffer is adaptively adjusted according to the current network quality and converted to the length of time in milliseconds, i.e., `jitterBufferDelay`.
</member>
        <member name="F:trtc.TRTCRemoteStatistics.audioBitrate">
**Field description:** local audio bitrate (Kbps)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.audioSampleRate">
**Field description:** local audio sample rate (Hz)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.videoBitrate">
**Field description:** remote video bitrate (Kbps)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.frameRate">
**Field description:** remote video frame rate (fps)
</member>
        <member name="F:trtc.TRTCRemoteStatistics.height">
**Field description:** remote video height in px
</member>
        <member name="F:trtc.TRTCRemoteStatistics.width">
**Field description:** remote video width in px
</member>
        <member name="F:trtc.TRTCRemoteStatistics.finalLoss">
**Field description:** total packet loss rate (%) of the audio/video stream
`finalLoss` represents the packet loss rate eventually calculated on the audience side after the audio/video stream goes through the complete transfer linkage of "anchor -&gt; cloud -&gt; audience".
The smaller the `finalLoss`, the better. The packet loss rate of 0 indicates that all data of the audio/video stream has entirely reached the audience.
If `downLoss` is `0` but `finalLoss` isn't, there is no packet loss on the linkage of "cloud -&gt; audience" for the audio/video stream, but there are unrecoverable packet losses on the linkage of "anchor -&gt; cloud".
</member>
        <member name="F:trtc.TRTCRemoteStatistics.userId">
**Field description:** user ID
</member>
        <member name="T:trtc.TRTCRemoteStatistics">
@}
@name Remote audio/video metrics
@{
</member>
        <member name="F:trtc.TRTCLocalStatistics.audioCaptureState">
**Field description:**Audio equipment collection status(
0：Normal；1：Long silence detected；2：Broken sound detected；3：Abnormal intermittent sound detected;)
</member>
        <member name="F:trtc.TRTCLocalStatistics.streamType">
**Field description:** video stream type (HD big image | smooth small image | substream image)
</member>
        <member name="F:trtc.TRTCLocalStatistics.audioBitrate">
**Field description:** local audio bitrate in Kbps, i.e., how much audio data is generated per second
</member>
        <member name="F:trtc.TRTCLocalStatistics.audioSampleRate">
**Field description:** remote audio sample rate (Hz)
</member>
        <member name="F:trtc.TRTCLocalStatistics.videoBitrate">
**Field description:** remote video bitrate in Kbps, i.e., how much video data is generated per second
</member>
        <member name="F:trtc.TRTCLocalStatistics.frameRate">
**Field description:** local video frame rate in fps, i.e., how many video frames there are per second
</member>
        <member name="F:trtc.TRTCLocalStatistics.height">
**Field description:** local video height in px
</member>
        <member name="F:trtc.TRTCLocalStatistics.width">
**Field description:** local video width in px
</member>
        <member name="T:trtc.TRTCLocalStatistics">
@defgroup TRTCStatistic_cplusplus TRTCStatisic
Tencent Cloud TRTC : audio, video and network related statistical indicators
@{
@name Local audio/video metrics
@{
</member>
        <member name="F:trtc.TRTCScreenCaptureProperty.enableCaptureChildWindow">
**Field description:** whether to capture the subwindow during window capturing (the subwindow and the captured window need to have an `Owner` or `Popup` attribute). Default value: false.
</member>
        <member name="F:trtc.TRTCScreenCaptureProperty.highLightWidth">
**Field description:** specify the width of the highlighted frame. 0 indicates to use the default width of 5 px. The maximum value you can set is 50.
</member>
        <member name="F:trtc.TRTCScreenCaptureProperty.highLightColor">
**Field description:** specify the color of the highlighted frame in RGB format. 0 indicates to use the default color of #8CBF26.
</member>
        <member name="F:trtc.TRTCScreenCaptureProperty.enableHighPerformance">
**Field description:** whether to enable the high performance mode (which will take effect only during screen sharing). Default value: true.
**Note:** the screen capturing performance is the best after this mode is enabled, but the anti-blocking ability will be lost. If you enable `enableHighLight` and `enableHighPerformance` at the same time, remote users will see the highlighted frame.
</member>
        <member name="F:trtc.TRTCScreenCaptureProperty.enableHighLight">
**Field description:** whether to highlight the window being shared (i.e., drawing a frame around the shared target). Default value: true.
</member>
        <member name="F:trtc.TRTCScreenCaptureProperty.enableCaptureMouse">
**Field description:** whether to capture the cursor while capturing the target content. Default value: true.
</member>
        <member name="T:trtc.TRTCScreenCaptureProperty">
5.20 Advanced control parameter of screen sharing

This parameter is used in the screen sharing-related API {@link selectScreenCaptureTarget} to set a series of advanced control parameters when specifying the sharing target.
For example, whether to capture the cursor, whether to capture the subwindow, and whether to draw a frame around the shared target.

</member>
        <member name="M:trtc.ITRTCScreenCaptureSourceList.release">
Don't use delete!!!

</member>
        <member name="M:trtc.ITRTCScreenCaptureSourceList.getSourceInfo(System.UInt32)">
Get element(TRTCScreenCaptureSourceInfo) by index. 

</member>
        <member name="M:trtc.ITRTCScreenCaptureSourceList.getCount">
Size of this list.

</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.isMainScreen">
**Field description:** Whether it is the main display (applicable to the case of multiple displays)
</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.isMinimizeWindow">
**Field description:** is minimized window or not
</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.iconBGRA">
**Field description:** icon of the shared window
</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.thumbBGRA">
**Field description:** thumbnail of the shared window
</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.sourceName">
**Field description:** capturing source name (encoded in UTF-8)
</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.sourceId">
**Field description:** capturing source ID. For a window, this field indicates a window ID; for a screen, this field indicates a display ID.
</member>
        <member name="F:trtc.TRTCScreenCaptureSourceInfo.type">
**Field description:** capturing source type (i.e., whether to share the entire screen or a certain window)
</member>
        <member name="T:trtc.TRTCImageBuffer">
5.18 Screen sharing target information (for desktop systems only)

When users share the screen, they can choose to share the entire desktop or only the window of a certain program.
`TRTCScreenCaptureSourceInfo` is used to describe the information of the target to be shared, including ID, name, and thumbnail. The fields in this structure are read-only.

</member>
        <member name="F:trtc.TRTCSwitchRoomConfig.privateMapKey">
**Field description:** permission credential used for permission control, which is optional. If you want only users with the specified `userId` values to enter a room, you need to use `privateMapKey` to restrict the permission.
**Recommended value:** we recommend you use this parameter only if you have high security requirements. For more information, please see [Enabling Advanced Permission Control](https://cloud.tencent.com/document/product/647/32240).
</member>
        <member name="F:trtc.TRTCSwitchRoomConfig.userSig">
**Field description:** user signature, which is optional. It is the authentication signature corresponding to the current `userId` and acts as the login password.
          If you don't specify the newly calculated `userSig` during room switch, the SDK will continue to use the `userSig` you specified during room entry (enterRoom).
          This requires you to ensure that the old `userSig` is still within the validity period allowed by the signature at the moment of room switch; otherwise, room switch will fail.
**Recommended value:** for the calculation method, please see [UserSig](https://cloud.tencent.com/document/product/647/17275).
</member>
        <member name="F:trtc.TRTCSwitchRoomConfig.strRoomId">
**Field description:** string-type room ID, which is optional. Users in the same room can see one another and make audio/video calls.
**Note:** either `roomId` or `strRoomId` must be entered. If both are entered, `roomId` will be used.
</member>
        <member name="F:trtc.TRTCSwitchRoomConfig.roomId">
**Field description:** numeric room ID, which is optional. Users in the same room can see one another and make audio/video calls.
**Recommended value:** value range: 1–4294967294.
**Note:** either `roomId` or `strRoomId` must be entered. If both are entered, `roomId` will be used.
</member>
        <member name="T:trtc.TRTCSwitchRoomConfig">
5.16 Room switch parameter

This parameter is used for the room switch API {@link switchRoom}, which can quickly switch a user from one room to another.

</member>
        <member name="F:trtc.TRTCAudioEffectParam.volume">
**Field description:** sound effect volume
**Recommended value:** value range: 0–100. Default value: 100
</member>
        <member name="F:trtc.TRTCAudioEffectParam.publish">
**Field description:** whether the sound effect is upstreamed
**Recommended value:** YES: when the sound effect is played back locally, it will be upstreamed to the cloud and can be heard by remote users. NO: the sound effect will not be upstreamed to the cloud and can only be heard locally. Default value: NO
</member>
        <member name="F:trtc.TRTCAudioEffectParam.loopCount">
**Field description:** number of times the sound effect is looped
**Valid values:** 0 or any positive integer. 0 (default) indicates that the sound effect is played once, 1 twice, and so on.
</member>
        <member name="F:trtc.TRTCAudioEffectParam.path">
**Field description:** sound effect file path. Supported file formats include AAC, MP3, and M4A.
</member>
        <member name="F:trtc.TRTCAudioEffectParam.effectId">
**Field description:** sound effect ID
**Note:** the SDK supports playing multiple sound effects. IDs are used to distinguish different sound effects and control their start, end, volume, etc.
</member>
        <member name="T:trtc.TRTCAudioEffectParam">
5.15 Sound effect parameter (disused)

"Sound effects" in TRTC refer to some short audio files (usually only a few seconds), such as "applause" and "laughter".
This parameter is used to specify the path and number of playback times of a sound effect file (short audio file) in the sound effect playback API {@link TRTCCloud#playAudioEffect} on legacy versions.
After v7.3, the sound effect API has been replaced by a new {@link TXAudioEffectManager#startPlayMusic} API.
When you specify the {@link TXAudioMusicParam} parameter of `startPlayMusic`, if `isShortFile` is set to `true`, the file is a "sound effect" file.

</member>
        <member name="F:trtc.TRTCLocalRecordingParams.interval">
**Field description:** `interval` is the update frequency of the recording information in milliseconds. Value range: 1000–10000. Default value: -1, indicating not to call back
</member>
        <member name="F:trtc.TRTCLocalRecordingParams.recordType">
**Field description:** media recording type, which is `TRTCLocalRecordType_Both` by default, indicating to record both audio and video.
</member>
        <member name="F:trtc.TRTCLocalRecordingParams.filePath">
**Field description:** address of the recording file, which is required. Please ensure that the path is valid with read/write permissions; otherwise, the recording file cannot be generated.
**Note:** this path must be accurate to the file name and extension. The extension determines the format of the recording file. Currently, only the MP4 format is supported.
          For example, if you specify the path as `mypath/record/test.mp4`, it means that you want the SDK to generate a local video file in MP4 format.
          Please specify a valid path with read/write permissions; otherwise, the recording file cannot be generated.
</member>
        <member name="T:trtc.TRTCLocalRecordingParams">
5.14 Local media file recording parameters

This parameter is used to specify the recording parameters in the local media file recording API {@link startLocalRecording}.
The `startLocalRecording` API is an enhanced version of the `startAudioRecording` API. The former can record video files, while the latter can only record audio files.

</member>
        <member name="F:trtc.TRTCAudioRecordingParams.filePath">
**Field description:** storage path of the audio recording file, which is required.
**Note:** this path must be accurate to the file name and extension. The extension determines the format of the audio recording file. Currently, supported formats include PCM, WAV, and AAC.
          For example, if you specify the path as `mypath/record/audio.aac`, it means that you want the SDK to generate an audio recording file in AAC format.
          Please specify a valid path with read/write permissions; otherwise, the audio recording file cannot be generated.
</member>
        <member name="T:trtc.TRTCAudioRecordingParams">
5.13 Local audio file recording parameters

This parameter is used to specify the recording parameters in the audio recording API {@link startAudioRecording}.

</member>
        <member name="F:trtc.TRTCPublishCDNParam.url">
**Field description:** specify the push address (in RTMP format) of this audio/video stream at the third-party live streaming service provider
**Recommended value:** the push URL rules vary greatly by service provider. Please enter a valid push URL according to the requirements of the target service provider. TRTC's backend server will push audio/video streams in the standard format to the third-party service provider according to the URL you enter.
**Note:** the push URL must be in RTMP format and meet the specifications of your target live streaming service provider; otherwise, the target service provider will reject the push requests from TRTC's backend service.
</member>
        <member name="F:trtc.TRTCPublishCDNParam.bizId">
**Field description:** `bizId` of Tencent Cloud CSS
**Recommended value:** please click **Application Management** &gt; **Application Information** in the [TRTC console](https://console.cloud.tencent.com/trtc) and get the `bizId` in **Relayed Live Streaming Info**.
</member>
        <member name="F:trtc.TRTCPublishCDNParam.appId">
**Field description:** `appId` of Tencent Cloud CSS
**Recommended value:** please click **Application Management** &gt; **Application Information** in the [TRTC console](https://console.cloud.tencent.com/trtc) and get the `appId` in **Relayed Live Streaming Info**.
</member>
        <member name="T:trtc.TRTCPublishCDNParam">
5.12 Push parameters required to be set when publishing audio/video streams to non-Tencent Cloud CDN

TRTC's backend service supports publishing audio/video streams to third-party live CDN service providers through the standard RTMP protocol.
If you use the Tencent Cloud CSS CDN service, you don't need to care about this parameter; instead, just use the {@link startPublish} API.

</member>
        <member name="F:trtc.TRTCTranscodingConfig.streamId">
**Field description:** ID of the live stream output to CDN
**Recommended value:** default value: null, that is, the audio/video streams in the room will be mixed into the audio/video stream of the caller of this API.
   - If you don't set this parameter, the SDK will execute the default logic, that is, it will mix the multiple audio/video streams in the room into the audio/video stream of the caller of this API, i.e., A + B =&gt; A.
   - If you set this parameter, the SDK will mix the audio/video streams in the room into the live stream you specify, i.e., A + B =&gt; C (C is the `streamId` you specify).
</member>
        <member name="F:trtc.TRTCTranscodingConfig.mixUsersArraySize">
**Field description:** number of elements in the `mixUsersArray` array
</member>
        <member name="F:trtc.TRTCTranscodingConfig.mixUsersArray">
**Field description:** specify the position, size, layer, and stream type of each video image in On-Cloud MixTranscoding
**Recommended value:** this field is an array in `TRTCMixUser` type, where each element represents the information of a video image.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.audioChannels">
**Field description:** specify the number of sound channels of On-Cloud MixTranscoding
**Recommended value:** default value: 1, which means mono channel. Valid values: 1: mono channel; 2: dual channel.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.audioBitrate">
**Field description:** specify the target audio bitrate of On-Cloud MixTranscoding
**Recommended value:** default value: 64 Kbps. Value range: [32,192].
</member>
        <member name="F:trtc.TRTCTranscodingConfig.audioSampleRate">
**Field description:** specify the target audio sample rate of On-Cloud MixTranscoding
**Recommended value:** default value: 48000 Hz. Valid values: 12000 Hz, 16000 Hz, 22050 Hz, 24000 Hz, 32000 Hz, 44100 Hz, 48000 Hz.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.backgroundImage">
**Field description:** specify the background image of the mixed video image.
**Recommended value:** default value: null, indicating not to set the background image.
**Note:** you need to upload the background image by clicking **Add image** in "Application Management" &gt; "Function Configuration" &gt; "Material Management" in the [console](https://console.cloud.tencent.com/trtc) in advance.
          After the upload is successful, you can get the corresponding "image ID". Then, you need to convert it into a string and set it as `backgroundImage`.
          For example, if the "image ID" is 63, you can set `backgroundImage = @"63"`;
</member>
        <member name="F:trtc.TRTCTranscodingConfig.backgroundColor">
**Field description:** specify the background color of the mixed video image.
**Recommended value:** default value: 0x000000, which means black and is in the format of hex number; for example: "0x61B9F1" represents the RGB color (97,158,241).
</member>
        <member name="F:trtc.TRTCTranscodingConfig.videoGOP">
**Field description:** specify the target video keyframe interval (GOP) of On-Cloud MixTranscoding
**Recommended value:** default value: 2 (in seconds). Value range: [1,8].
</member>
        <member name="F:trtc.TRTCTranscodingConfig.videoFramerate">
**Field description:** specify the target video frame rate (fps) of On-Cloud MixTranscoding
**Recommended value:** default value: 15 fps. Value range: (0,30].
</member>
        <member name="F:trtc.TRTCTranscodingConfig.videoBitrate">
**Field description:** specify the target video bitrate (Kbps) of On-Cloud MixTranscoding
**Recommended value:** if you enter 0, TRTC will estimate a reasonable bitrate value based on `videoWidth` and `videoHeight`. You can also refer to the recommended bitrate value in the video resolution enumeration definition (in the comment section).
</member>
        <member name="F:trtc.TRTCTranscodingConfig.videoHeight">
**Field description:** specify the target resolution (height) of On-Cloud MixTranscoding
**Recommended value:** 640 px. If you only mix audio streams, please set both `width` and `height` to 0; otherwise, there will be a black background in the live stream after mixtranscoding.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.videoWidth">
**Field description:** specify the target resolution (width) of On-Cloud MixTranscoding
**Recommended value:** 360 px. If you only mix audio streams, please set both `width` and `height` to 0; otherwise, there will be a black background in the live stream after mixtranscoding.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.bizId">
**Field description:** `bizId` of Tencent Cloud CSS
**Recommended value:** please click **Application Management** &gt; **Application Information** in the [TRTC console](https://console.cloud.tencent.com/trtc) and get the `bizId` in **Relayed Live Streaming Info**.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.appId">
**Field description:** `appId` of Tencent Cloud CSS
**Recommended value:** please click **Application Management** &gt; **Application Information** in the [TRTC console](https://console.cloud.tencent.com/trtc) and get the `appId` in **Relayed Live Streaming Info**.
</member>
        <member name="F:trtc.TRTCTranscodingConfig.mode">
**Field description:** layout mode
**Recommended value:** please choose a value according to your business needs. The preset mode has better applicability.
</member>
        <member name="T:trtc.TRTCTranscodingConfig">
5.11 Layout and transcoding parameters of On-Cloud MixTranscoding

These parameters are used to specify the layout position information of each video image and the encoding parameters of mixtranscoding during On-Cloud MixTranscoding.

</member>
        <member name="F:trtc.TRTCMixUser.inputType">
**Field description:** specify the mixed content of this stream (audio only, video only, or audio and video). This field is an upgrade to the `pureAudio` field.
**Recommended value:** default value: TRTCMixInputTypeUndefined, which represents the value of `pureAudio`.
  - If you are using TRTC for the first time and have not set the `pureAudio` field before, you can set this field according to your actual needs. We recommend you not set `pureAudio` again.
  - If you have already used the `pureAudio` field on a legacy version and want to keep its setting, you can set `inputType` to `TRTCMixInputTypeUndefined`.
</member>
        <member name="F:trtc.TRTCMixUser.pureAudio">
**Field description:** specify whether this stream mixes audio only
**Recommended value:** default value: NO 
**Note:** this field has been disused. We recommend you use the new field `inputType` introduced in v8.5.
</member>
        <member name="F:trtc.TRTCMixUser.streamType">
**Field description:** specify whether this video image is the primary stream image ({@link TRTCVideoStreamTypeBig}) or substream image ({@link TRTCVideoStreamTypeSub}).
</member>
        <member name="F:trtc.TRTCMixUser.zOrder">
**Field description:** specify the level of this video image (value range: 1–15; the value must be unique)
</member>
        <member name="F:trtc.TRTCMixUser.rect">
**Field description:** specify the coordinate area of this video image in px
</member>
        <member name="F:trtc.TRTCMixUser.roomId">
**Field description:** ID of the room where this audio/video stream is located (an empty value indicates the local room ID)
</member>
        <member name="F:trtc.TRTCMixUser.userId">
**Field description:** user ID
</member>
        <member name="T:trtc.TRTCMixUser">
5.10 Description information of each video image in On-Cloud MixTranscoding

`TRTCMixUser` is used to specify the location, size, layer, and stream type of each video image in On-Cloud MixTranscoding.

</member>
        <member name="F:trtc.TRTCAudioFrame.timestamp">
**Field description:** timestamp in ms
</member>
        <member name="F:trtc.TRTCAudioFrame.channel">
**Field description:** number of sound channels
</member>
        <member name="F:trtc.TRTCAudioFrame.sampleRate">
**Field description:** sample rate
</member>
        <member name="F:trtc.TRTCAudioFrame.length">
**Field description:** audio data length
</member>
        <member name="F:trtc.TRTCAudioFrame.data">
**Field description:** audio data
</member>
        <member name="F:trtc.TRTCAudioFrame.audioFormat">
**Field description:** audio frame format
</member>
        <member name="T:trtc.TRTCAudioFrame">
5.9 Audio frame data

</member>
        <member name="F:trtc.TRTCVideoFrame.rotation">
**Field description:** clockwise rotation angle of video pixels
</member>
        <member name="F:trtc.TRTCVideoFrame.timestamp">
**Field description:** video frame timestamp in milliseconds
**Recommended value:** this parameter can be set to 0 for custom video capturing. In this case, the SDK will automatically set the `timestamp` field. However, please "evenly" set the calling interval of `sendCustomVideoData`.
</member>
        <member name="F:trtc.TRTCVideoFrame.height">
**Field description:** video height
**Recommended value:** please enter the height of the video data passed in.
</member>
        <member name="F:trtc.TRTCVideoFrame.width">
**Field description:** video width
**Recommended value:** please enter the width of the video data passed in.
</member>
        <member name="F:trtc.TRTCVideoFrame.length">
**Field description:** video data length in bytes. For I420, length = width * height * 3 / 2; for BGRA32, length = width * height * 4.
</member>
        <member name="F:trtc.TRTCVideoFrame.textureId">
**Field description:** video texture ID, i.e., video data when `bufferType` is {@link TRTCVideoBufferType_Texture}, which carries the texture data used for OpenGL rendering.
</member>
        <member name="F:trtc.TRTCVideoFrame.data">
**Field description:** video data when `bufferType` is {@link TRTCVideoBufferType_Buffer}, which carries the memory data blocks for the C++ layer.
</member>
        <member name="F:trtc.TRTCVideoFrame.bufferType">
**Field description:** video data structure type
</member>
        <member name="F:trtc.TRTCVideoFrame.videoFormat">
**Field description:** video pixel format
</member>
        <member name="T:trtc.TRTCVideoFrame">
5.8 Video frame information

`TRTCVideoFrame` is used to describe the raw data of a frame of the video image, which is the image data before frame encoding or after frame decoding.

</member>
        <member name="F:trtc.TRTCSpeedTestResult.rtt">
Delay in milliseconds, which is the round-trip time between the current device and TRTC server. The smaller the value, the better. The normal value range is 10–100 ms.
</member>
        <member name="F:trtc.TRTCSpeedTestResult.downLostRate">
Downstream packet loss rate between 0 and 1.0. For example, 0.2 indicates that 2 data packets may be lost in every 10 packets received from the server.
</member>
        <member name="F:trtc.TRTCSpeedTestResult.upLostRate">
Upstream packet loss rate between 0 and 1.0. For example, 0.3 indicates that 3 data packets may be lost in every 10 packets sent to the server.
</member>
        <member name="F:trtc.TRTCSpeedTestResult.quality">
Network quality, which is tested and calculated based on the internal evaluation algorithm. The better the network, the higher the score.
</member>
        <member name="F:trtc.TRTCSpeedTestResult.ip">
Server IP address
</member>
        <member name="T:trtc.TRTCSpeedTestResult">
5.7 Network speed test result

The {@link startSpeedTest} API can be used to test the network speed before a user enters a room (this API cannot be called during a call).
The speed test result will be returned once every 2–3 seconds, and the test result of one IP address will be returned each time.

</member>
        <member name="F:trtc.TRTCVolumeInfo.volume">
Volume of the speaker. Value range: 0–100.
</member>
        <member name="F:trtc.TRTCVolumeInfo.userId">
`userId` of the speaker. An empty value indicates the local user.
</member>
        <member name="T:trtc.TRTCVolumeInfo">
5.6 Volume

This indicates the audio volume value. You can use it to display the volume of each user in the UI.

</member>
        <member name="F:trtc.TRTCQualityInfo.quality">
Network quality
</member>
        <member name="F:trtc.TRTCQualityInfo.userId">
User ID
</member>
        <member name="T:trtc.TRTCQualityInfo">
5.5 Network quality

This indicates the quality of the network. You can use it to display the network quality of each user on the UI.

</member>
        <member name="F:trtc.TRTCRenderParams.mirrorType">
**Field description:** image mirror mode
**Recommended value:** default value: {@link TRTCVideoMirrorType_Auto}
</member>
        <member name="F:trtc.TRTCRenderParams.fillMode">
**Field description:** image fill mode
**Recommended value:** fill (the image may be stretched or cropped) or fit (there may be black bars in unmatched areas). Default value: {@link TRTCVideoFillMode_Fill}
</member>
        <member name="F:trtc.TRTCRenderParams.rotation">
**Field description:** clockwise image rotation angle
**Recommended value:** rotation angles of 90, 180, and 270 degrees are supported. Default value: {@link TRTCVideoRotation0}
</member>
        <member name="T:trtc.TRTCRenderParams">
5.4 Rendering parameters of video image

You can use these parameters to control the video image rotation angle, fill mode, and mirror mode.

</member>
        <member name="F:trtc.TRTCNetworkQosParam.controlMode">
**Field description:** QoS control mode (disused)
**Recommended value:** on-cloud control
**Note:** please set the on-cloud control mode (TRTCQosControlModeServer).
</member>
        <member name="F:trtc.TRTCNetworkQosParam.preference">
**Field description:** whether to ensure smoothness or clarity
**Recommended value:** ensuring clarity
**Note:** this parameter mainly affects the audio/video performance of TRTC in weak network environments:
- Ensuring smoothness: in this mode, when the current network is unable to transfer a clear and smooth video image, the smoothness of the image will be given priority, but there will be blurs.
- Ensuring clarity (default value): in this mode, when the current network is unable to transfer a clear and smooth video image, the clarity of the image will be given priority, but there will be lags.
</member>
        <member name="T:trtc.TRTCNetworkQosParam">
5.3 Network QoS control parameter set

Network QoS control parameter. The settings determine the QoS control policy of the SDK in weak network conditions (e.g., whether to "ensure clarity" or "ensure smoothness").

</member>
        <member name="F:trtc.TRTCVideoEncParam.enableAdjustRes">
**Field description:** whether to allow dynamic resolution adjustment. Once enabled, this field will affect on-cloud recording.
**Recommended value:** this feature is suitable for scenarios that don't require on-cloud recording. After it is enabled, the SDK will intelligently select a suitable resolution according to the current network conditions to avoid the inefficient encoding mode of "large resolution + small bitrate".
**Note:** default value: false. If you need on-cloud recording, please do not enable this feature, because if the video resolution changes, the MP4 file recorded in the cloud cannot be played back normally by common players.
</member>
        <member name="F:trtc.TRTCVideoEncParam.minVideoBitrate">
**Field description:** minimum video bitrate. The SDK will reduce the bitrate to as low as the value specified by `minVideoBitrate` to ensure the smoothness only if the network conditions are poor.
**Note:** default value: 0, indicating that a reasonable value of the lowest bitrate will be automatically calculated by the SDK according to the resolution you specify.
**Recommended value:** you can set the `videoBitrate` and `minVideoBitrate` parameters at the same time to restrict the SDK's adjustment range of the video bitrate:
- If you want to "ensure clarity while allowing lag in weak network environments", you can set `minVideoBitrate` to 60% of `videoBitrate`.
- If you want to "ensure smoothness while allowing blur in weak network environments", you can set `minVideoBitrate` to a low value, for example, 100 Kbps.
- If you set `videoBitrate` and `minVideoBitrate` to the same value, it is equivalent to disabling the adaptive adjustment capability of the SDK for the video bitrate.
</member>
        <member name="F:trtc.TRTCVideoEncParam.videoBitrate">
**Field description:** target video bitrate. The SDK encodes streams at the target video bitrate and will actively reduce the bitrate only in weak network environments.
**Recommended value:** please see the optimal bitrate for each specification in `TRTCVideoResolution`. You can also slightly increase the optimal bitrate.
          For example, `TRTCVideoResolution_1280_720` corresponds to the target bitrate of 1,200 Kbps. You can also set the bitrate to 1,500 Kbps for higher definition.
**Note:** you can set the `videoBitrate` and `minVideoBitrate` parameters at the same time to restrict the SDK's adjustment range of the video bitrate:
- If you want to "ensure clarity while allowing lag in weak network environments", you can set `minVideoBitrate` to 60% of `videoBitrate`.
- If you want to "ensure smoothness while allowing blur in weak network environments", you can set `minVideoBitrate` to a low value, for example, 100 Kbps.
- If you set `videoBitrate` and `minVideoBitrate` to the same value, it is equivalent to disabling the adaptive adjustment capability of the SDK for the video bitrate.
</member>
        <member name="F:trtc.TRTCVideoEncParam.resMode">
**Field description:** resolution mode (landscape/portrait)
**Recommended value:** for mobile platforms (iOS and Android), `Portrait` is recommended; for desktop platforms (Windows and macOS), `Landscape` is recommended.
**Note:** to use a portrait resolution, please specify `resMode` as `Portrait`; for example, when used together with `Portrait`, 640x360 represents 360x640.
</member>
        <member name="F:trtc.TRTCVideoEncParam.videoResolution">
**Field description:** video resolution
**Recommended value**
- For mobile video call, we recommend you select a resolution of 360x640 or below and select `Portrait` (portrait resolution) for `resMode`.
- For mobile live streaming, we recommend you select a resolution of 540x960 and select `Portrait` (portrait resolution) for `resMode`.
- For desktop platforms (Windows and macOS), we recommend you select a resolution of 640x360 or above and select `Landscape` (landscape resolution) for `resMode`.
**Note:** to use a portrait resolution, please specify `resMode` as `Portrait`; for example, when used together with `Portrait`, 640x360 represents 360x640.
</member>
        <member name="T:trtc.TRTCVideoEncParam">
5.2 Video encoding parameters

These settings determine the quality of image viewed by remote users as well as the image quality of recorded video files in the cloud.

</member>
        <member name="F:trtc.TRTCParams.businessInfo">
**Field description:** business data, which is optional. This field is needed only by some advanced features.
**Recommended value:** do not set this field on your own.
</member>
        <member name="F:trtc.TRTCParams.privateMapKey">
**Field description:** permission credential used for permission control, which is optional. If you want only users with the specified `userId` values to enter a room, you need to use `privateMapKey` to restrict the permission.
**Recommended value:** we recommend you use this parameter only if you have high security requirements. For more information, please see [Enabling Advanced Permission Control](https://cloud.tencent.com/document/product/647/32240).
</member>
        <member name="F:trtc.TRTCParams.streamId">
**Field description:** specified `streamId` in Tencent Cloud CSS, which is optional. After setting this field, you can play back the user's audio/video stream on Tencent Cloud CSS CDN through a standard pull scheme (FLV or HLS).
**Recommended value:** this parameter can contain up to 64 bytes and can be left empty. We recommend you use `sdkappid_roomid_userid_main` as the `streamid`, which is easier to identify and will not cause conflicts in your multiple applications.
**Note:** to use Tencent Cloud CSS CDN, you need to enable the auto-relayed live streaming feature on the "Function Configuration" page in the [console](https://console.cloud.tencent.com/trtc/) first.
For more information, please see [CDN Relayed Live Streaming](https://cloud.tencent.com/document/product/647/16826).
</member>
        <member name="F:trtc.TRTCParams.role">
**Field description:** role in the live streaming scenario, which is applicable only to the live streaming scenario ({@link TRTCAppSceneLIVE} or {@link TRTCAppSceneVoiceChatRoom}) but doesn't take effect in the call scenario.
**Recommended value:** default value: anchor ({@link TRTCRoleAnchor}).
</member>
        <member name="F:trtc.TRTCParams.roomId">
**Field description:** numeric room ID. Users (userId) in the same room can see one another and make audio/video calls.
**Recommended value:** value range: 1–4294967294.
**Note:** `roomId` and `strRoomId` are mutually exclusive. If you decide to use `strRoomId`, then `roomId` should be entered as 0. If both are entered, `roomId` will be used.
**Note:** do not mix `roomId` and `strRoomId`, because they are not interchangeable. For example, the number `123` and the string `123` are two completely different rooms in TRTC.
</member>
        <member name="F:trtc.TRTCParams.userSig">
**Field description:** user signature, which is required. It is the authentication signature corresponding to the current `userId` and acts as the login password for Tencent Cloud services.
**Recommended value:** for the calculation method, please see [UserSig](https://cloud.tencent.com/document/product/647/17275).
</member>
        <member name="F:trtc.TRTCParams.userId">
**Field description:** user ID, which is required. It is the `userId` of the local user in UTF-8 encoding and acts as the username.
**Recommended value:** if the ID of a user in your account system is "mike", `userId` can be set to "mike".
</member>
        <member name="F:trtc.TRTCParams.sdkAppId">
**Field description:** application ID, which is required. Tencent Cloud generates bills based on `sdkAppId`.
**Recommended value:** the ID can be obtained on the account information page in the [TRTC console](https://console.cloud.tencent.com/rav/) after the corresponding application is created.
</member>
        <member name="T:trtc.TRTCParams">
5.1 Room entry parameters

As the room entry parameters in the TRTC SDK, these parameters must be correctly set so that the user can successfully enter the audio/video room specified by `roomId` or `strRoomId`.
For historical reasons, TRTC supports two types of room IDs: `roomId` and `strRoomId`.
Note: do not mix `roomId` and `strRoomId`, because they are not interchangeable. For example, the number `123` and the string `123` are two completely different rooms in TRTC.

</member>
        <member name="T:trtc.TRTCDeviceState">
4.8 Device operation

This enumerated value is used to notify the status change of the local device {@link onDeviceChange}.

</member>
        <member name="F:TRTCDeviceStateActive">
The device has been enabled
</member>
        <member name="F:TRTCDeviceStateRemove">
The device has been removed
</member>
        <member name="F:TRTCDeviceStateAdd">
The device has been plugged in
</member>
        <member name="T:trtc.TRTCWaterMarkSrcType">
4.8 Watermark image source type (CPP)

</member>
        <member name="F:TRTCWaterMarkSrcTypeRGBA32">
Memory block in RGBA32 format
</member>
        <member name="F:TRTCWaterMarkSrcTypeBGRA32">
Memory block in BGRA32 format
</member>
        <member name="F:TRTCWaterMarkSrcTypeFile">
Path of the image file, which can be in BMP, GIF, JPEG, PNG, TIFF, Exif, WMF, or EMF format
</member>
        <member name="D:trtc.TRTCDeviceType">
4.7 Device type (for desktop platforms only)

This enumerated value is used to define three types of audio/video devices, namely, camera, mic, and speaker, so that the same device management API can control the three different types of devices.
Starting from v8.0, TRTC redefines `TXMediaDeviceType` in `TXDeviceManager` to replace `TRTCMediaDeviceType` on legacy versions.
Only the definition of `TRTCMediaDeviceType` is retained here for compatibility with customer code on legacy versions.

</member>
        <member name="T:trtc.TRTCMixInputType">
4.6. Stream mix input type

</member>
        <member name="F:TRTCMixInputTypePureAudio">
Mix audio only
</member>
        <member name="F:TRTCMixInputTypePureVideo">
Mix video only
</member>
        <member name="F:TRTCMixInputTypeAudioVideo">
Mix both audio and video
</member>
        <member name="F:TRTCMixInputTypeUndefined">
Unspecified. The SDK will determine the stream mix input type according to the value of the `pureAudio` parameter
</member>
        <member name="T:trtc.TRTCLocalRecordType">
4.5 Media recording type

This enumerated type is used in the local media recording API {@link startLocalRecording} to specify whether to record audio/video files or pure audio files.

</member>
        <member name="F:TRTCLocalRecordType_Both">
Record both audio and video
</member>
        <member name="F:TRTCLocalRecordType_Video">
Record video only
</member>
        <member name="F:TRTCLocalRecordType_Audio">
Record audio only
</member>
        <member name="T:trtc.TRTCTranscodingConfigMode">
4.4 Layout mode of On-Cloud MixTranscoding

TRTC's On-Cloud MixTranscoding service can mix multiple audio/video streams in the room into one stream. Therefore, you need to specify the layout scheme of the video images. The following layout modes are provided:

</member>
        <member name="F:TRTCTranscodingConfigMode_Template_PresetLayout">
Preset layout mode
This is the most popular layout mode, because it allows you to set the position of each video image in advance through placeholders, and then the SDK automatically adjusts it dynamically according to the number of video images in the room.
In this mode, you still need to set the `mixUsers` parameter, but you can set `userId` as a "placeholder". Placeholder values include:
- "$PLACE_HOLDER_REMOTE$": image of remote user. Multiple images can be set.
- "$PLACE_HOLDER_LOCAL_MAIN$": local camera image. Only one image can be set.
- "$PLACE_HOLDER_LOCAL_SUB$": local screen sharing image. Only one image can be set.
In this mode, you don't need to listen on the `onUserVideoAvailable()` and `onUserAudioAvailable()` callbacks in `TRTCCloudDelegate` to make real-time adjustments.
Instead, you only need to call `setMixTranscodingConfig()` once after successful room entry. Then, the SDK will automatically populate the placeholders you set with real `userId` values.
</member>
        <member name="F:TRTCTranscodingConfigMode_Template_PureAudio">
Pure audio mode
This mode is suitable for pure audio scenarios such as audio call (AudioCall) and audio chat room (VoiceChatRoom).
- You only need to set it once through the `setMixTranscodingConfig()` API after room entry, and then the SDK will automatically mix the audio of all mic-on users in the room into the current user's live stream.
- You don't need to set the `mixUsers` parameter in `TRTCTranscodingConfig`; instead, you only need to set the `audioSampleRate`, `audioBitrate` and `audioChannels` parameters.
</member>
        <member name="F:TRTCTranscodingConfigMode_Manual">
Manual layout mode
In this mode, you need to specify the precise position of each video image. This mode has the highest degree of freedom, but its ease of use is the worst:
- You need to enter all the parameters in `TRTCTranscodingConfig`, including the position coordinates of each video image (TRTCMixUser).
- You need to listen on the `onUserVideoAvailable()` and `onUserAudioAvailable()` event callbacks in `TRTCCloudDelegate` and constantly adjust the `mixUsers` parameter according to the audio/video status of each user with mic on in the current room.
</member>
        <member name="F:TRTCTranscodingConfigMode_Unknown">
Undefined
</member>
        <member name="T:trtc.TRTCScreenCaptureSourceType">
4.3 Screen sharing target type (for desktops only)

</member>
        <member name="F:TRTCScreenCaptureSourceTypeCustom">
The screen sharing target is a user-defined data source
</member>
        <member name="F:TRTCScreenCaptureSourceTypeScreen">
The screen sharing target is the entire screen
</member>
        <member name="F:TRTCScreenCaptureSourceTypeWindow">
The screen sharing target is the window of an application
</member>
        <member name="F:TRTCScreenCaptureSourceTypeUnknown">
Undefined
</member>
        <member name="T:trtc.TRTCLogLevel">
4.1 Log level
Different log levels indicate different levels of details and number of logs. We recommend you set the log level to `TRTCLogLevelInfo` generally.

</member>
        <member name="F:TRTCLogLevelNone">
Do not output any SDK logs
</member>
        <member name="F:TRTCLogLevelFatal">
Output logs at the FATAL level
</member>
        <member name="F:TRTCLogLevelError">
Output logs at the ERROR and FATAL levels
</member>
        <member name="F:TRTCLogLevelWarn">
Output logs at the WARNING, ERROR, and FATAL levels
</member>
        <member name="F:TRTCLogLevelInfo">
Output logs at the INFO, WARNING, ERROR, and FATAL levels
</member>
        <member name="F:TRTCLogLevelDebug">
Output logs at the DEBUG, INFO, WARNING, ERROR, and FATAL levels
</member>
        <member name="F:TRTCLogLevelVerbose">
Output logs at all levels
</member>
        <member name="T:trtc.TRTCAudioFrameFormat">
3.7 Audio frame content format

</member>
        <member name="F:TRTCAudioFrameFormatPCM">
Audio data in PCM format
</member>
        <member name="F:TRTCAudioFrameFormatNone">
None
</member>
        <member name="T:trtc.TRTCAudioQuality">
3.2 Sound quality

TRTC provides three well-tuned modes to meet the differentiated requirements for sound quality in various verticals:
- Speech mode (Speech): it is suitable for application scenarios that focus on human communication. In this mode, the audio transfer is more resistant, and TRTC uses various voice processing technologies to ensure the optimal smoothness even in weak network environments.
- Music mode (Music): it is suitable for scenarios with demanding requirements for music. In this mode, the amount of transferred audio data is very large, and TRTC uses various technologies to ensure that the high-fidelity details of music signals can be restored in each frequency band.
- Default mode (Default): it is between `Speech` and `Music`. In this mode, the reproduction of music is better than that in `Speech` mode, and the amount of transferred data is much lower than that in `Music` mode; therefore, this mode has good adaptability to various scenarios.

</member>
        <member name="F:TRTCAudioQualityMusic">
Music mode: sample rate: 48 kHz; full-band stereo; bitrate: 128 Kbps. This mode is suitable for scenarios where Hi-Fi music transfer is required, such as online karaoke and music live streaming.
</member>
        <member name="F:TRTCAudioQualityDefault">
Default mode: sample rate: 48 kHz; mono channel; bitrate: 50 Kbps. This mode is between the speech mode and the music mode as the default mode in the SDK and is recommended.
</member>
        <member name="F:TRTCAudioQualitySpeech">
Speech mode: sample rate: 16 kHz; mono channel; bitrate: 16 Kbps. This mode has the best resistance among all modes and is suitable for audio call scenarios, such as online meeting and audio call.
</member>
        <member name="T:trtc.TRTCAVStatusChangeReason">
2.7 Reasons for playback status changes

</member>
        <member name="F:TRTCAVStatusChangeReasonRemoteStopped">
As the remote user stopped (or paused) publishing the video stream, the stream enters the "Stopped" state
</member>
        <member name="F:TRTCAVStatusChangeReasonRemoteStarted">
As the remote user started (or resumed) publishing the video stream, the stream enters the "Loading" or "Playing" state
</member>
        <member name="F:TRTCAVStatusChangeReasonLocalStopped">
As a stop-related API was directly called locally, the stream enters the "Stopped" state
</member>
        <member name="F:TRTCAVStatusChangeReasonLocalStarted">
As a start-related API was directly called locally, the stream enters the "Playing" state
</member>
        <member name="F:TRTCAVStatusChangeReasonBufferingEnd">
The stream enters the "Playing" state after network recovery
</member>
        <member name="F:TRTCAVStatusChangeReasonBufferingBegin">
The stream enters the "Loading" state due to network congestion
</member>
        <member name="F:TRTCAVStatusChangeReasonInternal">
Default value
</member>
        <member name="T:trtc.TRTCAVStatusType">
2.6 Audio/Video playback status

</member>
        <member name="F:TRTCAVStatusStopped">
Stopped
</member>
        <member name="F:TRTCAVStatusLoading">
Loading
</member>
        <member name="F:TRTCAVStatusPlaying">
Playing
</member>
        <member name="T:trtc.TRTCQuality">
2.5 Network quality

TRTC evaluates the current network quality once every two seconds. The evaluation results are divided into six levels: `Excellent` indicates the best, and `Down` indicates the worst.

</member>
        <member name="F:TRTCQuality_Down">
The current network cannot meet the minimum requirements of TRTC
</member>
        <member name="F:TRTCQuality_Vbad">
The current network is very bad
</member>
        <member name="F:TRTCQuality_Bad">
The current network is bad
</member>
        <member name="F:TRTCQuality_Poor">
The current network is fair
</member>
        <member name="F:TRTCQuality_Good">
The current network is good
</member>
        <member name="F:TRTCQuality_Excellent">
The current network is excellent
</member>
        <member name="F:TRTCQuality_Unknown">
Undefined
</member>
        <member name="T:trtc.TRTCVideoQosPreference">
2.4 Image quality preference

TRTC has two control modes in weak network environments: "ensuring clarity" and "ensuring smoothness". Both modes will give priority to the transfer of audio data.

</member>
        <member name="F:TRTCVideoQosPreferenceClear">
Ensuring clarity (default value): in this mode, when the current network is unable to transfer a clear and smooth video image, the clarity of the image will be given priority, but there will be lags.
</member>
        <member name="F:TRTCVideoQosPreferenceSmooth">
Ensuring smoothness: in this mode, when the current network is unable to transfer a clear and smooth video image, the smoothness of the image will be given priority, but there will be blurs.
</member>
        <member name="T:trtc.TRTCQosControlMode">
2.3 QoS control mode (disused)

</member>
        <member name="F:TRTCQosControlModeServer">
On-cloud control, which is the default and recommended mode.
</member>
        <member name="F:TRTCQosControlModeClient">
Client-based control, which is for internal debugging of SDK and shall not be used by users.
</member>
        <member name="T:trtc.TRTCRoleType">
2.2 Role

Role is applicable only to live streaming scenarios (`TRTCAppSceneLIVE` and `TRTCAppSceneVoiceChatRoom`). Users are divided into two roles:
- Anchor, who can publish their audio/video streams. There is a limit on the number of anchors. Up to 50 anchors are allowed to publish streams at the same time in one room.
- Audience, who can only listen to or watch audio/video streams of anchors in the room. If they want to publish their streams, they need to switch to the "anchor" role first through {@link switchRole}. One room can sustain up to 100,000 concurrent online users in the audience role.

</member>
        <member name="F:TRTCRoleAudience">
Audience can only listen to or watch audio/video streams of anchors in the room. If they want to publish their streams, they need to switch to the "anchor" role first through {@link switchRole}. One room can sustain up to 100,000 concurrent online users in the audience role.
</member>
        <member name="F:TRTCRoleAnchor">
An anchor can publish their audio/video streams. There is a limit on the number of anchors. Up to 50 anchors are allowed to publish streams at the same time in one room.
</member>
        <member name="T:trtc.TRTCAppScene">
2.1 Use cases

TRTC features targeted optimizations for common audio/video application scenarios to meet the differentiated requirements in various verticals. The main scenarios can be divided into the following two categories:
- Live streaming scenario (LIVE): including `LIVE` (audio + video) and `VoiceChatRoom` (pure audio).
  In the live streaming scenario, users are divided into two roles: "anchor" and "audience". A single room can sustain up to 100,000 concurrent online users. This is suitable for live streaming to a large audience.
- Real-Time scenario (RTC): including `VideoCall` (audio + video) and `AudioCall` (pure audio).
  In the real-time scenario, there is no role difference between users, but a single room can sustain only up to 300 concurrent online users. This is suitable for small-scale real-time communication.

</member>
        <member name="F:TRTCAppSceneVoiceChatRoom">
In the interactive audio live streaming scenario, mic can be turned on/off smoothly without waiting for switchover, and the anchor latency is as low as less than 300 ms. Live streaming to hundreds of thousands of concurrent users in the audience role is supported with the playback latency down to 1,000 ms.
Use cases: [audio club], [online karaoke room], [music live room], [FM radio], etc.
@note In this scenario, you must use the `role` field in `TRTCParams` to specify the role of the current user.
</member>
        <member name="F:TRTCAppSceneAudioCall">
Audio call scenario, where the `SPEECH` sound quality is used by default. A single room can sustain up to 300 concurrent online users, and up to 50 of them can speak simultaneously.
Use cases: [one-to-one audio call], [audio conferencing with up to 300 participants], [audio chat], [online Werewolf], etc.
</member>
        <member name="F:TRTCAppSceneLIVE">
In the interactive video live streaming scenario, mic can be turned on/off smoothly without waiting for switchover, and the anchor latency is as low as less than 300 ms. Live streaming to hundreds of thousands of concurrent users in the audience role is supported with the playback latency down to 1,000 ms.
Use cases: [low-latency interactive live streaming], [big class], [anchor competition], [video dating room], [online interactive classroom], [remote training], [large-scale conferencing], etc.
@note In this scenario, you must use the `role` field in `TRTCParams` to specify the role of the current user.
</member>
        <member name="F:TRTCAppSceneVideoCall">
In the video call scenario, 720p and 1080p HD image quality is supported. A single room can sustain up to 300 concurrent online users, and up to 50 of them can speak simultaneously.
Use cases: [one-to-one video call], [video conferencing with up to 300 participants], [online medical diagnosis], [small class], [video interview], etc.
</member>
        <member name="T:trtc.TRTCSnapshotSourceType">
1.10 Data source of local video screenshot

The SDK can take screenshots from the following two data sources and save them as local files:
- Video stream: the SDK screencaptures the native video content from the video stream. The screenshots are not controlled by the display of the rendering control.
- Rendering layer: the SDK screencaptures the displayed video content from the rendering control, which can achieve the effect of WYSIWYG, but if the display area is too small, the screenshots will also be very small.

</member>
        <member name="F:TRTCSnapshotSourceTypeView">
The SDK screencaptures the displayed video content from the rendering control, which can achieve the effect of WYSIWYG, but if the display area is too small, the screenshots will also be very small.
</member>
        <member name="F:TRTCSnapshotSourceTypeStream">
The SDK screencaptures the native video content from the video stream. The screenshots are not controlled by the display of the rendering control.
</member>
        <member name="T:trtc.TRTCVideoMirrorType">
1.9 Video mirror type

Video mirroring refers to the left-to-right flipping of the video image, especially for the local camera preview image. After mirroring is enabled, it can bring anchors a familiar "look into the mirror" experience.

</member>
        <member name="F:TRTCVideoMirrorType_Disable">
Disable mirroring for both the front and rear cameras.
</member>
        <member name="F:TRTCVideoMirrorType_Enable">
Auto mode: mirror the front camera's image but not the rear camera's image (for mobile devices only).
Mirror the images of both the front and rear cameras.
</member>
        <member name="T:trtc.TRTCVideoBufferType">
1.8 Video data transfer method

For custom capturing and rendering features, you need to use the following enumerated values to specify the method of transferring video data:
- Method 1. This method uses memory buffer to transfer video data. It is efficient on iOS but inefficient on Android. It is the only method supported on Windows currently.
- Method 2. This method uses texture to transfer video data. It is efficient on both iOS and Android but is not supported on Windows. To use this method, you should have a general familiarity with OpenGL programming.

</member>
        <member name="F:TRTCVideoBufferType_Texture">
Use texture to transfer video data
</member>
        <member name="F:TRTCVideoBufferType_Buffer">
Use memory buffer to transfer video data. iOS: `PixelBuffer`; Android: `Direct Buffer` for JNI layer; Windows: memory data block.
</member>
        <member name="F:TRTCVideoBufferType_Unknown">
Undefined transfer method
</member>
        <member name="T:trtc.TRTCVideoPixelFormat">
1.7 Video pixel format

TRTC provides custom video capturing and rendering features.
- For the custom capturing feature, you can use the following enumerated values to describe the pixel format of the video you capture.
- For the custom rendering feature, you can specify the pixel format of the video you expect the SDK to call back.

</member>
        <member name="F:TRTCVideoPixelFormat_RGBA32">
RGBA format
</member>
        <member name="F:TRTCVideoPixelFormat_BGRA32">
BGRA32 format
</member>
        <member name="F:TRTCVideoPixelFormat_Texture_2D">
OpenGL 2D texture format
</member>
        <member name="F:TRTCVideoPixelFormat_I420">
YUV420P (I420) format
</member>
        <member name="F:TRTCVideoPixelFormat_Unknown">
Undefined format
</member>
        <member name="T:trtc.TRTCBeautyStyle">
1.6 Beauty (skin smoothing) filter algorithm

TRTC has multiple built-in skin smoothing algorithms. You can select the one most suitable for your product.

</member>
        <member name="F:TRTCBeautyStyleNature">
Natural style, which retains more facial details for more natural effect and is suitable for most live streaming use cases.
</member>
        <member name="F:TRTCBeautyStyleSmooth">
Smooth style, which uses a more radical algorithm for more obvious effect and is suitable for show live streaming.
</member>
        <member name="T:trtc.TRTCVideoRotation">
1.5 Video image rotation direction

TRTC provides rotation angle setting APIs for local and remote images. The following rotation angles are all clockwise.

</member>
        <member name="F:TRTCVideoRotation270">
Clockwise rotation by 270 degrees
</member>
        <member name="F:TRTCVideoRotation180">
Clockwise rotation by 180 degrees
</member>
        <member name="F:TRTCVideoRotation90">
Clockwise rotation by 90 degrees
</member>
        <member name="F:TRTCVideoRotation0">
No rotation
</member>
        <member name="T:trtc.TRTCVideoFillMode">
1.4 Video image fill mode

If the aspect ratio of the video display area is not equal to that of the video image, you need to specify the fill mode:

</member>
        <member name="F:TRTCVideoFillMode_Fit">
Fit mode: the video image will be scaled based on its long side to fit the display area, where the short side will be filled with black bars. The displayed image is complete in this mode, but there may be black bars.
</member>
        <member name="F:TRTCVideoFillMode_Fill">
Fill mode: the video image will be centered and scaled to fill the entire display area, where parts that exceed the area will be cropped. The displayed image may be incomplete in this mode.
</member>
        <member name="T:trtc.TRTCVideoStreamType">
1.3 Video stream type

TRTC provides three different video streams, including:
 - HD big image: it is generally used to transfer video data from the camera.
 - Smooth small image: it has the same content as the big image, but with lower resolution and bitrate and thus lower definition.
 - Substream image: it is generally used for screen sharing. Only one user in the room is allowed to publish the substream video image at any time, while other users must wait for this user to close the substream before they can publish their own substream.

@note The SDK does not support enabling the smooth small image alone, which must be enabled together with the big image. It will automatically set the resolution and bitrate of the small image.

</member>
        <member name="F:TRTCVideoStreamTypeSub">
Substream image: it is generally used for screen sharing. Only one user in the room is allowed to publish the substream video image at any time, while other users must wait for this user to close the substream before they can publish their own substream.
</member>
        <member name="F:TRTCVideoStreamTypeSmall">
Smooth small image: it has the same content as the big image, but with lower resolution and bitrate and thus lower definition.
</member>
        <member name="F:TRTCVideoStreamTypeBig">
HD big image: it is generally used to transfer video data from the camera.
</member>
        <member name="T:trtc.TRTCVideoResolutionMode">
1.2 Video aspect ratio mode

Only the landscape resolution (e.g., 640x360) is defined in `TRTCVideoResolution`. If the portrait resolution (e.g., 360x640) needs to be used, `Portrait` must be selected for `TRTCVideoResolutionMode`.

</member>
        <member name="F:TRTCVideoResolutionModePortrait">
Portrait resolution, such as TRTCVideoResolution_640_360 + TRTCVideoResolutionModePortrait = 360x640.
</member>
        <member name="F:TRTCVideoResolutionModeLandscape">
Landscape resolution, such as TRTCVideoResolution_640_360 + TRTCVideoResolutionModeLandscape = 640x360.
</member>
        <member name="T:trtc.TRTCVideoResolution">
1.1 Video resolution

Here, only the landscape resolution (e.g., 640x360) is defined. If the portrait resolution (e.g., 360x640) needs to be used, `Portrait` must be selected for `TRTCVideoResolutionMode`.

</member>
        <member name="F:TRTCVideoResolution_1920_1080">
Aspect ratio: 16:9; resolution: 1920x1080; recommended bitrate (VideoCall): 2000 Kbps; recommended bitrate (LIVE): 3000 Kbps.
</member>
        <member name="F:TRTCVideoResolution_1280_720">
Aspect ratio: 16:9; resolution: 1280x720; recommended bitrate (VideoCall): 1200 Kbps; recommended bitrate (LIVE): 1800 Kbps.
</member>
        <member name="F:TRTCVideoResolution_960_540">
Aspect ratio: 16:9; resolution: 960x540; recommended bitrate (VideoCall): 850 Kbps; recommended bitrate (LIVE): 1300 Kbps.
</member>
        <member name="F:TRTCVideoResolution_640_360">
Aspect ratio: 16:9; resolution: 640x360; recommended bitrate (VideoCall): 500 Kbps; recommended bitrate (LIVE): 900 Kbps.
</member>
        <member name="F:TRTCVideoResolution_480_270">
Aspect ratio: 16:9; resolution: 480x270; recommended bitrate (VideoCall): 350 Kbps; recommended bitrate (LIVE): 550 Kbps.
</member>
        <member name="F:TRTCVideoResolution_320_180">
Aspect ratio: 16:9; resolution: 320x180; recommended bitrate (VideoCall): 250 Kbps; recommended bitrate (LIVE): 400 Kbps.
</member>
        <member name="F:TRTCVideoResolution_256_144">
Aspect ratio: 16:9; resolution: 256x144; recommended bitrate (VideoCall): 200 Kbps; recommended bitrate (LIVE): 300 Kbps.
</member>
        <member name="F:TRTCVideoResolution_160_90">
Aspect ratio: 16:9; resolution: 160x90; recommended bitrate (VideoCall): 150 Kbps; recommended bitrate (LIVE): 250 Kbps.
</member>
        <member name="F:TRTCVideoResolution_960_720">
Aspect ratio: 4:3; resolution: 960x720; recommended bitrate (VideoCall): 1000 Kbps; recommended bitrate (LIVE): 1500 Kbps.
</member>
        <member name="F:TRTCVideoResolution_640_480">
Aspect ratio: 4:3; resolution: 640x480; recommended bitrate (VideoCall): 600 Kbps; recommended bitrate (LIVE): 900 Kbps.
</member>
        <member name="F:TRTCVideoResolution_480_360">
Aspect ratio: 4:3; resolution: 480x360; recommended bitrate (VideoCall): 400 Kbps; recommended bitrate (LIVE): 600 Kbps.
</member>
        <member name="F:TRTCVideoResolution_400_300">
Aspect ratio: 4:3; resolution: 400x300; recommended bitrate (VideoCall): 300 Kbps; recommended bitrate (LIVE): 450 Kbps.
</member>
        <member name="F:TRTCVideoResolution_320_240">
Aspect ratio: 4:3; resolution: 320x240; recommended bitrate (VideoCall): 250 Kbps; recommended bitrate (LIVE): 375 Kbps.
</member>
        <member name="F:TRTCVideoResolution_280_210">
Aspect ratio: 4:3; resolution: 280x210; recommended bitrate (VideoCall): 200 Kbps; recommended bitrate (LIVE): 300 Kbps.
</member>
        <member name="F:TRTCVideoResolution_240_180">
Aspect ratio: 4:3; resolution: 240x180; recommended bitrate (VideoCall): 150 Kbps; recommended bitrate (LIVE): 250 Kbps.
</member>
        <member name="F:TRTCVideoResolution_160_120">
Aspect ratio: 4:3; resolution: 160x120; recommended bitrate (VideoCall): 100 Kbps; recommended bitrate (LIVE): 150 Kbps.
</member>
        <member name="F:TRTCVideoResolution_480_480">
Aspect ratio: 1:1; resolution: 480x480; recommended bitrate (VideoCall): 350 Kbps; recommended bitrate (LIVE): 500 Kbps.
</member>
        <member name="F:TRTCVideoResolution_270_270">
Aspect ratio: 1:1; resolution: 270x270; recommended bitrate (VideoCall): 200 Kbps; recommended bitrate (LIVE): 300 Kbps.
</member>
        <member name="F:TRTCVideoResolution_160_160">
Aspect ratio: 1:1; resolution: 160x160; recommended bitrate (VideoCall): 100 Kbps; recommended bitrate (LIVE): 150 Kbps.
</member>
        <member name="F:TRTCVideoResolution_120_120">
Aspect ratio: 1:1; resolution: 120x120; recommended bitrate (VideoCall): 80 Kbps; recommended bitrate (LIVE): 120 Kbps.
</member>
        <member name="M:trtc.ITXDeviceManager.getApplicationMuteState">
2.18 Querying whether the current process is muted in the volume mixer (for Windows)

</member>
        <member name="M:trtc.ITXDeviceManager.setApplicationMuteState(System.Boolean)">
2.17 Muting the current process in the volume mixer (for Windows)

</member>
        <member name="M:trtc.ITXDeviceManager.getApplicationPlayVolume">
2.16 Getting the volume of the current process in the volume mixer (for Windows)

</member>
        <member name="M:trtc.ITXDeviceManager.setApplicationPlayVolume(System.Int32)">
2.15 Setting the volume of the current process in the volume mixer (for Windows)

</member>
        <member name="M:trtc.ITXDeviceManager.startCameraDeviceTest(trtc.ITRTCVideoRenderCallback*)">
2.14 Starting camera testing (for Windows)

This API supports custom rendering, meaning that you can use the callback API `ITRTCVideoRenderCallback` to get the images captured by the camera for custom rendering.

</member>
        <member name="M:trtc.ITXDeviceManager.stopSpeakerDeviceTest">
2.13 Ending speaker testing (for desktop OS)

</member>
        <member name="M:trtc.ITXDeviceManager.startSpeakerDeviceTest(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.12 Starting speaker testing (for desktop OS)

This API is used to test whether the audio playback device functions properly by playing a specified audio file. If users can hear audio during testing, the device functions properly.
@param filePath Path of the audio file

</member>
        <member name="M:trtc.ITXDeviceManager.stopMicDeviceTest">
2.11 Ending mic testing (for desktop OS)

</member>
        <member name="M:trtc.ITXDeviceManager.startMicDeviceTest(System.UInt32)">
2.10 Starting mic testing (for desktop OS)

This API is used to test whether the mic functions properly. The mic volume detected (value range: 0-100) is returned via a callback.
@param interval Interval of volume callbacks

</member>
        <member name="M:trtc.ITXDeviceManager.stopCameraDeviceTest">
2.9 Ending camera testing (for desktop OS)

</member>
        <member name="M:trtc.ITXDeviceManager.startCameraDeviceTest(System.Void*)">
2.8 Starting camera testing (for desktop OS)

@note You can use the {@link setCurrentDevice} API to switch between cameras during testing.

</member>
        <member name="M:trtc.ITXDeviceManager.getCurrentDeviceMute(trtc.TXMediaDeviceType)">
2.7 Querying whether the current device is muted (for desktop OS)

This API is used to query whether the mic or speaker is muted. Camera muting is not supported.

</member>
        <member name="M:trtc.ITXDeviceManager.setCurrentDeviceMute(trtc.TXMediaDeviceType,System.Boolean)">
2.6 Muting the current device (for desktop OS)

This API is used to mute the mic or speaker, but not the camera.

</member>
        <member name="M:trtc.ITXDeviceManager.getCurrentDeviceVolume(trtc.TXMediaDeviceType)">
2.5 Getting the volume of the current device (for desktop OS)

This API is used to get the capturing volume of the mic or playback volume of the speaker, but not the volume of the camera.

</member>
        <member name="M:trtc.ITXDeviceManager.setCurrentDeviceVolume(trtc.TXMediaDeviceType,System.UInt32)">
2.4 Setting the volume of the current device (for desktop OS)

This API is used to set the capturing volume of the mic or playback volume of the speaker, but not the volume of the camera.
@param volume Volume. Value range: 0-100; default: 100
@note If 100 is still not loud enough for you, you can set the volume to up to 150, but there may be side effects.

</member>
        <member name="M:trtc.ITXDeviceManager.getCurrentDevice(trtc.TXMediaDeviceType)">
2.3 Getting the device currently in use (for desktop OS)

</member>
        <member name="M:trtc.ITXDeviceManager.setCurrentDevice(trtc.TXMediaDeviceType,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
2.2 Setting the device to use (for desktop OS)

@param type Device type. For details, please see the definition of `TXMediaDeviceType`.
@param deviceId Device ID. You can get the ID of a device using the {@link getDevicesList} API.
@return 0: operation successful; negative number: operation failed.

</member>
        <member name="M:trtc.ITXDeviceManager.getDevicesList(trtc.TXMediaDeviceType)">
@}
@name Device APIs for mobile OS
@{
1.1 Querying whether the front camera is being used

@}
@name Device APIs for desktop OS
@{
2.1 Getting the device list (for desktop OS)

@param type  Device type. Set it to the type of device you want to get. For details, please see the definition of `TXMediaDeviceType`.
@note 
  - To ensure that the SDK can manage the lifecycle of the `ITXDeviceCollection` object, after using this API, please call the `release` method to release the resources.
  - Do not use `delete` to release the Collection object returned as deleting the ITXDeviceCollection* pointer will cause crash.
  - The valid values of `type` are `TXMediaDeviceTypeMic`, `TXMediaDeviceTypeSpeaker`, and `TXMediaDeviceTypeCamera`.
  - This API can be used only on macOS and Windows.

</member>
        <member name="M:trtc.ITXDeviceCollection.release">
release function, don't use delete!!!
</member>
        <member name="M:trtc.ITXDeviceCollection.getDevicePID(System.UInt32)">
device PID (UTF-8)
</member>
        <member name="M:trtc.ITXDeviceCollection.getDeviceName(System.UInt32)">
device name (UTF-8)   
</member>
        <member name="M:trtc.ITXDeviceCollection.getCount">
Size of this list.
</member>
        <member name="M:trtc.ITXDeviceInfo.release">
release function, don't use delete!!!   
</member>
        <member name="M:trtc.ITXDeviceInfo.getDevicePID">
device PID (UTF-8)    
</member>
        <member name="M:trtc.ITXDeviceInfo.getDeviceName">
device name (UTF-8)
</member>
        <member name="T:trtc.ITXDeviceInfo">
Audio/Video device information (for desktop OS)

This structure describes key information (such as device ID and device name) of an audio/video device, so that users can choose on the UI the device to use.

</member>
        <member name="T:trtc.TXMediaDeviceType">
Device type (for desktop OS)

This enumerated type defines three types of audio/video devices, namely camera, mic and speaker, so that you can use the same device management API to manage three types of devices.

</member>
        <member name="T:trtc.TXAudioRoute">
Audio route (the route via which audio is played)

Audio route is the route (speaker or receiver) via which audio is played. It applies only to mobile devices such as mobile phones.
A mobile phone has two speakers: one at the top (receiver) and the other the bottom.
- If the audio route is set to the receiver, the volume is relatively low, and audio can be heard only when the phone is put near the ear. This mode has a high level of privacy and is suitable for answering calls.
- If the audio route is set to the speaker, the volume is relatively high, and there is no need to put the phone near the ear. This mode enables the "hands-free" feature.

</member>
        <member name="F:TXAudioRouteEarpiece">
Earpiece: the receiver at the top is used for playback. With relatively low volume, it is suitable for call scenarios that require privacy.
</member>
        <member name="F:TXAudioRouteSpeakerphone">
Speakerphone: the speaker at the bottom is used for playback (hands-free). With relatively high volume, it is used to play music out loud.
</member>
        <member name="T:trtc.TXSystemVolumeType">
@name Type definitions of audio/video devices
@{
System volume type (for mobile devices only)

Smartphones usually have two types of system volume: call volume and media volume.
- Call volume is designed for call scenarios. It comes with acoustic echo cancellation (AEC) and supports audio capturing by Bluetooth earphones, but its sound quality is average.
           If you cannot turn the volume down to 0 (i.e., mute the phone) using the volume buttons, then your phone is using call volume.
- Media volume is designed for media scenarios such as music playback. AEC does not work when media volume is used, and Bluetooth earphones cannot be used for audio capturing. However, media volume delivers better music listening experience.
           If you are able to mute your phone using the volume buttons, then your phone is using media volume.

The SDK offers three system volume control modes: auto, call volume, and media volume.

</member>
        <member name="F:TXSystemVolumeTypeVOIP">
Call volume:
In this mode, the audio module does not change its work mode when users switch between anchors and audience, enabling seamless mic on/off. This mode is suitable for scenarios where users need to switch frequently between anchors and audience.
</member>
        <member name="F:TXSystemVolumeTypeMedia">
Media volume:
In this mode, media volume is used in all scenarios. It is rarely used, mainly suitable for music scenarios with demanding requirements on audio quality.
Use this mode if most of your users use peripheral devices such as audio cards. Otherwise, it is not recommended.
</member>
        <member name="F:TXSystemVolumeTypeAuto">
Auto:
In the auto mode, call volume is used for anchors, and media volume for audience. This mode is suitable for live streaming scenarios.
</member>
        <member name="T:trtc.ITRTCVideoRenderCallback">
@defgroup TXDeviceManager_cplusplus TXDeviceManager
Tencent Cloud Device Management Module
@{

@}
@name Callback of custom video processing
@{
</member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_REQUEST_AVSEAT_SUCC">
            <summary>
请求视频位成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_CONNECT_SUCC">
            <summary>
连接接口机服务器成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_REQUEST_IP_SUCC">
            <summary>
拉取接口机服务器地址成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_AUDIO_STATE">
            <summary>
音频状态位变化通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_VIDEO_STATE">
            <summary>
视频状态位变化通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_EXIT">
            <summary>
退房通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USER_ENTER">
            <summary>
进房通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_ENTER_FAILED">
            <summary>
自己进入房间失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_NEED_REENTER">
            <summary>
WiFi 切换到4G 会触发断线重连，此时需要重新进入房间（拉取最优的服务器地址）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_USERLIST">
            <summary>
下发房间成员列表（不包括自己）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_EXIT">
            <summary>
退出房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_ROOM_ENTER">
            <summary>
进入房间成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_GET_FLVSESSIONKEY">
            <summary>
TXLivePlayer 接收到http响应头中的 flvSessionKey 信息
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_DEVICE_ROUTE_CHANGED">
            <summary>
音频设备的route发生改变，即当前的输入输出设备发生改变，比如耳机被拔出
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_MIC_RELEASE_SUCC">
            <summary>
释放麦克风占用
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_GET_METADATA">
            <summary>
视频流MetaData事件
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_MIC_START_SUCC">
            <summary>
麦克风启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_FIRST_PLAY">
            <summary>
音频首次播放（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_PLAYING">
            <summary>
音频正在播放（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_LOADING">
            <summary>
音频正在加载（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_AUDIO_JITTER_STATE_FIRST_LOADING">
            <summary>
音频首次加载（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SW_DECODER_START_SUCC">
            <summary>
软解码器启动成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_HW_DECODER_START_SUCC">
            <summary>
硬解码器启动成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_DECODER_CACHE_TOO_MANY_FRAMES">
            <summary>
视频解码器缓存帧数过多，超过40帧（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_SEEK_COMPLETE">
            <summary>
点播，视频播放 Seek 完成（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_DNS_RESOLVED">
            <summary>
点播，DNS 解析完成（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_FIRST_VIDEO_PACKET">
            <summary>
点播，收到首帧数据（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_TCP_CONNECT_SUCC">
            <summary>
点播，TCP 连接成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_LIVE_STREAM_SWITCH_SUCC">
            <summary>
直播，切流成功（切流可以播放不同画面大小的视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_LOADING_END">
            <summary>
点播，loading 结束
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VOD_PLAY_PREPARED">
            <summary>
点播，视频加载完毕
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_GET_MESSAGE">
            <summary>
消息事件
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_CHANGE_ROTATION">
            <summary>
视频旋转角度发生改变
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_GET_VODFILE_MEDIAINFO_SUCC">
            <summary>
点播，获取点播文件信息成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_DOWN_CHANGE_RESOLUTION">
            <summary>
下行视频分辨率改变
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_START_VIDEO_DECODER">
            <summary>
解码器启动
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_LOADING">
            <summary>
视频播放 loading
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_END">
            <summary>
视频播放结束
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_PROGRESS">
            <summary>
视频播放进度
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_VIDEO_PLAY_BEGIN">
            <summary>
视频播放开始
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RENDER_FIRST_I_FRAME">
            <summary>
渲染首个视频数据包（IDR）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_LIVE_STREAM_BEGIN">
            <summary>
直播，已经与 RTMP 服务器握手完毕，开始拉流
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_PLAY_LIVE_STREAM_CONNECT_SUCC">
            <summary>
直播，已经连接 RTMP 拉流服务器
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_LOCAL_RECORD_PROGRESS">
            <summary>
本地录制状态通知
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_LOCAL_RECORD_RESULT">
            <summary>
本地录制结果
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SW_ENCODER_START_SUCC">
            <summary>
软编码器启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_HW_ENCODER_START_SUCC">
            <summary>
硬编码器启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RTMP_PUSH_PUBLISH_START">
            <summary>
直播，与 RTMP 服务器连接后，收到 NetStream.Publish.Start 消息，表明流发布成功（SDK 内部事件，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_CLOSE">
            <summary>
关闭摄像头完成（Windows 和 Mac 版 SDK 使用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_AVAILABLE">
            <summary>
摄像头设备重新可用（Windows 和 Mac 版 SDK 使用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_REMOVED">
            <summary>
摄像头设备已被移出（Windows 和 Mac 版 SDK 使用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SNAPSHOT_COMPLETE">
            <summary>
一帧截图完成
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_START_VIDEO_ENCODER">
            <summary>
编码器启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_FIRST_FRAME_AVAILABLE">
            <summary>
首帧画面采集完成
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_UP_CHANGE_BITRATE">
            <summary>
码率动态调整
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_UP_CHANGE_RESOLUTION">
            <summary>
上行动态调整分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_SCREEN_CAPTURE_SUCC">
            <summary>
录屏启动成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_CAMERA_START_SUCC">
            <summary>
打开摄像头成功
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RTMP_PUSH_BEGIN">
            <summary>
直播，已经与 RTMP 服务器握手完毕，开始推流
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVEvent.EVT_RTMP_PUSH_CONNECT_SUCC">
            <summary>
直播，已经连接 RTMP 推流服务器
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_ROOM_NET_BUSY">
            <summary>
网络状况不佳：上行带宽太小，上传数据受阻
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_ROOM_RECONNECT">
            <summary>
网络断连，已启动自动重连
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_NO_STEAM_SOURCE_FAIL">
            <summary>
直播，连接失败，该流地址无视频（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_PLAY_LIVE_STREAM_INFO_CONNECT_FAIL">
            <summary>
直播，connect 服务器调用失败（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_NO_DATA">
            <summary>
直播，超过30s 没有数据发送，主动断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_READ_FAIL">
            <summary>
直播，RTMP 读失败（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_WRITE_FAIL">
            <summary>
直播，RTMP 写失败（SDK 内部错误码，不会对外抛出）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_READ_WRITE_FAIL">
            <summary>
直播，RTMP 读/写失败，将会断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SERVER_BREAK_CONNECT">
            <summary>
直播，服务器主动断开
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SHAKE_FAIL">
            <summary>
直播，与 RTMP 服务器握手失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SEVER_CONN_FAIL">
            <summary>
直播，服务器连接失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_DNS_FAIL">
            <summary>
直播，DNS 解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RECV_DATA_LAG">
            <summary>
网络来包不稳：可能是下行带宽不足，或由于主播端出流不均匀
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_LIVE_STREAM_SERVER_RECONNECT">
            <summary>
直播，网络断连, 已启动自动重连（自动重连连续失败超过三次会放弃）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_RTMP_SERVER_RECONNECT">
            <summary>
直播，网络断连, 已启动自动重连（自动重连连续失败超过三次会放弃）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_NET_BUSY">
            <summary>
网络状况不佳：上行带宽太小，上传数据受阻
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_IGNORE_UPSTREAM_FOR_AUDIENCE">
            <summary>
当前是观众角色，忽略上行音视频数据
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_ROOM_DISCONNECT">
            <summary>
网络断开连接
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_AUDIO_RECORDING_WRITE_FAIL">
            <summary>
音频录制写入文件失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_START_CAPTURE_IGNORED">
            <summary>
视频采集已开始
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_RENDER_FAIL">
            <summary>
视频渲染失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_SW_DECODER_START_FAIL">
            <summary>
软解码器启动失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_DECODER_HW_TO_SW">
            <summary>
当前流硬解第一个 I 帧失败，SDK 自动切软解
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_HW_DECODER_START_FAIL">
            <summary>
硬解启动失败，采用软解码
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_PLAY_LAG">
            <summary>
当前视频播放出现卡顿（用户直观感受）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_AUDIO_FRAME_DECODE_FAIL">
            <summary>
当前音频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_FRAME_DECODE_FAIL">
            <summary>
当前视频帧解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_SPEAKER_DEVICE_ABNORMAL">
            <summary>
音频播放设备不可用（例如被占用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_MICROPHONE_DEVICE_ABNORMAL">
            <summary>
音频采集设备不可用（例如被占用）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_MICROPHONE_NOT_AUTHORIZED">
            <summary>
用户未授权当前应用使用麦克风
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_SPEAKER_DEVICE_EMPTY">
            <summary>
没有检测到可用的扬声器设备
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_MICROPHONE_DEVICE_EMPTY">
            <summary>
没有检测到可用的麦克风设备
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_CAMERA_NOT_AUTHORIZED">
            <summary>
用户未授权当前应用使用摄像头
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_CAMERA_DEVICE_EMPTY">
            <summary>
没有检测到可用的摄像头设备
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_REDUCE_CAPTURE_RESOLUTION">
            <summary>
摄像头采集分辨率被降低，以满足当前帧率和性能最优解。
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_SW_ENCODER_START_FAIL">
            <summary>
软编码启动失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_INSUFFICIENT_CAPTURE_FPS">
            <summary>
摄像头采集帧率不足，部分自带美颜算法的 Android 手机上会出现
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_VIDEO_ENCODER_SW_TO_HW">
            <summary>
视频编码器从软编码自动切换到硬编码，一般是由于 CPU 使用率过高触发的
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVWarning.WARNING_HW_ENCODER_START_FAIL">
            <summary>
硬编码启动失败，采用软编码
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_REQUEST_ACC_BY_HOST_IP">
            <summary>
通过域名进行0x1请求
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIX_PARAM_INVALID">
            <summary>
混流参数校验失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_USER_DEFINE_RECORD_ID_INVALID">
            <summary>
userDefineRecordId错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CUSTOM_STREAM_INVALID">
            <summary>
自定义流id错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_REQUEST_QUERY_CONFIG_TIMEOUT">
            <summary>
请求通用配置超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_INTERNAL_ERROR">
            <summary>
服务器内部错误，请重试
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_ACCOUNT_EXCEED_PURCHASES">
            <summary>
创建账号数量超过已购买预付费数量限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_TICKET_EXPIRED">
            <summary>
票据因过期原因校验失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_TICKET_VERIFICATION_FAILED">
            <summary>
票据校验失败，请检查各项参数是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_APPID_ERROR">
            <summary>
sdkAppId 填写错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_INVALID_LOGIN_STATUS">
            <summary>
登录状态无效，请使用 usersig 重新鉴权
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_LIMITED_BY_SECURITY">
            <summary>
安全原因被限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_INVALID">
            <summary>
usersig 已经失效，请重新生成，再次尝试
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_ACCOUNT_IN_BLACKLIST">
            <summary>
帐号已被拉入黑名单，请联系 TLS 帐号支持 QQ 3268519604
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_APPID_NOT_FOUND">
            <summary>
sdkAppId 未找到，请确认是否已经在腾讯云上配置
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_VERIFICATION_FAILED">
            <summary>
内部第三方票据验证超时，请重试，如多次重试不成功，请@TLS 帐号支持，QQ 3268519604
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_VERIFICATION_EXPIRED">
            <summary>
内部第三方票据验证超时，请重试，如多次重试不成功，请@TLS 帐号支持，QQ 3268519604
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_APPID_NOT_MATCH">
            <summary>
sig 中 sdkAppId 与请求时的 sdkAppId 不匹配，请检查登录时填写的 sdkAppId 与 sig 中的是否一致
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_ID_NOT_MATCH">
            <summary>
sig 中 identifier 与请求时的 identifier 不匹配，请检查登录时填写的 identifier 与 sig 中的是否一致
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_8">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_7">
            <summary>
用业务公钥验证 sig 失败，请确认生成的 usersig 使用的私钥和 sdkAppId 是否对应
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_6">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_5">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_4">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_3">
            <summary>
sig 校验失败，可用工具自行验证生成的 sig 是否正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_2">
            <summary>
sig 校验失败，请确认下 sig 内容是否被截断，如缓冲区长度不够导致的内容截断
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_VERIFICATION_FAILED_1">
            <summary>
sig 校验失败，请确认下 sig 内容是否被截断，如缓冲区长度不够导致的内容截断
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_SSO_SIG_EXPIRED">
            <summary>
sig 过期，请尝试重新生成。如果是刚生成，就过期，请检查有效期填写的是否过小，或者填的 0
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_PB_SERIALIZE">
            <summary>
Protobuf 序列化错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_RECORDID_STORE">
            <summary>
无法保存用户自定义 recordId
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_REACH_PROXY_MAX">
            <summary>
代理机超出限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_ROLE">
            <summary>
未定义角色
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_UNKNOWN_SUB_CMD">
            <summary>
未定义命令字
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_DECODE_JSON_FAIL">
            <summary>
JSON 串解析失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROOM_FULL">
            <summary>
房间满员
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROOM_ID_TOO_LONG">
            <summary>
房间号超过限制
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_ROOM_ID">
            <summary>
房间号非法
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_RPS_INVALID_PARAMETER">
            <summary>
请求 I 帧参数错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_ROOM_TOO_BIG">
            <summary>
请求 I 帧房间用户太多
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_DEST_USER_NOT_EXIST">
            <summary>
请求 I 帧目标用户不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_INVALID_PACKET">
            <summary>
请求 I 帧包格式错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_I_FRAME_UNKNOW_TYPE">
            <summary>
请求 I 帧未知 opType
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_PARAMETER">
            <summary>
参数错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_REQUEST_VIDEO">
            <summary>
没有权限请求视频
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_USER_WAS_DELETED">
            <summary>
用户被删除状态
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NOT_PUSH_SUB_VIDEO">
            <summary>
当前用户没有上行辅路
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROUTE_TABLE_ERROR">
            <summary>
没有空闲路由表
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_PUSH_VIDEO">
            <summary>
没有权限上视频
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_PARAMETER_SUB_VIDEO">
            <summary>
辅路抢视频位、申请辅路请求类型参数错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_ENTER_ROOM">
            <summary>
没有权限进入房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_CREATE_ROOM">
            <summary>
没有权限创建房间
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_LOCATION_NOT_EXIST">
            <summary>
locationid 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SWITCH_TERMINATION_FREQUENTLY">
            <summary>
频繁切换终端
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_FIND_USER_FAILED">
            <summary>
查找用户失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ADD_USER_FAILED">
            <summary>
房间添加用户失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ROOM_NOT_EXIST">
            <summary>
房间不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SIGN_TIMEOUT">
            <summary>
签名过期
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SIGN_ERROR">
            <summary>
签名错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CREATE_ROOM_FAILED">
            <summary>
创建房间失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_INVALID_ROOMID">
            <summary>
无效的房间 Id
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_SYSTEM_ERROR">
            <summary>
后台错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_TOKEN_EORROR">
            <summary>
token里面的tinyid和进房信令tinyid不同 或是 进房信令没有token
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_LOCATIONID">
            <summary>
后台用户位置标识 locationid 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_ROOMID">
            <summary>
后台房间标识 roomid 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_ROOM_NOT_EXIST">
            <summary>
房间不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_SIGN_TIMEOUT">
            <summary>
签名超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_SIGN_ERROR">
            <summary>
签名错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_ACC_TOKEN_TIMEOUT">
            <summary>
token 超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ECDH_GET_TINYID">
            <summary>
userSig 校验失败，请检查 TRTCParams.userSig 是否填写正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ECDH_GET_KEY">
            <summary>
生成公钥失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_INVALID">
            <summary>
无效请求, 分配接口机失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_LACK_SDKAPPID">
            <summary>
非法SDKAppid
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_STRGROUP_HAS_INVALID_CHARS">
            <summary>
房间号非法
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ROOMID_EXCHANGE_FAILED">
            <summary>
房间号转换出错
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_BAD_SCENE_OR_ROLE">
            <summary>
场景或角色错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_BAD_ROOMID">
            <summary>
房间号错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_DATABASE">
            <summary>
数据库查询失败（房间相关存储信息）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_GENERATE_TOKEN_ERROR">
            <summary>
HTTPS 请求时，生成 token 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_GENERATE_KEN_ERROR">
            <summary>
HTTPS 请求时，生成加密 key 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_PRIVILEGE_FLAG_ERROR">
            <summary>
权限位校验失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_INVALID_COMMAND">
            <summary>
无效的命令字
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_TOKEN_TIMEOUT">
            <summary>
HTTPS token 超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_GENERATE_SIGN_FAILED">
            <summary>
生成签名错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_ALLOCATE_ACCESS_FAILED">
            <summary>
分配接口机错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_TOKEN_ERROR">
            <summary>
TOKEN 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_UNPACKING_ERROR">
            <summary>
请求解包错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_SEND_JSON_CMD_TIMEOUT">
            <summary>
请求发送Json 信令超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ACCIP_LIST_EMPTY">
            <summary>
请求接口机 IP 返回的列表为空的
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_AES_TOKEN_RETURN_ERROR">
            <summary>
请求 AES TOKEN 时，server 返回的内容是空的
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_TOKEN_INVALID_PARAMETER">
            <summary>
请求 token 无效参数
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_SET_RECEIVE_TIMEOUT">
            <summary>
请求接收视频项超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CLOSE_VIDEO_TIMEOUT">
            <summary>
请求关闭视频超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_STATUS_REPORT_TIMEOUT">
            <summary>
请求状态上报超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CHANGE_ABILITY_TIMEOUT">
            <summary>
请求修改视频能力项超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_VIDEO_DATA_ROOM_TIMEOUT">
            <summary>
请求视频数据超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_VIDEO_FLAG_TIMEOUT">
            <summary>
请求视频位超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_IP_TIMEOUT">
            <summary>
请求 IP 和 sig 超时，请检查网络是否正常，或网络防火墙是否放行 UDP 访问下列 IP 和域名 query.tencent-cloud.com:8000 162.14.23.140:8000 162.14.7.49:8000
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_TOKEN_HTTPS_TIMEOUT">
            <summary>
请求 token HTTPS 超时，请检查网络是否正常，或网络防火墙是否放行 HTTPS 访问 official.opensso.tencent-cloud.com:443
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_AVSEAT_FAIL">
            <summary>
请求视频位失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_CONNECT_FAIL">
            <summary>
连接接口机服务器失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_IP_FAIL">
            <summary>
拉取接口机服务器地址失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_HEARTBEAT_FAIL">
            <summary>
心跳失败，客户端定时向服务器发送数据包，告诉服务器自己活着，这个错误通常是发包超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_ACC_FETCH_STREAM_FAIL">
            <summary>
直播，RTMPACC 低延时拉流失败，且经过多次重试无法恢复
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PLAY_LIVE_STREAM_SERVER_REFUSE">
            <summary>
直播，服务器拒绝连接请求
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PLAY_LIVE_STREAM_SWITCH_FAIL">
            <summary>
直播，切流失败（切流可以播放不同画面大小的视频）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_GET_VODFILE_MEDIAINFO_FAIL">
            <summary>
点播，获取点播文件信息失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_VOD_DECRYPT_FAIL">
            <summary>
点播，音视频流解密失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_HEVC_DECODE_FAIL">
            <summary>
H265 解码失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_FILE_NOT_FOUND">
            <summary>
播放的文件不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_GET_RTMP_ACC_URL_FAIL">
            <summary>
直播，获取加速拉流的地址失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PLAY_LIVE_STREAM_NET_DISCONNECT">
            <summary>
直播，网络断连，且经多次重连抢救无效，可以放弃治疗，更多重试请自行重启播放
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_SERVER_REFUSE">
            <summary>
直播，服务器拒绝连接请求，可能是该推流地址已经被占用，或者 TXSecret 校验失败，或者是过期了，或者是欠费了
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_NO_NETWORK">
            <summary>
直播，网络不可用，请确认 Wi-Fi、移动数据或者有线网络是否正常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_NET_ALLADDRESS_FAIL">
            <summary>
直播，连接推流服务器失败（若支持智能选路，IP 全部失败）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_INVALID_ADDRESS">
            <summary>
直播，推流地址非法，例如不是 RTMP 协议的地址
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_RTMP_PUSH_NET_DISCONNECT">
            <summary>
直播，推流出现网络断开，且经过多次重试无法恢复
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_INVALID_SEQ">
            <summary>
连麦请求序号错乱
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_USER_FULL">
            <summary>
被连麦用户达到资源上限
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_USER_DELETED">
            <summary>
被连麦用户已被删除
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_USER_NOT_EXIST">
            <summary>
被连麦用户不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_REACH_MAX_ROOM">
            <summary>
被连麦房间达到连麦上限
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CONNED_ROOM_NOT_EXIST">
            <summary>
被连麦房间不存在
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_CANCEL_FAILED">
            <summary>
取消跨房间连麦失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_FAILED">
            <summary>
跨房间连麦失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_USER_NOT_CONNED">
            <summary>
本用户未发起连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NOT_CONNED">
            <summary>
本房间无连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_SIG_GROUPID">
            <summary>
跨房间连麦签名不匹配
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_INVALID_SIG_TIME">
            <summary>
跨房间连麦签名时间戳错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_PARSE_SIG">
            <summary>
跨房间连麦签名解析错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NO_KEY">
            <summary>
未找到跨房间连麦签名解密密钥
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_DECRYPT_SIG">
            <summary>
跨房间连麦签名解密失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NO_SIG">
            <summary>
跨房间连麦无签名
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REQ">
            <summary>
跨房间连麦请求格式错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REQ_TIMEOUT">
            <summary>
跨房间连麦请求超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REACH_MAX_RETRY_TIMES">
            <summary>
跨房间连麦重试次数耗尽
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_REACH_MAX_NUM">
            <summary>
达到跨房间连麦上限
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_CONN_ROOM_NOT_SUPPORT">
            <summary>
不支持跨房间连麦
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CONNECT_OTHER_ROOM_AS_AUDIENCE">
            <summary>
当前是观众角色，不能请求或断开跨房连麦，需要先 switchRole() 到主播
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CONN_ROOM_INVALID_PARAM">
            <summary>
无效参数
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_DISCONN_ROOM_TIMEOUT">
            <summary>
请求退出连麦超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_CONN_ROOM_TIMEOUT">
            <summary>
请求连麦超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_STOP_PUBLISHING_ERROR">
            <summary>
停止向腾讯云的直播 CDN 推流信令异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_STOP_PUBLISHING_TIMEOUT">
            <summary>
停止向腾讯云的直播 CDN 推流信令超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_START_PUBLISHING_ERROR">
            <summary>
开始向腾讯云的直播 CDN 推流信令异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_START_PUBLISHING_TIMEOUT">
            <summary>
开始向腾讯云的直播 CDN 推流信令超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CLOUD_MIX_TRANSCODING_SERVER_FAILED">
            <summary>
云端混流回包异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PUBLISH_CDN_STREAM_SERVER_FAILED">
            <summary>
旁路转推回包异常
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CLOUD_MIX_TRANSCODING_REQUEST_TIME_OUT">
            <summary>
云端混流请求超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PUBLISH_CDN_STREAM_REQUEST_TIME_OUT">
            <summary>
旁路转推请求超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_BUFFER_TYPE_UNSUPPORTED">
            <summary>
设置的 buffer type 不支持
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_PIXEL_FORMAT_UNSUPPORTED">
            <summary>
设置的 pixel format 不支持
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_UNSUPPORTED_SAMPLERATE">
            <summary>
不支持的音频采样率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_AUDIO_ENCODE_FAIL">
            <summary>
音频帧编码失败，例如传入自定义音频数据，SDK 无法处理
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_UNSUPPORTED_RESOLUTION">
            <summary>
不支持的视频分辨率
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_VIDEO_ENCODE_FAIL">
            <summary>
视频帧编码失败，例如 iOS 设备切换到其他应用时，硬编码器可能被系统释放，再切换回来时，硬编码器重启前，可能会抛出
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SCREEN_CAPTURE_STOPPED">
            <summary>
录屏被系统中止
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_ANOTHER_USER_PUSH_SUB_VIDEO">
            <summary>
其他用户正在上行辅路
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_CENTER_NO_PRIVILEDGE_PUSH_SUB_VIDEO">
            <summary>
没有权限上行辅路
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SCREEN_CAPTURE_UNSURPORT">
            <summary>
录屏失败，在 Android 平台，需要5.0以上的系统，在 iOS 平台，需要11.0以上的系统
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SCREEN_CAPTURE_START_FAIL">
            <summary>
开始录屏失败，如果在移动设备出现，可能是权限被用户拒绝了，如果在 Windows 或 Mac 系统的设备出现，请检查录屏接口的参数是否符合要求
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SPEAKER_STOP_FAIL">
            <summary>
停止扬声器失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SPEAKER_SET_PARAM_FAIL">
            <summary>
扬声器设置参数失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SPEAKER_START_FAIL">
            <summary>
打开扬声器失败，例如在 Windows 或 Mac 设备，扬声器的配置程序（驱动程序）异常，禁用后重新启用设备，或者重启机器，或者更新配置程序
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_STOP_FAIL">
            <summary>
停止麦克风失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_OCCUPY">
            <summary>
麦克风正在被占用中，例如移动设备正在通话时，打开麦克风会失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_SET_PARAM_FAIL">
            <summary>
麦克风设置参数失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_NOT_AUTHORIZED">
            <summary>
麦克风设备未授权，通常在移动设备出现，可能是权限被用户拒绝了
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_MIC_START_FAIL">
            <summary>
打开麦克风失败，例如在 Windows 或 Mac 设备，麦克风的配置程序（驱动程序）异常，禁用后重新启用设备，或者重启机器，或者更新配置程序
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_OCCUPY">
            <summary>
摄像头正在被占用中，可尝试打开其他摄像头
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_SET_PARAM_FAIL">
            <summary>
摄像头参数设置出错（参数不支持或其它）
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_NOT_AUTHORIZED">
            <summary>
摄像头设备未授权，通常在移动设备出现，可能是权限被用户拒绝了
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_CAMERA_START_FAIL">
            <summary>
打开摄像头失败，例如在 Windows 或 Mac 设备，摄像头的配置程序（驱动程序）异常，禁用后重新启用设备，或者重启机器，或者更新配置程序
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_QUIT_ROOM_TIMEOUT">
            <summary>
请求退房超时
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SERVER_INFO_SERVICE_SUSPENDED">
            <summary>
服务不可用。请检查：套餐包剩余分钟数是否大于0，腾讯云账号是否欠费
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_REQUEST_ENTER_ROOM_TIMEOUT">
            <summary>
请求进房超时，请检查网络
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_USER_SIG_INVALID">
            <summary>
进房参数 userSig 不正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_USER_ID_INVALID">
            <summary>
进房参数 userID 不正确
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_ID_INVALID">
            <summary>
进房参数 roomId 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_SDK_APPID_INVALID">
            <summary>
进房参数 sdkAppId 错误
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ENTER_ROOM_PARAM_NULL">
            <summary>
进房参数为空，请检查 enterRoom:appScene: 接口调用是否传入有效的 param
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_ROOM_ENTER_FAIL">
            <summary>
进入房间失败
</summary>
        </member>
        <member name="F:ManageLiteAV.TXLiteAVError.ERR_NULL">
            <summary>
无错误
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITXDeviceCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'D:trtc.TXView'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.strRoomId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.userDefineRecordId'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITRTCScreenCaptureSourceList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.ITRTCCloudCallback.onEnterRoom(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getCameraDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getMicDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getSpeakerDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.ITRTCCloud.enterRoom(trtc.TRTCParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trtc.TRTCAppScene)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ManageLiteAV.TRTCParams.strRoomId'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ManageLiteAV.ITRTCCloud.enterRoom(ManageLiteAV.TRTCParams@,ManageLiteAV.TRTCAppScene)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITXDeviceCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'D:trtc.TXView'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.strRoomId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.userDefineRecordId'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITRTCScreenCaptureSourceList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusher.getCameraDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusher.getMicDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusherCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePlayerCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITXDeviceCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'D:trtc.TXView'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.strRoomId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.userDefineRecordId'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITRTCScreenCaptureSourceList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.ITRTCCloudCallback.onEnterRoom(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getCameraDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getMicDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getSpeakerDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.ITRTCCloud.enterRoom(trtc.TRTCParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trtc.TRTCAppScene)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITXDeviceCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'D:trtc.TXView'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.strRoomId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.userDefineRecordId'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITRTCScreenCaptureSourceList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePlayer.getSpeakerDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePusherCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ITXLivePlayerCallback.onEventCallback(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITXDeviceCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'D:trtc.TXView'. -->
        <!-- Discarding badly formed XML document comment for member 'F:TRTCTranscodingConfigMode_Template_ScreenSharing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.strRoomId'. -->
        <!-- Discarding badly formed XML document comment for member 'F:trtc.TRTCParams.userDefineRecordId'. -->
        <!-- Discarding badly formed XML document comment for member 'T:trtc.ITRTCScreenCaptureSourceList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.ITRTCCloudCallback.onEnterRoom(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getCameraDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getMicDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.IDeprecatedTRTCCloud.getSpeakerDevicesList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:trtc.ITRTCCloud.enterRoom(trtc.TRTCParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,trtc.TRTCAppScene)'. -->
    </members>
</doc>